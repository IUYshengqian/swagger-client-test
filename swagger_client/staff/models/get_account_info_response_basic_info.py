# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetAccountInfoResponseBasicInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created_at': 'datetime',
        'phone_number': 'str',
        'email': 'str',
        'is_certified': 'bool',
        'real_name': 'str',
        'is_blocked': 'bool',
        'venture_id': 'str',
        'tenant_id': 'str',
        'otc_id': 'str',
        'exchange_id': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'created_at': 'createdAt',
        'phone_number': 'phoneNumber',
        'email': 'email',
        'is_certified': 'isCertified',
        'real_name': 'realName',
        'is_blocked': 'isBlocked',
        'venture_id': 'ventureId',
        'tenant_id': 'tenantId',
        'otc_id': 'otcId',
        'exchange_id': 'exchangeId'
    }

    def __init__(self, account_id=None, created_at=None, phone_number=None, email=None, is_certified=None, real_name=None, is_blocked=None, venture_id=None, tenant_id=None, otc_id=None, exchange_id=None):  # noqa: E501
        """GetAccountInfoResponseBasicInfo - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._created_at = None
        self._phone_number = None
        self._email = None
        self._is_certified = None
        self._real_name = None
        self._is_blocked = None
        self._venture_id = None
        self._tenant_id = None
        self._otc_id = None
        self._exchange_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if created_at is not None:
            self.created_at = created_at
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email
        if is_certified is not None:
            self.is_certified = is_certified
        if real_name is not None:
            self.real_name = real_name
        if is_blocked is not None:
            self.is_blocked = is_blocked
        if venture_id is not None:
            self.venture_id = venture_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if otc_id is not None:
            self.otc_id = otc_id
        if exchange_id is not None:
            self.exchange_id = exchange_id

    @property
    def account_id(self):
        """Gets the account_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        账号ID  # noqa: E501

        :return: The account_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetAccountInfoResponseBasicInfo.

        账号ID  # noqa: E501

        :param account_id: The account_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """Gets the created_at of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetAccountInfoResponseBasicInfo.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def phone_number(self):
        """Gets the phone_number of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        手机号码  # noqa: E501

        :return: The phone_number of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetAccountInfoResponseBasicInfo.

        手机号码  # noqa: E501

        :param phone_number: The phone_number of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        邮件地址  # noqa: E501

        :return: The email of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetAccountInfoResponseBasicInfo.

        邮件地址  # noqa: E501

        :param email: The email of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def is_certified(self):
        """Gets the is_certified of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        是否实名  # noqa: E501

        :return: The is_certified of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_certified

    @is_certified.setter
    def is_certified(self, is_certified):
        """Sets the is_certified of this GetAccountInfoResponseBasicInfo.

        是否实名  # noqa: E501

        :param is_certified: The is_certified of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: bool
        """

        self._is_certified = is_certified

    @property
    def real_name(self):
        """Gets the real_name of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        姓名  # noqa: E501

        :return: The real_name of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this GetAccountInfoResponseBasicInfo.

        姓名  # noqa: E501

        :param real_name: The real_name of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def is_blocked(self):
        """Gets the is_blocked of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        是否锁定  # noqa: E501

        :return: The is_blocked of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_blocked

    @is_blocked.setter
    def is_blocked(self, is_blocked):
        """Sets the is_blocked of this GetAccountInfoResponseBasicInfo.

        是否锁定  # noqa: E501

        :param is_blocked: The is_blocked of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: bool
        """

        self._is_blocked = is_blocked

    @property
    def venture_id(self):
        """Gets the venture_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        项目方Id  # noqa: E501

        :return: The venture_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._venture_id

    @venture_id.setter
    def venture_id(self, venture_id):
        """Sets the venture_id of this GetAccountInfoResponseBasicInfo.

        项目方Id  # noqa: E501

        :param venture_id: The venture_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: str
        """

        self._venture_id = venture_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        租户Id  # noqa: E501

        :return: The tenant_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this GetAccountInfoResponseBasicInfo.

        租户Id  # noqa: E501

        :param tenant_id: The tenant_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def otc_id(self):
        """Gets the otc_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        otcId  # noqa: E501

        :return: The otc_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._otc_id

    @otc_id.setter
    def otc_id(self, otc_id):
        """Sets the otc_id of this GetAccountInfoResponseBasicInfo.

        otcId  # noqa: E501

        :param otc_id: The otc_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: str
        """

        self._otc_id = otc_id

    @property
    def exchange_id(self):
        """Gets the exchange_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501

        交易所Id  # noqa: E501

        :return: The exchange_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this GetAccountInfoResponseBasicInfo.

        交易所Id  # noqa: E501

        :param exchange_id: The exchange_id of this GetAccountInfoResponseBasicInfo.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAccountInfoResponseBasicInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAccountInfoResponseBasicInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
