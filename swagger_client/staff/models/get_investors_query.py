# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetInvestorsQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_start_at': 'datetime',
        'created_end_at': 'datetime',
        'account_id': 'str',
        'email': 'str',
        'phone_number': 'str',
        'name': 'str',
        'nationality_code': 'str',
        'id_number': 'str',
        'certificated_id': 'str',
        'auth_type': 'str'
    }

    attribute_map = {
        'created_start_at': 'createdStartAt',
        'created_end_at': 'createdEndAt',
        'account_id': 'accountId',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'name': 'name',
        'nationality_code': 'nationalityCode',
        'id_number': 'ID_number',
        'certificated_id': 'certificated_ID',
        'auth_type': 'authType'
    }

    def __init__(self, created_start_at=None, created_end_at=None, account_id=None, email=None, phone_number=None, name=None, nationality_code=None, id_number=None, certificated_id=None, auth_type=None):  # noqa: E501
        """GetInvestorsQuery - a model defined in Swagger"""  # noqa: E501

        self._created_start_at = None
        self._created_end_at = None
        self._account_id = None
        self._email = None
        self._phone_number = None
        self._name = None
        self._nationality_code = None
        self._id_number = None
        self._certificated_id = None
        self._auth_type = None
        self.discriminator = None

        if created_start_at is not None:
            self.created_start_at = created_start_at
        if created_end_at is not None:
            self.created_end_at = created_end_at
        if account_id is not None:
            self.account_id = account_id
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if name is not None:
            self.name = name
        if nationality_code is not None:
            self.nationality_code = nationality_code
        if id_number is not None:
            self.id_number = id_number
        if certificated_id is not None:
            self.certificated_id = certificated_id
        if auth_type is not None:
            self.auth_type = auth_type

    @property
    def created_start_at(self):
        """Gets the created_start_at of this GetInvestorsQuery.  # noqa: E501

        注册起始时间  # noqa: E501

        :return: The created_start_at of this GetInvestorsQuery.  # noqa: E501
        :rtype: datetime
        """
        return self._created_start_at

    @created_start_at.setter
    def created_start_at(self, created_start_at):
        """Sets the created_start_at of this GetInvestorsQuery.

        注册起始时间  # noqa: E501

        :param created_start_at: The created_start_at of this GetInvestorsQuery.  # noqa: E501
        :type: datetime
        """

        self._created_start_at = created_start_at

    @property
    def created_end_at(self):
        """Gets the created_end_at of this GetInvestorsQuery.  # noqa: E501

        注册结束时间  # noqa: E501

        :return: The created_end_at of this GetInvestorsQuery.  # noqa: E501
        :rtype: datetime
        """
        return self._created_end_at

    @created_end_at.setter
    def created_end_at(self, created_end_at):
        """Sets the created_end_at of this GetInvestorsQuery.

        注册结束时间  # noqa: E501

        :param created_end_at: The created_end_at of this GetInvestorsQuery.  # noqa: E501
        :type: datetime
        """

        self._created_end_at = created_end_at

    @property
    def account_id(self):
        """Gets the account_id of this GetInvestorsQuery.  # noqa: E501

        用户id  # noqa: E501

        :return: The account_id of this GetInvestorsQuery.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetInvestorsQuery.

        用户id  # noqa: E501

        :param account_id: The account_id of this GetInvestorsQuery.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def email(self):
        """Gets the email of this GetInvestorsQuery.  # noqa: E501

        邮箱  # noqa: E501

        :return: The email of this GetInvestorsQuery.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetInvestorsQuery.

        邮箱  # noqa: E501

        :param email: The email of this GetInvestorsQuery.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this GetInvestorsQuery.  # noqa: E501

        手机号码  # noqa: E501

        :return: The phone_number of this GetInvestorsQuery.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetInvestorsQuery.

        手机号码  # noqa: E501

        :param phone_number: The phone_number of this GetInvestorsQuery.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def name(self):
        """Gets the name of this GetInvestorsQuery.  # noqa: E501

        姓名  # noqa: E501

        :return: The name of this GetInvestorsQuery.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetInvestorsQuery.

        姓名  # noqa: E501

        :param name: The name of this GetInvestorsQuery.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nationality_code(self):
        """Gets the nationality_code of this GetInvestorsQuery.  # noqa: E501

        国籍  # noqa: E501

        :return: The nationality_code of this GetInvestorsQuery.  # noqa: E501
        :rtype: str
        """
        return self._nationality_code

    @nationality_code.setter
    def nationality_code(self, nationality_code):
        """Sets the nationality_code of this GetInvestorsQuery.

        国籍  # noqa: E501

        :param nationality_code: The nationality_code of this GetInvestorsQuery.  # noqa: E501
        :type: str
        """

        self._nationality_code = nationality_code

    @property
    def id_number(self):
        """Gets the id_number of this GetInvestorsQuery.  # noqa: E501

        证件号码  # noqa: E501

        :return: The id_number of this GetInvestorsQuery.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this GetInvestorsQuery.

        证件号码  # noqa: E501

        :param id_number: The id_number of this GetInvestorsQuery.  # noqa: E501
        :type: str
        """

        self._id_number = id_number

    @property
    def certificated_id(self):
        """Gets the certificated_id of this GetInvestorsQuery.  # noqa: E501

        认证身份 user:普通用户,certificated_user:实名用户,tenant:租户用户,venture:项目方用户  # noqa: E501

        :return: The certificated_id of this GetInvestorsQuery.  # noqa: E501
        :rtype: str
        """
        return self._certificated_id

    @certificated_id.setter
    def certificated_id(self, certificated_id):
        """Sets the certificated_id of this GetInvestorsQuery.

        认证身份 user:普通用户,certificated_user:实名用户,tenant:租户用户,venture:项目方用户  # noqa: E501

        :param certificated_id: The certificated_id of this GetInvestorsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "certificated_user", "tenant", "venture"]  # noqa: E501
        if certificated_id not in allowed_values:
            raise ValueError(
                "Invalid value for `certificated_id` ({0}), must be one of {1}"  # noqa: E501
                .format(certificated_id, allowed_values)
            )

        self._certificated_id = certificated_id

    @property
    def auth_type(self):
        """Gets the auth_type of this GetInvestorsQuery.  # noqa: E501

        认证类型 individual:个人, company:企业  # noqa: E501

        :return: The auth_type of this GetInvestorsQuery.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this GetInvestorsQuery.

        认证类型 individual:个人, company:企业  # noqa: E501

        :param auth_type: The auth_type of this GetInvestorsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["individual", "company"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetInvestorsQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetInvestorsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
