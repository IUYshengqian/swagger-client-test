# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetStaffInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'phone_number': 'str',
        'email_address': 'str',
        'account': 'str',
        'real_name': 'str',
        'resource': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'phone_number': 'phoneNumber',
        'email_address': 'emailAddress',
        'account': 'account',
        'real_name': 'realName',
        'resource': 'resource'
    }

    def __init__(self, id=None, phone_number=None, email_address=None, account=None, real_name=None, resource=None):  # noqa: E501
        """GetStaffInfoResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._phone_number = None
        self._email_address = None
        self._account = None
        self._real_name = None
        self._resource = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if phone_number is not None:
            self.phone_number = phone_number
        if email_address is not None:
            self.email_address = email_address
        if account is not None:
            self.account = account
        if real_name is not None:
            self.real_name = real_name
        if resource is not None:
            self.resource = resource

    @property
    def id(self):
        """Gets the id of this GetStaffInfoResponse.  # noqa: E501

        职员ID  # noqa: E501

        :return: The id of this GetStaffInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetStaffInfoResponse.

        职员ID  # noqa: E501

        :param id: The id of this GetStaffInfoResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def phone_number(self):
        """Gets the phone_number of this GetStaffInfoResponse.  # noqa: E501

        手机号码  # noqa: E501

        :return: The phone_number of this GetStaffInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetStaffInfoResponse.

        手机号码  # noqa: E501

        :param phone_number: The phone_number of this GetStaffInfoResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email_address(self):
        """Gets the email_address of this GetStaffInfoResponse.  # noqa: E501

        邮件地址  # noqa: E501

        :return: The email_address of this GetStaffInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this GetStaffInfoResponse.

        邮件地址  # noqa: E501

        :param email_address: The email_address of this GetStaffInfoResponse.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def account(self):
        """Gets the account of this GetStaffInfoResponse.  # noqa: E501

        账号(登录名)  # noqa: E501

        :return: The account of this GetStaffInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this GetStaffInfoResponse.

        账号(登录名)  # noqa: E501

        :param account: The account of this GetStaffInfoResponse.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def real_name(self):
        """Gets the real_name of this GetStaffInfoResponse.  # noqa: E501

        职员实际名称  # noqa: E501

        :return: The real_name of this GetStaffInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this GetStaffInfoResponse.

        职员实际名称  # noqa: E501

        :param real_name: The real_name of this GetStaffInfoResponse.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def resource(self):
        """Gets the resource of this GetStaffInfoResponse.  # noqa: E501

        资源id列表  # noqa: E501

        :return: The resource of this GetStaffInfoResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this GetStaffInfoResponse.

        资源id列表  # noqa: E501

        :param resource: The resource of this GetStaffInfoResponse.  # noqa: E501
        :type: list[int]
        """

        self._resource = resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetStaffInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetStaffInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
