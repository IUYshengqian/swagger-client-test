# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetStaffSponsorListResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account': 'str',
        'name': 'str',
        'email': 'str',
        'status': 'bool',
        'created_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account': 'account',
        'name': 'name',
        'email': 'email',
        'status': 'status',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, account=None, name=None, email=None, status=None, created_at=None):  # noqa: E501
        """GetStaffSponsorListResponseItems - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._account = None
        self._name = None
        self._email = None
        self._status = None
        self._created_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account is not None:
            self.account = account
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this GetStaffSponsorListResponseItems.  # noqa: E501

        保荐方id  # noqa: E501

        :return: The id of this GetStaffSponsorListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetStaffSponsorListResponseItems.

        保荐方id  # noqa: E501

        :param id: The id of this GetStaffSponsorListResponseItems.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account(self):
        """Gets the account of this GetStaffSponsorListResponseItems.  # noqa: E501

        保荐方账号  # noqa: E501

        :return: The account of this GetStaffSponsorListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this GetStaffSponsorListResponseItems.

        保荐方账号  # noqa: E501

        :param account: The account of this GetStaffSponsorListResponseItems.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def name(self):
        """Gets the name of this GetStaffSponsorListResponseItems.  # noqa: E501

        保荐方名称  # noqa: E501

        :return: The name of this GetStaffSponsorListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetStaffSponsorListResponseItems.

        保荐方名称  # noqa: E501

        :param name: The name of this GetStaffSponsorListResponseItems.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this GetStaffSponsorListResponseItems.  # noqa: E501

        保荐方邮箱  # noqa: E501

        :return: The email of this GetStaffSponsorListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetStaffSponsorListResponseItems.

        保荐方邮箱  # noqa: E501

        :param email: The email of this GetStaffSponsorListResponseItems.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def status(self):
        """Gets the status of this GetStaffSponsorListResponseItems.  # noqa: E501

        保荐方是否锁定 true:可用 false:不可用  # noqa: E501

        :return: The status of this GetStaffSponsorListResponseItems.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetStaffSponsorListResponseItems.

        保荐方是否锁定 true:可用 false:不可用  # noqa: E501

        :param status: The status of this GetStaffSponsorListResponseItems.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this GetStaffSponsorListResponseItems.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetStaffSponsorListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetStaffSponsorListResponseItems.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetStaffSponsorListResponseItems.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetStaffSponsorListResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetStaffSponsorListResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
