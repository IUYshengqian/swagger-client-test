# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetVentureResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'account_id': 'str',
        'venture_id': 'str',
        'name': 'str',
        'phone_number': 'str',
        'email': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'account_id': 'accountId',
        'venture_id': 'ventureId',
        'name': 'name',
        'phone_number': 'phoneNumber',
        'email': 'email'
    }

    def __init__(self, created_at=None, account_id=None, venture_id=None, name=None, phone_number=None, email=None):  # noqa: E501
        """GetVentureResponse - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._account_id = None
        self._venture_id = None
        self._name = None
        self._phone_number = None
        self._email = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if account_id is not None:
            self.account_id = account_id
        if venture_id is not None:
            self.venture_id = venture_id
        if name is not None:
            self.name = name
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email

    @property
    def created_at(self):
        """Gets the created_at of this GetVentureResponse.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetVentureResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetVentureResponse.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetVentureResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def account_id(self):
        """Gets the account_id of this GetVentureResponse.  # noqa: E501

        用户Id  # noqa: E501

        :return: The account_id of this GetVentureResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetVentureResponse.

        用户Id  # noqa: E501

        :param account_id: The account_id of this GetVentureResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def venture_id(self):
        """Gets the venture_id of this GetVentureResponse.  # noqa: E501

        项目方Id  # noqa: E501

        :return: The venture_id of this GetVentureResponse.  # noqa: E501
        :rtype: str
        """
        return self._venture_id

    @venture_id.setter
    def venture_id(self, venture_id):
        """Sets the venture_id of this GetVentureResponse.

        项目方Id  # noqa: E501

        :param venture_id: The venture_id of this GetVentureResponse.  # noqa: E501
        :type: str
        """

        self._venture_id = venture_id

    @property
    def name(self):
        """Gets the name of this GetVentureResponse.  # noqa: E501

        姓名  # noqa: E501

        :return: The name of this GetVentureResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetVentureResponse.

        姓名  # noqa: E501

        :param name: The name of this GetVentureResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this GetVentureResponse.  # noqa: E501

        手机号码  # noqa: E501

        :return: The phone_number of this GetVentureResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetVentureResponse.

        手机号码  # noqa: E501

        :param phone_number: The phone_number of this GetVentureResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this GetVentureResponse.  # noqa: E501

        邮件地址  # noqa: E501

        :return: The email of this GetVentureResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetVentureResponse.

        邮件地址  # noqa: E501

        :param email: The email of this GetVentureResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetVentureResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetVentureResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
