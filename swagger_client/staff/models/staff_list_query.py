# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StaffListQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'str',
        'end_time': 'str',
        'id': 'str',
        'email_address': 'str',
        'phone_number': 'str',
        'role_id': 'str'
    }

    attribute_map = {
        'start_time': 'startTime',
        'end_time': 'endTime',
        'id': 'id',
        'email_address': 'emailAddress',
        'phone_number': 'phoneNumber',
        'role_id': 'roleId'
    }

    def __init__(self, start_time=None, end_time=None, id=None, email_address=None, phone_number=None, role_id=None):  # noqa: E501
        """StaffListQuery - a model defined in Swagger"""  # noqa: E501

        self._start_time = None
        self._end_time = None
        self._id = None
        self._email_address = None
        self._phone_number = None
        self._role_id = None
        self.discriminator = None

        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if id is not None:
            self.id = id
        if email_address is not None:
            self.email_address = email_address
        if phone_number is not None:
            self.phone_number = phone_number
        if role_id is not None:
            self.role_id = role_id

    @property
    def start_time(self):
        """Gets the start_time of this StaffListQuery.  # noqa: E501

        开始时间  # noqa: E501

        :return: The start_time of this StaffListQuery.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StaffListQuery.

        开始时间  # noqa: E501

        :param start_time: The start_time of this StaffListQuery.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this StaffListQuery.  # noqa: E501

        结束时间  # noqa: E501

        :return: The end_time of this StaffListQuery.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this StaffListQuery.

        结束时间  # noqa: E501

        :param end_time: The end_time of this StaffListQuery.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this StaffListQuery.  # noqa: E501

        请求的职员ID  # noqa: E501

        :return: The id of this StaffListQuery.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StaffListQuery.

        请求的职员ID  # noqa: E501

        :param id: The id of this StaffListQuery.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email_address(self):
        """Gets the email_address of this StaffListQuery.  # noqa: E501

        请求的职员邮箱地址  # noqa: E501

        :return: The email_address of this StaffListQuery.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this StaffListQuery.

        请求的职员邮箱地址  # noqa: E501

        :param email_address: The email_address of this StaffListQuery.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def phone_number(self):
        """Gets the phone_number of this StaffListQuery.  # noqa: E501

        请求的手机号码  # noqa: E501

        :return: The phone_number of this StaffListQuery.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this StaffListQuery.

        请求的手机号码  # noqa: E501

        :param phone_number: The phone_number of this StaffListQuery.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def role_id(self):
        """Gets the role_id of this StaffListQuery.  # noqa: E501

        请求的角色ID  # noqa: E501

        :return: The role_id of this StaffListQuery.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this StaffListQuery.

        请求的角色ID  # noqa: E501

        :param role_id: The role_id of this StaffListQuery.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StaffListQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaffListQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
