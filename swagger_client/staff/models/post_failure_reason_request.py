# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostFailureReasonRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failure_reason': 'str',
        'type': 'str'
    }

    attribute_map = {
        'failure_reason': 'failureReason',
        'type': 'type'
    }

    def __init__(self, failure_reason=None, type=None):  # noqa: E501
        """PostFailureReasonRequest - a model defined in Swagger"""  # noqa: E501

        self._failure_reason = None
        self._type = None
        self.discriminator = None

        if failure_reason is not None:
            self.failure_reason = failure_reason
        if type is not None:
            self.type = type

    @property
    def failure_reason(self):
        """Gets the failure_reason of this PostFailureReasonRequest.  # noqa: E501

        失败原因  # noqa: E501

        :return: The failure_reason of this PostFailureReasonRequest.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this PostFailureReasonRequest.

        失败原因  # noqa: E501

        :param failure_reason: The failure_reason of this PostFailureReasonRequest.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def type(self):
        """Gets the type of this PostFailureReasonRequest.  # noqa: E501

        原因类型  # noqa: E501

        :return: The type of this PostFailureReasonRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostFailureReasonRequest.

        原因类型  # noqa: E501

        :param type: The type of this PostFailureReasonRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PERSONAL_AUTHENTICATE", "ENTERPRISE_AUTHENTICATE", "OPEN_EXCHANGE", "CLOSE_MARKET", "WITHDRAW", "OTC_SHOPKEEPER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostFailureReasonRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostFailureReasonRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
