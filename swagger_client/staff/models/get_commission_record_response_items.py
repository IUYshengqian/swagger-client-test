# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetCommissionRecordResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'date',
        'account_id': 'str',
        'trade_account_id': 'str',
        'exchange_id': 'str',
        'order_id': 'str',
        'coin_name': 'str',
        'amount': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'account_id': 'accountId',
        'trade_account_id': 'tradeAccountId',
        'exchange_id': 'exchangeId',
        'order_id': 'orderId',
        'coin_name': 'coinName',
        'amount': 'amount'
    }

    def __init__(self, created_at=None, account_id=None, trade_account_id=None, exchange_id=None, order_id=None, coin_name=None, amount=None):  # noqa: E501
        """GetCommissionRecordResponseItems - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._account_id = None
        self._trade_account_id = None
        self._exchange_id = None
        self._order_id = None
        self._coin_name = None
        self._amount = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if account_id is not None:
            self.account_id = account_id
        if trade_account_id is not None:
            self.trade_account_id = trade_account_id
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if order_id is not None:
            self.order_id = order_id
        if coin_name is not None:
            self.coin_name = coin_name
        if amount is not None:
            self.amount = amount

    @property
    def created_at(self):
        """Gets the created_at of this GetCommissionRecordResponseItems.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetCommissionRecordResponseItems.  # noqa: E501
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetCommissionRecordResponseItems.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetCommissionRecordResponseItems.  # noqa: E501
        :type: date
        """

        self._created_at = created_at

    @property
    def account_id(self):
        """Gets the account_id of this GetCommissionRecordResponseItems.  # noqa: E501

        账户id  # noqa: E501

        :return: The account_id of this GetCommissionRecordResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetCommissionRecordResponseItems.

        账户id  # noqa: E501

        :param account_id: The account_id of this GetCommissionRecordResponseItems.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def trade_account_id(self):
        """Gets the trade_account_id of this GetCommissionRecordResponseItems.  # noqa: E501

        账户id  # noqa: E501

        :return: The trade_account_id of this GetCommissionRecordResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trade_account_id

    @trade_account_id.setter
    def trade_account_id(self, trade_account_id):
        """Sets the trade_account_id of this GetCommissionRecordResponseItems.

        账户id  # noqa: E501

        :param trade_account_id: The trade_account_id of this GetCommissionRecordResponseItems.  # noqa: E501
        :type: str
        """

        self._trade_account_id = trade_account_id

    @property
    def exchange_id(self):
        """Gets the exchange_id of this GetCommissionRecordResponseItems.  # noqa: E501

        交易所id  # noqa: E501

        :return: The exchange_id of this GetCommissionRecordResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this GetCommissionRecordResponseItems.

        交易所id  # noqa: E501

        :param exchange_id: The exchange_id of this GetCommissionRecordResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def order_id(self):
        """Gets the order_id of this GetCommissionRecordResponseItems.  # noqa: E501

        成交记录编号  # noqa: E501

        :return: The order_id of this GetCommissionRecordResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetCommissionRecordResponseItems.

        成交记录编号  # noqa: E501

        :param order_id: The order_id of this GetCommissionRecordResponseItems.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def coin_name(self):
        """Gets the coin_name of this GetCommissionRecordResponseItems.  # noqa: E501

        币简称  # noqa: E501

        :return: The coin_name of this GetCommissionRecordResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._coin_name

    @coin_name.setter
    def coin_name(self, coin_name):
        """Sets the coin_name of this GetCommissionRecordResponseItems.

        币简称  # noqa: E501

        :param coin_name: The coin_name of this GetCommissionRecordResponseItems.  # noqa: E501
        :type: str
        """

        self._coin_name = coin_name

    @property
    def amount(self):
        """Gets the amount of this GetCommissionRecordResponseItems.  # noqa: E501

        返佣数量  # noqa: E501

        :return: The amount of this GetCommissionRecordResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetCommissionRecordResponseItems.

        返佣数量  # noqa: E501

        :param amount: The amount of this GetCommissionRecordResponseItems.  # noqa: E501
        :type: str
        """

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCommissionRecordResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCommissionRecordResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
