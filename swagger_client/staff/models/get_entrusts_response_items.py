# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetEntrustsResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'created_at': 'datetime',
        'exchange_id': 'str',
        'exchange_name': 'str',
        'trade_type': 'str',
        'entrust_type': 'str',
        'entrust_channel': 'str',
        'trading_pair': 'str',
        'price': 'str',
        'entrust_volume': 'str',
        'entrust_amount': 'str',
        'volume': 'str',
        'amount': 'str',
        'avarage_price': 'str',
        'status': 'str',
        'trigger_price': 'str',
        'auto_cancel_at': 'str',
        'account_id': 'str'
    }

    attribute_map = {
        'order_id': 'orderId',
        'created_at': 'createdAt',
        'exchange_id': 'exchangeId',
        'exchange_name': 'exchangeName',
        'trade_type': 'tradeType',
        'entrust_type': 'entrustType',
        'entrust_channel': 'entrustChannel',
        'trading_pair': 'tradingPair',
        'price': 'price',
        'entrust_volume': 'entrustVolume',
        'entrust_amount': 'entrustAmount',
        'volume': 'volume',
        'amount': 'amount',
        'avarage_price': 'avaragePrice',
        'status': 'status',
        'trigger_price': 'triggerPrice',
        'auto_cancel_at': 'autoCancelAt',
        'account_id': 'accountId'
    }

    def __init__(self, order_id=None, created_at=None, exchange_id=None, exchange_name=None, trade_type=None, entrust_type=None, entrust_channel=None, trading_pair=None, price=None, entrust_volume=None, entrust_amount=None, volume=None, amount=None, avarage_price=None, status=None, trigger_price=None, auto_cancel_at=None, account_id=None):  # noqa: E501
        """GetEntrustsResponseItems - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._created_at = None
        self._exchange_id = None
        self._exchange_name = None
        self._trade_type = None
        self._entrust_type = None
        self._entrust_channel = None
        self._trading_pair = None
        self._price = None
        self._entrust_volume = None
        self._entrust_amount = None
        self._volume = None
        self._amount = None
        self._avarage_price = None
        self._status = None
        self._trigger_price = None
        self._auto_cancel_at = None
        self._account_id = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if created_at is not None:
            self.created_at = created_at
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if exchange_name is not None:
            self.exchange_name = exchange_name
        if trade_type is not None:
            self.trade_type = trade_type
        if entrust_type is not None:
            self.entrust_type = entrust_type
        if entrust_channel is not None:
            self.entrust_channel = entrust_channel
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if price is not None:
            self.price = price
        if entrust_volume is not None:
            self.entrust_volume = entrust_volume
        if entrust_amount is not None:
            self.entrust_amount = entrust_amount
        if volume is not None:
            self.volume = volume
        if amount is not None:
            self.amount = amount
        if avarage_price is not None:
            self.avarage_price = avarage_price
        if status is not None:
            self.status = status
        if trigger_price is not None:
            self.trigger_price = trigger_price
        if auto_cancel_at is not None:
            self.auto_cancel_at = auto_cancel_at
        if account_id is not None:
            self.account_id = account_id

    @property
    def order_id(self):
        """Gets the order_id of this GetEntrustsResponseItems.  # noqa: E501

        委托单id  # noqa: E501

        :return: The order_id of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetEntrustsResponseItems.

        委托单id  # noqa: E501

        :param order_id: The order_id of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def created_at(self):
        """Gets the created_at of this GetEntrustsResponseItems.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetEntrustsResponseItems.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetEntrustsResponseItems.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def exchange_id(self):
        """Gets the exchange_id of this GetEntrustsResponseItems.  # noqa: E501

        交易所id  # noqa: E501

        :return: The exchange_id of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this GetEntrustsResponseItems.

        交易所id  # noqa: E501

        :param exchange_id: The exchange_id of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def exchange_name(self):
        """Gets the exchange_name of this GetEntrustsResponseItems.  # noqa: E501

        交易所名称  # noqa: E501

        :return: The exchange_name of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange_name

    @exchange_name.setter
    def exchange_name(self, exchange_name):
        """Sets the exchange_name of this GetEntrustsResponseItems.

        交易所名称  # noqa: E501

        :param exchange_name: The exchange_name of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange_name = exchange_name

    @property
    def trade_type(self):
        """Gets the trade_type of this GetEntrustsResponseItems.  # noqa: E501

        交易类型 buy:买入 sell:买出  # noqa: E501

        :return: The trade_type of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trade_type

    @trade_type.setter
    def trade_type(self, trade_type):
        """Sets the trade_type of this GetEntrustsResponseItems.

        交易类型 buy:买入 sell:买出  # noqa: E501

        :param trade_type: The trade_type of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if trade_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trade_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trade_type, allowed_values)
            )

        self._trade_type = trade_type

    @property
    def entrust_type(self):
        """Gets the entrust_type of this GetEntrustsResponseItems.  # noqa: E501

        委托类型 limit限价 market市价 profit_loss止盈止损  time_limit限时委托  # noqa: E501

        :return: The entrust_type of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._entrust_type

    @entrust_type.setter
    def entrust_type(self, entrust_type):
        """Sets the entrust_type of this GetEntrustsResponseItems.

        委托类型 limit限价 market市价 profit_loss止盈止损  time_limit限时委托  # noqa: E501

        :param entrust_type: The entrust_type of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["limit", "market", "profit_loss", "time_limit"]  # noqa: E501
        if entrust_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entrust_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entrust_type, allowed_values)
            )

        self._entrust_type = entrust_type

    @property
    def entrust_channel(self):
        """Gets the entrust_channel of this GetEntrustsResponseItems.  # noqa: E501

        委托方式  Manual , API  # noqa: E501

        :return: The entrust_channel of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._entrust_channel

    @entrust_channel.setter
    def entrust_channel(self, entrust_channel):
        """Sets the entrust_channel of this GetEntrustsResponseItems.

        委托方式  Manual , API  # noqa: E501

        :param entrust_channel: The entrust_channel of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["Manual", "API"]  # noqa: E501
        if entrust_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `entrust_channel` ({0}), must be one of {1}"  # noqa: E501
                .format(entrust_channel, allowed_values)
            )

        self._entrust_channel = entrust_channel

    @property
    def trading_pair(self):
        """Gets the trading_pair of this GetEntrustsResponseItems.  # noqa: E501

        交易对  # noqa: E501

        :return: The trading_pair of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this GetEntrustsResponseItems.

        交易对  # noqa: E501

        :param trading_pair: The trading_pair of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def price(self):
        """Gets the price of this GetEntrustsResponseItems.  # noqa: E501

        委托价格  # noqa: E501

        :return: The price of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetEntrustsResponseItems.

        委托价格  # noqa: E501

        :param price: The price of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def entrust_volume(self):
        """Gets the entrust_volume of this GetEntrustsResponseItems.  # noqa: E501

        委托数量  # noqa: E501

        :return: The entrust_volume of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._entrust_volume

    @entrust_volume.setter
    def entrust_volume(self, entrust_volume):
        """Sets the entrust_volume of this GetEntrustsResponseItems.

        委托数量  # noqa: E501

        :param entrust_volume: The entrust_volume of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._entrust_volume = entrust_volume

    @property
    def entrust_amount(self):
        """Gets the entrust_amount of this GetEntrustsResponseItems.  # noqa: E501

        委托总额  # noqa: E501

        :return: The entrust_amount of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._entrust_amount

    @entrust_amount.setter
    def entrust_amount(self, entrust_amount):
        """Sets the entrust_amount of this GetEntrustsResponseItems.

        委托总额  # noqa: E501

        :param entrust_amount: The entrust_amount of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._entrust_amount = entrust_amount

    @property
    def volume(self):
        """Gets the volume of this GetEntrustsResponseItems.  # noqa: E501

        成交数量  # noqa: E501

        :return: The volume of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetEntrustsResponseItems.

        成交数量  # noqa: E501

        :param volume: The volume of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def amount(self):
        """Gets the amount of this GetEntrustsResponseItems.  # noqa: E501

        成交金额  # noqa: E501

        :return: The amount of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetEntrustsResponseItems.

        成交金额  # noqa: E501

        :param amount: The amount of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def avarage_price(self):
        """Gets the avarage_price of this GetEntrustsResponseItems.  # noqa: E501

        成交均价  # noqa: E501

        :return: The avarage_price of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._avarage_price

    @avarage_price.setter
    def avarage_price(self, avarage_price):
        """Sets the avarage_price of this GetEntrustsResponseItems.

        成交均价  # noqa: E501

        :param avarage_price: The avarage_price of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._avarage_price = avarage_price

    @property
    def status(self):
        """Gets the status of this GetEntrustsResponseItems.  # noqa: E501

        状态  # noqa: E501

        :return: The status of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetEntrustsResponseItems.

        状态  # noqa: E501

        :param status: The status of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["entrusting", "cancelled", "done", "triggering"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trigger_price(self):
        """Gets the trigger_price of this GetEntrustsResponseItems.  # noqa: E501

        触发价  # noqa: E501

        :return: The trigger_price of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this GetEntrustsResponseItems.

        触发价  # noqa: E501

        :param trigger_price: The trigger_price of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._trigger_price = trigger_price

    @property
    def auto_cancel_at(self):
        """Gets the auto_cancel_at of this GetEntrustsResponseItems.  # noqa: E501

        自动撤单时间  # noqa: E501

        :return: The auto_cancel_at of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._auto_cancel_at

    @auto_cancel_at.setter
    def auto_cancel_at(self, auto_cancel_at):
        """Sets the auto_cancel_at of this GetEntrustsResponseItems.

        自动撤单时间  # noqa: E501

        :param auto_cancel_at: The auto_cancel_at of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._auto_cancel_at = auto_cancel_at

    @property
    def account_id(self):
        """Gets the account_id of this GetEntrustsResponseItems.  # noqa: E501

        用户ID  # noqa: E501

        :return: The account_id of this GetEntrustsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetEntrustsResponseItems.

        用户ID  # noqa: E501

        :param account_id: The account_id of this GetEntrustsResponseItems.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEntrustsResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEntrustsResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
