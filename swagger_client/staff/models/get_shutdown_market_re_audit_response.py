# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetShutdownMarketReAuditResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'submitted_at': 'datetime',
        'ticket_number': 'str',
        'uid': 'str',
        'exchange_id': 'str',
        'name': 'str',
        'phone_number': 'str',
        'email': 'str',
        'trading_pair': 'str',
        'close_reason': 'str',
        'audit_at': 'datetime',
        'audit_user': 'str',
        'audit_status': 'str',
        're_audit_at': 'datetime',
        're_audit_user': 'str',
        're_status': 'str',
        'failure_type': 'str'
    }

    attribute_map = {
        'submitted_at': 'submittedAt',
        'ticket_number': 'ticketNumber',
        'uid': 'uid',
        'exchange_id': 'exchangeId',
        'name': 'name',
        'phone_number': 'phoneNumber',
        'email': 'email',
        'trading_pair': 'tradingPair',
        'close_reason': 'closeReason',
        'audit_at': 'auditAt',
        'audit_user': 'auditUser',
        'audit_status': 'auditStatus',
        're_audit_at': 'reAuditAt',
        're_audit_user': 'reAuditUser',
        're_status': 'reStatus',
        'failure_type': 'failureType'
    }

    def __init__(self, submitted_at=None, ticket_number=None, uid=None, exchange_id=None, name=None, phone_number=None, email=None, trading_pair=None, close_reason=None, audit_at=None, audit_user=None, audit_status=None, re_audit_at=None, re_audit_user=None, re_status=None, failure_type=None):  # noqa: E501
        """GetShutdownMarketReAuditResponse - a model defined in Swagger"""  # noqa: E501

        self._submitted_at = None
        self._ticket_number = None
        self._uid = None
        self._exchange_id = None
        self._name = None
        self._phone_number = None
        self._email = None
        self._trading_pair = None
        self._close_reason = None
        self._audit_at = None
        self._audit_user = None
        self._audit_status = None
        self._re_audit_at = None
        self._re_audit_user = None
        self._re_status = None
        self._failure_type = None
        self.discriminator = None

        if submitted_at is not None:
            self.submitted_at = submitted_at
        if ticket_number is not None:
            self.ticket_number = ticket_number
        if uid is not None:
            self.uid = uid
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if name is not None:
            self.name = name
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if close_reason is not None:
            self.close_reason = close_reason
        if audit_at is not None:
            self.audit_at = audit_at
        if audit_user is not None:
            self.audit_user = audit_user
        if audit_status is not None:
            self.audit_status = audit_status
        if re_audit_at is not None:
            self.re_audit_at = re_audit_at
        if re_audit_user is not None:
            self.re_audit_user = re_audit_user
        if re_status is not None:
            self.re_status = re_status
        if failure_type is not None:
            self.failure_type = failure_type

    @property
    def submitted_at(self):
        """Gets the submitted_at of this GetShutdownMarketReAuditResponse.  # noqa: E501

        提交申请时间  # noqa: E501

        :return: The submitted_at of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this GetShutdownMarketReAuditResponse.

        提交申请时间  # noqa: E501

        :param submitted_at: The submitted_at of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: datetime
        """

        self._submitted_at = submitted_at

    @property
    def ticket_number(self):
        """Gets the ticket_number of this GetShutdownMarketReAuditResponse.  # noqa: E501

        工单编号  # noqa: E501

        :return: The ticket_number of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._ticket_number

    @ticket_number.setter
    def ticket_number(self, ticket_number):
        """Sets the ticket_number of this GetShutdownMarketReAuditResponse.

        工单编号  # noqa: E501

        :param ticket_number: The ticket_number of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """
        if ticket_number is not None and len(ticket_number) > 64:
            raise ValueError("Invalid value for `ticket_number`, length must be less than or equal to `64`")  # noqa: E501

        self._ticket_number = ticket_number

    @property
    def uid(self):
        """Gets the uid of this GetShutdownMarketReAuditResponse.  # noqa: E501

        用户Id  # noqa: E501

        :return: The uid of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetShutdownMarketReAuditResponse.

        用户Id  # noqa: E501

        :param uid: The uid of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def exchange_id(self):
        """Gets the exchange_id of this GetShutdownMarketReAuditResponse.  # noqa: E501

        交易所ID  # noqa: E501

        :return: The exchange_id of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this GetShutdownMarketReAuditResponse.

        交易所ID  # noqa: E501

        :param exchange_id: The exchange_id of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def name(self):
        """Gets the name of this GetShutdownMarketReAuditResponse.  # noqa: E501

        交易所名称  # noqa: E501

        :return: The name of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetShutdownMarketReAuditResponse.

        交易所名称  # noqa: E501

        :param name: The name of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this GetShutdownMarketReAuditResponse.  # noqa: E501

        手机号码  # noqa: E501

        :return: The phone_number of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetShutdownMarketReAuditResponse.

        手机号码  # noqa: E501

        :param phone_number: The phone_number of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this GetShutdownMarketReAuditResponse.  # noqa: E501

        邮箱  # noqa: E501

        :return: The email of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetShutdownMarketReAuditResponse.

        邮箱  # noqa: E501

        :param email: The email of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def trading_pair(self):
        """Gets the trading_pair of this GetShutdownMarketReAuditResponse.  # noqa: E501

        申请关闭交易市场  # noqa: E501

        :return: The trading_pair of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this GetShutdownMarketReAuditResponse.

        申请关闭交易市场  # noqa: E501

        :param trading_pair: The trading_pair of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def close_reason(self):
        """Gets the close_reason of this GetShutdownMarketReAuditResponse.  # noqa: E501

        关闭原因  # noqa: E501

        :return: The close_reason of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._close_reason

    @close_reason.setter
    def close_reason(self, close_reason):
        """Sets the close_reason of this GetShutdownMarketReAuditResponse.

        关闭原因  # noqa: E501

        :param close_reason: The close_reason of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._close_reason = close_reason

    @property
    def audit_at(self):
        """Gets the audit_at of this GetShutdownMarketReAuditResponse.  # noqa: E501

        初审时间  # noqa: E501

        :return: The audit_at of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._audit_at

    @audit_at.setter
    def audit_at(self, audit_at):
        """Sets the audit_at of this GetShutdownMarketReAuditResponse.

        初审时间  # noqa: E501

        :param audit_at: The audit_at of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: datetime
        """

        self._audit_at = audit_at

    @property
    def audit_user(self):
        """Gets the audit_user of this GetShutdownMarketReAuditResponse.  # noqa: E501

        初审人员  # noqa: E501

        :return: The audit_user of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._audit_user

    @audit_user.setter
    def audit_user(self, audit_user):
        """Sets the audit_user of this GetShutdownMarketReAuditResponse.

        初审人员  # noqa: E501

        :param audit_user: The audit_user of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._audit_user = audit_user

    @property
    def audit_status(self):
        """Gets the audit_status of this GetShutdownMarketReAuditResponse.  # noqa: E501

        初审状态[\"approved（通过）、disapproved（未通过）\"]  # noqa: E501

        :return: The audit_status of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._audit_status

    @audit_status.setter
    def audit_status(self, audit_status):
        """Sets the audit_status of this GetShutdownMarketReAuditResponse.

        初审状态[\"approved（通过）、disapproved（未通过）\"]  # noqa: E501

        :param audit_status: The audit_status of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["approved", "disapproved"]  # noqa: E501
        if audit_status not in allowed_values:
            raise ValueError(
                "Invalid value for `audit_status` ({0}), must be one of {1}"  # noqa: E501
                .format(audit_status, allowed_values)
            )

        self._audit_status = audit_status

    @property
    def re_audit_at(self):
        """Gets the re_audit_at of this GetShutdownMarketReAuditResponse.  # noqa: E501

        复审时间  # noqa: E501

        :return: The re_audit_at of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._re_audit_at

    @re_audit_at.setter
    def re_audit_at(self, re_audit_at):
        """Sets the re_audit_at of this GetShutdownMarketReAuditResponse.

        复审时间  # noqa: E501

        :param re_audit_at: The re_audit_at of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: datetime
        """

        self._re_audit_at = re_audit_at

    @property
    def re_audit_user(self):
        """Gets the re_audit_user of this GetShutdownMarketReAuditResponse.  # noqa: E501

        复审人员  # noqa: E501

        :return: The re_audit_user of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._re_audit_user

    @re_audit_user.setter
    def re_audit_user(self, re_audit_user):
        """Sets the re_audit_user of this GetShutdownMarketReAuditResponse.

        复审人员  # noqa: E501

        :param re_audit_user: The re_audit_user of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._re_audit_user = re_audit_user

    @property
    def re_status(self):
        """Gets the re_status of this GetShutdownMarketReAuditResponse.  # noqa: E501

        状态[\"approved（通过）、disapproved（未通过）\"]  # noqa: E501

        :return: The re_status of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._re_status

    @re_status.setter
    def re_status(self, re_status):
        """Sets the re_status of this GetShutdownMarketReAuditResponse.

        状态[\"approved（通过）、disapproved（未通过）\"]  # noqa: E501

        :param re_status: The re_status of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["approved", "disapproved"]  # noqa: E501
        if re_status not in allowed_values:
            raise ValueError(
                "Invalid value for `re_status` ({0}), must be one of {1}"  # noqa: E501
                .format(re_status, allowed_values)
            )

        self._re_status = re_status

    @property
    def failure_type(self):
        """Gets the failure_type of this GetShutdownMarketReAuditResponse.  # noqa: E501

        审核失败类型  # noqa: E501

        :return: The failure_type of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._failure_type

    @failure_type.setter
    def failure_type(self, failure_type):
        """Sets the failure_type of this GetShutdownMarketReAuditResponse.

        审核失败类型  # noqa: E501

        :param failure_type: The failure_type of this GetShutdownMarketReAuditResponse.  # noqa: E501
        :type: str
        """

        self._failure_type = failure_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetShutdownMarketReAuditResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetShutdownMarketReAuditResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
