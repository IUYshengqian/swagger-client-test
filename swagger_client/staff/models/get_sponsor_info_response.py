# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetSponsorInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'real_name': 'str',
        'logo': 'str',
        'logo_url': 'str',
        'website': 'str',
        'summary': 'str',
        'phone': 'str',
        'email': 'str'
    }

    attribute_map = {
        'id': 'id',
        'real_name': 'realName',
        'logo': 'logo',
        'logo_url': 'logoUrl',
        'website': 'website',
        'summary': 'summary',
        'phone': 'phone',
        'email': 'email'
    }

    def __init__(self, id=None, real_name=None, logo=None, logo_url=None, website=None, summary=None, phone=None, email=None):  # noqa: E501
        """GetSponsorInfoResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._real_name = None
        self._logo = None
        self._logo_url = None
        self._website = None
        self._summary = None
        self._phone = None
        self._email = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if real_name is not None:
            self.real_name = real_name
        if logo is not None:
            self.logo = logo
        if logo_url is not None:
            self.logo_url = logo_url
        if website is not None:
            self.website = website
        if summary is not None:
            self.summary = summary
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email

    @property
    def id(self):
        """Gets the id of this GetSponsorInfoResponse.  # noqa: E501

        保荐方id  # noqa: E501

        :return: The id of this GetSponsorInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSponsorInfoResponse.

        保荐方id  # noqa: E501

        :param id: The id of this GetSponsorInfoResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def real_name(self):
        """Gets the real_name of this GetSponsorInfoResponse.  # noqa: E501

        保荐方名称  # noqa: E501

        :return: The real_name of this GetSponsorInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this GetSponsorInfoResponse.

        保荐方名称  # noqa: E501

        :param real_name: The real_name of this GetSponsorInfoResponse.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def logo(self):
        """Gets the logo of this GetSponsorInfoResponse.  # noqa: E501

        logo 上传图片返回的id  # noqa: E501

        :return: The logo of this GetSponsorInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this GetSponsorInfoResponse.

        logo 上传图片返回的id  # noqa: E501

        :param logo: The logo of this GetSponsorInfoResponse.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def logo_url(self):
        """Gets the logo_url of this GetSponsorInfoResponse.  # noqa: E501

        logo url 上传图片返回的url  # noqa: E501

        :return: The logo_url of this GetSponsorInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this GetSponsorInfoResponse.

        logo url 上传图片返回的url  # noqa: E501

        :param logo_url: The logo_url of this GetSponsorInfoResponse.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def website(self):
        """Gets the website of this GetSponsorInfoResponse.  # noqa: E501

        官网  # noqa: E501

        :return: The website of this GetSponsorInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this GetSponsorInfoResponse.

        官网  # noqa: E501

        :param website: The website of this GetSponsorInfoResponse.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def summary(self):
        """Gets the summary of this GetSponsorInfoResponse.  # noqa: E501

        简介  # noqa: E501

        :return: The summary of this GetSponsorInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this GetSponsorInfoResponse.

        简介  # noqa: E501

        :param summary: The summary of this GetSponsorInfoResponse.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def phone(self):
        """Gets the phone of this GetSponsorInfoResponse.  # noqa: E501

        手机  # noqa: E501

        :return: The phone of this GetSponsorInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this GetSponsorInfoResponse.

        手机  # noqa: E501

        :param phone: The phone of this GetSponsorInfoResponse.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this GetSponsorInfoResponse.  # noqa: E501

        邮箱  # noqa: E501

        :return: The email of this GetSponsorInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetSponsorInfoResponse.

        邮箱  # noqa: E501

        :param email: The email of this GetSponsorInfoResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSponsorInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSponsorInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
