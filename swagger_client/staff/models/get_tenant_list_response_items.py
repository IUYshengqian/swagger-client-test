# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetTenantListResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'str',
        'exchange_name': 'str',
        'auth_type': 'str',
        'name': 'str',
        'trading_pair_quantity': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'exchange_name': 'exchangeName',
        'auth_type': 'authType',
        'name': 'name',
        'trading_pair_quantity': 'tradingPairQuantity'
    }

    def __init__(self, id=None, created_at=None, exchange_name=None, auth_type=None, name=None, trading_pair_quantity=None):  # noqa: E501
        """GetTenantListResponseItems - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._exchange_name = None
        self._auth_type = None
        self._name = None
        self._trading_pair_quantity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if exchange_name is not None:
            self.exchange_name = exchange_name
        if auth_type is not None:
            self.auth_type = auth_type
        if name is not None:
            self.name = name
        if trading_pair_quantity is not None:
            self.trading_pair_quantity = trading_pair_quantity

    @property
    def id(self):
        """Gets the id of this GetTenantListResponseItems.  # noqa: E501

        交易所ID  # noqa: E501

        :return: The id of this GetTenantListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetTenantListResponseItems.

        交易所ID  # noqa: E501

        :param id: The id of this GetTenantListResponseItems.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this GetTenantListResponseItems.  # noqa: E501

        交易所成立时间  # noqa: E501

        :return: The created_at of this GetTenantListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetTenantListResponseItems.

        交易所成立时间  # noqa: E501

        :param created_at: The created_at of this GetTenantListResponseItems.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def exchange_name(self):
        """Gets the exchange_name of this GetTenantListResponseItems.  # noqa: E501

        交易所名称  # noqa: E501

        :return: The exchange_name of this GetTenantListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange_name

    @exchange_name.setter
    def exchange_name(self, exchange_name):
        """Sets the exchange_name of this GetTenantListResponseItems.

        交易所名称  # noqa: E501

        :param exchange_name: The exchange_name of this GetTenantListResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange_name = exchange_name

    @property
    def auth_type(self):
        """Gets the auth_type of this GetTenantListResponseItems.  # noqa: E501

        认证类型  # noqa: E501

        :return: The auth_type of this GetTenantListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this GetTenantListResponseItems.

        认证类型  # noqa: E501

        :param auth_type: The auth_type of this GetTenantListResponseItems.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def name(self):
        """Gets the name of this GetTenantListResponseItems.  # noqa: E501

        姓名/企业名  # noqa: E501

        :return: The name of this GetTenantListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetTenantListResponseItems.

        姓名/企业名  # noqa: E501

        :param name: The name of this GetTenantListResponseItems.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def trading_pair_quantity(self):
        """Gets the trading_pair_quantity of this GetTenantListResponseItems.  # noqa: E501

        币对数量  # noqa: E501

        :return: The trading_pair_quantity of this GetTenantListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair_quantity

    @trading_pair_quantity.setter
    def trading_pair_quantity(self, trading_pair_quantity):
        """Sets the trading_pair_quantity of this GetTenantListResponseItems.

        币对数量  # noqa: E501

        :param trading_pair_quantity: The trading_pair_quantity of this GetTenantListResponseItems.  # noqa: E501
        :type: str
        """

        self._trading_pair_quantity = trading_pair_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTenantListResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTenantListResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
