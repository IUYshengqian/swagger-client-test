# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostDocumentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'model_id': 'str',
        'sun_model_id': 'str',
        'author': 'str',
        'content': 'str',
        'order': 'int',
        'is_top': 'bool',
        'status': 'bool',
        'language': 'str',
        'type': 'str'
    }

    attribute_map = {
        'title': 'title',
        'model_id': 'modelId',
        'sun_model_id': 'sunModelId',
        'author': 'author',
        'content': 'content',
        'order': 'order',
        'is_top': 'isTop',
        'status': 'status',
        'language': 'language',
        'type': 'type'
    }

    def __init__(self, title=None, model_id=None, sun_model_id=None, author=None, content=None, order=None, is_top=None, status=None, language=None, type=None):  # noqa: E501
        """PostDocumentRequest - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._model_id = None
        self._sun_model_id = None
        self._author = None
        self._content = None
        self._order = None
        self._is_top = None
        self._status = None
        self._language = None
        self._type = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if model_id is not None:
            self.model_id = model_id
        if sun_model_id is not None:
            self.sun_model_id = sun_model_id
        if author is not None:
            self.author = author
        if content is not None:
            self.content = content
        if order is not None:
            self.order = order
        if is_top is not None:
            self.is_top = is_top
        if status is not None:
            self.status = status
        if language is not None:
            self.language = language
        if type is not None:
            self.type = type

    @property
    def title(self):
        """Gets the title of this PostDocumentRequest.  # noqa: E501

        标题  # noqa: E501

        :return: The title of this PostDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PostDocumentRequest.

        标题  # noqa: E501

        :param title: The title of this PostDocumentRequest.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 16:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `16`")  # noqa: E501
        if title is not None and len(title) < 2:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `2`")  # noqa: E501

        self._title = title

    @property
    def model_id(self):
        """Gets the model_id of this PostDocumentRequest.  # noqa: E501

        模型Id  # noqa: E501

        :return: The model_id of this PostDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this PostDocumentRequest.

        模型Id  # noqa: E501

        :param model_id: The model_id of this PostDocumentRequest.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def sun_model_id(self):
        """Gets the sun_model_id of this PostDocumentRequest.  # noqa: E501

        子模型id（金猫规则时必填）  # noqa: E501

        :return: The sun_model_id of this PostDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._sun_model_id

    @sun_model_id.setter
    def sun_model_id(self, sun_model_id):
        """Sets the sun_model_id of this PostDocumentRequest.

        子模型id（金猫规则时必填）  # noqa: E501

        :param sun_model_id: The sun_model_id of this PostDocumentRequest.  # noqa: E501
        :type: str
        """

        self._sun_model_id = sun_model_id

    @property
    def author(self):
        """Gets the author of this PostDocumentRequest.  # noqa: E501

        作者  # noqa: E501

        :return: The author of this PostDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PostDocumentRequest.

        作者  # noqa: E501

        :param author: The author of this PostDocumentRequest.  # noqa: E501
        :type: str
        """
        if author is not None and len(author) > 8:
            raise ValueError("Invalid value for `author`, length must be less than or equal to `8`")  # noqa: E501
        if author is not None and len(author) < 0:
            raise ValueError("Invalid value for `author`, length must be greater than or equal to `0`")  # noqa: E501

        self._author = author

    @property
    def content(self):
        """Gets the content of this PostDocumentRequest.  # noqa: E501

        内容  # noqa: E501

        :return: The content of this PostDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PostDocumentRequest.

        内容  # noqa: E501

        :param content: The content of this PostDocumentRequest.  # noqa: E501
        :type: str
        """
        if content is not None and len(content) > 2048:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `2048`")  # noqa: E501
        if content is not None and len(content) < 0:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `0`")  # noqa: E501

        self._content = content

    @property
    def order(self):
        """Gets the order of this PostDocumentRequest.  # noqa: E501

        排序  # noqa: E501

        :return: The order of this PostDocumentRequest.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PostDocumentRequest.

        排序  # noqa: E501

        :param order: The order of this PostDocumentRequest.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def is_top(self):
        """Gets the is_top of this PostDocumentRequest.  # noqa: E501

        是否置顶  # noqa: E501

        :return: The is_top of this PostDocumentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_top

    @is_top.setter
    def is_top(self, is_top):
        """Sets the is_top of this PostDocumentRequest.

        是否置顶  # noqa: E501

        :param is_top: The is_top of this PostDocumentRequest.  # noqa: E501
        :type: bool
        """

        self._is_top = is_top

    @property
    def status(self):
        """Gets the status of this PostDocumentRequest.  # noqa: E501

        状态  # noqa: E501

        :return: The status of this PostDocumentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PostDocumentRequest.

        状态  # noqa: E501

        :param status: The status of this PostDocumentRequest.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def language(self):
        """Gets the language of this PostDocumentRequest.  # noqa: E501

        语种：中文zh_cn 英文en_us 马来文ms_my 韩文ko_kr 柬埔寨文km_kh  # noqa: E501

        :return: The language of this PostDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PostDocumentRequest.

        语种：中文zh_cn 英文en_us 马来文ms_my 韩文ko_kr 柬埔寨文km_kh  # noqa: E501

        :param language: The language of this PostDocumentRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["zh_cn", "en_us", "ms_my", "ko_kr", "km_kh"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def type(self):
        """Gets the type of this PostDocumentRequest.  # noqa: E501

        类型 article文章，kinmall金猫  # noqa: E501

        :return: The type of this PostDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostDocumentRequest.

        类型 article文章，kinmall金猫  # noqa: E501

        :param type: The type of this PostDocumentRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["article", "kinmall"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostDocumentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostDocumentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
