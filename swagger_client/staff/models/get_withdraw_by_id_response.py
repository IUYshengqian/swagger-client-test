# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetWithdrawByIdResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'submitted_at': 'datetime',
        'completed_at': 'datetime',
        'cancel_at': 'datetime',
        'account_id': 'str',
        'account_name': 'str',
        'email': 'str',
        'coin_id': 'str',
        'short_name': 'str',
        'amount': 'str',
        'fee': 'str',
        'first_auditor': 'str',
        'first_audit_time': 'str',
        'first_audit_result': 'bool',
        'second_auditor': 'str',
        'second_audit_time': 'str',
        'second_audit_result': 'bool',
        'reason': 'str',
        'address': 'str',
        'txid': 'str',
        'patcher': 'str',
        'patch_type': 'str',
        'patch_at': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'submitted_at': 'submittedAt',
        'completed_at': 'completedAt',
        'cancel_at': 'cancelAt',
        'account_id': 'accountId',
        'account_name': 'accountName',
        'email': 'email',
        'coin_id': 'coinId',
        'short_name': 'shortName',
        'amount': 'amount',
        'fee': 'fee',
        'first_auditor': 'firstAuditor',
        'first_audit_time': 'firstAuditTime',
        'first_audit_result': 'firstAuditResult',
        'second_auditor': 'secondAuditor',
        'second_audit_time': 'secondAuditTime',
        'second_audit_result': 'secondAuditResult',
        'reason': 'reason',
        'address': 'address',
        'txid': 'txid',
        'patcher': 'patcher',
        'patch_type': 'patchType',
        'patch_at': 'patchAt',
        'status': 'status'
    }

    def __init__(self, id=None, submitted_at=None, completed_at=None, cancel_at=None, account_id=None, account_name=None, email=None, coin_id=None, short_name=None, amount=None, fee=None, first_auditor=None, first_audit_time=None, first_audit_result=None, second_auditor=None, second_audit_time=None, second_audit_result=None, reason=None, address=None, txid=None, patcher=None, patch_type=None, patch_at=None, status=None):  # noqa: E501
        """GetWithdrawByIdResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._submitted_at = None
        self._completed_at = None
        self._cancel_at = None
        self._account_id = None
        self._account_name = None
        self._email = None
        self._coin_id = None
        self._short_name = None
        self._amount = None
        self._fee = None
        self._first_auditor = None
        self._first_audit_time = None
        self._first_audit_result = None
        self._second_auditor = None
        self._second_audit_time = None
        self._second_audit_result = None
        self._reason = None
        self._address = None
        self._txid = None
        self._patcher = None
        self._patch_type = None
        self._patch_at = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if submitted_at is not None:
            self.submitted_at = submitted_at
        if completed_at is not None:
            self.completed_at = completed_at
        if cancel_at is not None:
            self.cancel_at = cancel_at
        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if email is not None:
            self.email = email
        if coin_id is not None:
            self.coin_id = coin_id
        if short_name is not None:
            self.short_name = short_name
        if amount is not None:
            self.amount = amount
        if fee is not None:
            self.fee = fee
        if first_auditor is not None:
            self.first_auditor = first_auditor
        if first_audit_time is not None:
            self.first_audit_time = first_audit_time
        if first_audit_result is not None:
            self.first_audit_result = first_audit_result
        if second_auditor is not None:
            self.second_auditor = second_auditor
        if second_audit_time is not None:
            self.second_audit_time = second_audit_time
        if second_audit_result is not None:
            self.second_audit_result = second_audit_result
        if reason is not None:
            self.reason = reason
        if address is not None:
            self.address = address
        if txid is not None:
            self.txid = txid
        if patcher is not None:
            self.patcher = patcher
        if patch_type is not None:
            self.patch_type = patch_type
        if patch_at is not None:
            self.patch_at = patch_at
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this GetWithdrawByIdResponse.  # noqa: E501

        订单id  # noqa: E501

        :return: The id of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetWithdrawByIdResponse.

        订单id  # noqa: E501

        :param id: The id of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def submitted_at(self):
        """Gets the submitted_at of this GetWithdrawByIdResponse.  # noqa: E501

        提交时间  # noqa: E501

        :return: The submitted_at of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this GetWithdrawByIdResponse.

        提交时间  # noqa: E501

        :param submitted_at: The submitted_at of this GetWithdrawByIdResponse.  # noqa: E501
        :type: datetime
        """

        self._submitted_at = submitted_at

    @property
    def completed_at(self):
        """Gets the completed_at of this GetWithdrawByIdResponse.  # noqa: E501

        提交时间  # noqa: E501

        :return: The completed_at of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this GetWithdrawByIdResponse.

        提交时间  # noqa: E501

        :param completed_at: The completed_at of this GetWithdrawByIdResponse.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def cancel_at(self):
        """Gets the cancel_at of this GetWithdrawByIdResponse.  # noqa: E501

        撤销时间  # noqa: E501

        :return: The cancel_at of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_at

    @cancel_at.setter
    def cancel_at(self, cancel_at):
        """Sets the cancel_at of this GetWithdrawByIdResponse.

        撤销时间  # noqa: E501

        :param cancel_at: The cancel_at of this GetWithdrawByIdResponse.  # noqa: E501
        :type: datetime
        """

        self._cancel_at = cancel_at

    @property
    def account_id(self):
        """Gets the account_id of this GetWithdrawByIdResponse.  # noqa: E501

        账户Id  # noqa: E501

        :return: The account_id of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetWithdrawByIdResponse.

        账户Id  # noqa: E501

        :param account_id: The account_id of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this GetWithdrawByIdResponse.  # noqa: E501

        账户姓名  # noqa: E501

        :return: The account_name of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this GetWithdrawByIdResponse.

        账户姓名  # noqa: E501

        :param account_name: The account_name of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def email(self):
        """Gets the email of this GetWithdrawByIdResponse.  # noqa: E501

        账户邮箱  # noqa: E501

        :return: The email of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetWithdrawByIdResponse.

        账户邮箱  # noqa: E501

        :param email: The email of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def coin_id(self):
        """Gets the coin_id of this GetWithdrawByIdResponse.  # noqa: E501

        币id  # noqa: E501

        :return: The coin_id of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._coin_id

    @coin_id.setter
    def coin_id(self, coin_id):
        """Sets the coin_id of this GetWithdrawByIdResponse.

        币id  # noqa: E501

        :param coin_id: The coin_id of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._coin_id = coin_id

    @property
    def short_name(self):
        """Gets the short_name of this GetWithdrawByIdResponse.  # noqa: E501

        币简称  # noqa: E501

        :return: The short_name of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this GetWithdrawByIdResponse.

        币简称  # noqa: E501

        :param short_name: The short_name of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def amount(self):
        """Gets the amount of this GetWithdrawByIdResponse.  # noqa: E501

        提币数量  # noqa: E501

        :return: The amount of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetWithdrawByIdResponse.

        提币数量  # noqa: E501

        :param amount: The amount of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def fee(self):
        """Gets the fee of this GetWithdrawByIdResponse.  # noqa: E501

        手续费  # noqa: E501

        :return: The fee of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this GetWithdrawByIdResponse.

        手续费  # noqa: E501

        :param fee: The fee of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._fee = fee

    @property
    def first_auditor(self):
        """Gets the first_auditor of this GetWithdrawByIdResponse.  # noqa: E501

        初审核人  # noqa: E501

        :return: The first_auditor of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_auditor

    @first_auditor.setter
    def first_auditor(self, first_auditor):
        """Sets the first_auditor of this GetWithdrawByIdResponse.

        初审核人  # noqa: E501

        :param first_auditor: The first_auditor of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._first_auditor = first_auditor

    @property
    def first_audit_time(self):
        """Gets the first_audit_time of this GetWithdrawByIdResponse.  # noqa: E501

        初审时间  # noqa: E501

        :return: The first_audit_time of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_audit_time

    @first_audit_time.setter
    def first_audit_time(self, first_audit_time):
        """Sets the first_audit_time of this GetWithdrawByIdResponse.

        初审时间  # noqa: E501

        :param first_audit_time: The first_audit_time of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._first_audit_time = first_audit_time

    @property
    def first_audit_result(self):
        """Gets the first_audit_result of this GetWithdrawByIdResponse.  # noqa: E501

        初审结果  # noqa: E501

        :return: The first_audit_result of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._first_audit_result

    @first_audit_result.setter
    def first_audit_result(self, first_audit_result):
        """Sets the first_audit_result of this GetWithdrawByIdResponse.

        初审结果  # noqa: E501

        :param first_audit_result: The first_audit_result of this GetWithdrawByIdResponse.  # noqa: E501
        :type: bool
        """

        self._first_audit_result = first_audit_result

    @property
    def second_auditor(self):
        """Gets the second_auditor of this GetWithdrawByIdResponse.  # noqa: E501

        复审核人  # noqa: E501

        :return: The second_auditor of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._second_auditor

    @second_auditor.setter
    def second_auditor(self, second_auditor):
        """Sets the second_auditor of this GetWithdrawByIdResponse.

        复审核人  # noqa: E501

        :param second_auditor: The second_auditor of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._second_auditor = second_auditor

    @property
    def second_audit_time(self):
        """Gets the second_audit_time of this GetWithdrawByIdResponse.  # noqa: E501

        复审时间  # noqa: E501

        :return: The second_audit_time of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._second_audit_time

    @second_audit_time.setter
    def second_audit_time(self, second_audit_time):
        """Sets the second_audit_time of this GetWithdrawByIdResponse.

        复审时间  # noqa: E501

        :param second_audit_time: The second_audit_time of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._second_audit_time = second_audit_time

    @property
    def second_audit_result(self):
        """Gets the second_audit_result of this GetWithdrawByIdResponse.  # noqa: E501

        复审结果  # noqa: E501

        :return: The second_audit_result of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: bool
        """
        return self._second_audit_result

    @second_audit_result.setter
    def second_audit_result(self, second_audit_result):
        """Sets the second_audit_result of this GetWithdrawByIdResponse.

        复审结果  # noqa: E501

        :param second_audit_result: The second_audit_result of this GetWithdrawByIdResponse.  # noqa: E501
        :type: bool
        """

        self._second_audit_result = second_audit_result

    @property
    def reason(self):
        """Gets the reason of this GetWithdrawByIdResponse.  # noqa: E501

        失败原因  # noqa: E501

        :return: The reason of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this GetWithdrawByIdResponse.

        失败原因  # noqa: E501

        :param reason: The reason of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def address(self):
        """Gets the address of this GetWithdrawByIdResponse.  # noqa: E501

        提币地址  # noqa: E501

        :return: The address of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GetWithdrawByIdResponse.

        提币地址  # noqa: E501

        :param address: The address of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def txid(self):
        """Gets the txid of this GetWithdrawByIdResponse.  # noqa: E501

        交易hash  # noqa: E501

        :return: The txid of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this GetWithdrawByIdResponse.

        交易hash  # noqa: E501

        :param txid: The txid of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._txid = txid

    @property
    def patcher(self):
        """Gets the patcher of this GetWithdrawByIdResponse.  # noqa: E501

        补单人  # noqa: E501

        :return: The patcher of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._patcher

    @patcher.setter
    def patcher(self, patcher):
        """Sets the patcher of this GetWithdrawByIdResponse.

        补单人  # noqa: E501

        :param patcher: The patcher of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._patcher = patcher

    @property
    def patch_type(self):
        """Gets the patch_type of this GetWithdrawByIdResponse.  # noqa: E501

        补单类型  # noqa: E501

        :return: The patch_type of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._patch_type

    @patch_type.setter
    def patch_type(self, patch_type):
        """Sets the patch_type of this GetWithdrawByIdResponse.

        补单类型  # noqa: E501

        :param patch_type: The patch_type of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """

        self._patch_type = patch_type

    @property
    def patch_at(self):
        """Gets the patch_at of this GetWithdrawByIdResponse.  # noqa: E501

        补单时间  # noqa: E501

        :return: The patch_at of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._patch_at

    @patch_at.setter
    def patch_at(self, patch_at):
        """Sets the patch_at of this GetWithdrawByIdResponse.

        补单时间  # noqa: E501

        :param patch_at: The patch_at of this GetWithdrawByIdResponse.  # noqa: E501
        :type: datetime
        """

        self._patch_at = patch_at

    @property
    def status(self):
        """Gets the status of this GetWithdrawByIdResponse.  # noqa: E501

        提币状态  # noqa: E501

        :return: The status of this GetWithdrawByIdResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetWithdrawByIdResponse.

        提币状态  # noqa: E501

        :param status: The status of this GetWithdrawByIdResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["WAIT_REVIEW", "REVIEWING", "SUCCEED", "FAILED", "CONFIRMING", "CANCEL", "FIRST_REFUSAL", "SECOND_REFUSAL", "FIRST_REVIEW", "PATCH"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWithdrawByIdResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWithdrawByIdResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
