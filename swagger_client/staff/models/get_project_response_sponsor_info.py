# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetProjectResponseSponsorInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sponsor_id': 'str',
        'sponsor_name': 'str',
        'sponsor_logo_url': 'str'
    }

    attribute_map = {
        'sponsor_id': 'sponsorId',
        'sponsor_name': 'sponsorName',
        'sponsor_logo_url': 'sponsorLogoUrl'
    }

    def __init__(self, sponsor_id=None, sponsor_name=None, sponsor_logo_url=None):  # noqa: E501
        """GetProjectResponseSponsorInfo - a model defined in Swagger"""  # noqa: E501

        self._sponsor_id = None
        self._sponsor_name = None
        self._sponsor_logo_url = None
        self.discriminator = None

        if sponsor_id is not None:
            self.sponsor_id = sponsor_id
        if sponsor_name is not None:
            self.sponsor_name = sponsor_name
        if sponsor_logo_url is not None:
            self.sponsor_logo_url = sponsor_logo_url

    @property
    def sponsor_id(self):
        """Gets the sponsor_id of this GetProjectResponseSponsorInfo.  # noqa: E501

        保荐方ID  # noqa: E501

        :return: The sponsor_id of this GetProjectResponseSponsorInfo.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_id

    @sponsor_id.setter
    def sponsor_id(self, sponsor_id):
        """Sets the sponsor_id of this GetProjectResponseSponsorInfo.

        保荐方ID  # noqa: E501

        :param sponsor_id: The sponsor_id of this GetProjectResponseSponsorInfo.  # noqa: E501
        :type: str
        """

        self._sponsor_id = sponsor_id

    @property
    def sponsor_name(self):
        """Gets the sponsor_name of this GetProjectResponseSponsorInfo.  # noqa: E501

        保荐方名称  # noqa: E501

        :return: The sponsor_name of this GetProjectResponseSponsorInfo.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_name

    @sponsor_name.setter
    def sponsor_name(self, sponsor_name):
        """Sets the sponsor_name of this GetProjectResponseSponsorInfo.

        保荐方名称  # noqa: E501

        :param sponsor_name: The sponsor_name of this GetProjectResponseSponsorInfo.  # noqa: E501
        :type: str
        """

        self._sponsor_name = sponsor_name

    @property
    def sponsor_logo_url(self):
        """Gets the sponsor_logo_url of this GetProjectResponseSponsorInfo.  # noqa: E501

        保荐方图标URL  # noqa: E501

        :return: The sponsor_logo_url of this GetProjectResponseSponsorInfo.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_logo_url

    @sponsor_logo_url.setter
    def sponsor_logo_url(self, sponsor_logo_url):
        """Sets the sponsor_logo_url of this GetProjectResponseSponsorInfo.

        保荐方图标URL  # noqa: E501

        :param sponsor_logo_url: The sponsor_logo_url of this GetProjectResponseSponsorInfo.  # noqa: E501
        :type: str
        """

        self._sponsor_logo_url = sponsor_logo_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProjectResponseSponsorInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProjectResponseSponsorInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
