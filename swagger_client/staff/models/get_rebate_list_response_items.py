# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetRebateListResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rebate_at': 'str',
        'exchange_id': 'str',
        'trade_history': 'str',
        'market': 'str',
        'price': 'str',
        'volume': 'str',
        'amount': 'str',
        'rate': 'str',
        'rebate': 'str'
    }

    attribute_map = {
        'rebate_at': 'rebateAt',
        'exchange_id': 'exchangeId',
        'trade_history': 'tradeHistory',
        'market': 'market',
        'price': 'price',
        'volume': 'volume',
        'amount': 'amount',
        'rate': 'rate',
        'rebate': 'rebate'
    }

    def __init__(self, rebate_at=None, exchange_id=None, trade_history=None, market=None, price=None, volume=None, amount=None, rate=None, rebate=None):  # noqa: E501
        """GetRebateListResponseItems - a model defined in Swagger"""  # noqa: E501

        self._rebate_at = None
        self._exchange_id = None
        self._trade_history = None
        self._market = None
        self._price = None
        self._volume = None
        self._amount = None
        self._rate = None
        self._rebate = None
        self.discriminator = None

        if rebate_at is not None:
            self.rebate_at = rebate_at
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if trade_history is not None:
            self.trade_history = trade_history
        if market is not None:
            self.market = market
        if price is not None:
            self.price = price
        if volume is not None:
            self.volume = volume
        if amount is not None:
            self.amount = amount
        if rate is not None:
            self.rate = rate
        if rebate is not None:
            self.rebate = rebate

    @property
    def rebate_at(self):
        """Gets the rebate_at of this GetRebateListResponseItems.  # noqa: E501

        返佣时间  # noqa: E501

        :return: The rebate_at of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._rebate_at

    @rebate_at.setter
    def rebate_at(self, rebate_at):
        """Sets the rebate_at of this GetRebateListResponseItems.

        返佣时间  # noqa: E501

        :param rebate_at: The rebate_at of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._rebate_at = rebate_at

    @property
    def exchange_id(self):
        """Gets the exchange_id of this GetRebateListResponseItems.  # noqa: E501

        交易所ID  # noqa: E501

        :return: The exchange_id of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this GetRebateListResponseItems.

        交易所ID  # noqa: E501

        :param exchange_id: The exchange_id of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def trade_history(self):
        """Gets the trade_history of this GetRebateListResponseItems.  # noqa: E501

        成交记录编号  # noqa: E501

        :return: The trade_history of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trade_history

    @trade_history.setter
    def trade_history(self, trade_history):
        """Sets the trade_history of this GetRebateListResponseItems.

        成交记录编号  # noqa: E501

        :param trade_history: The trade_history of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._trade_history = trade_history

    @property
    def market(self):
        """Gets the market of this GetRebateListResponseItems.  # noqa: E501

        市场  # noqa: E501

        :return: The market of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this GetRebateListResponseItems.

        市场  # noqa: E501

        :param market: The market of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def price(self):
        """Gets the price of this GetRebateListResponseItems.  # noqa: E501

        价格  # noqa: E501

        :return: The price of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetRebateListResponseItems.

        价格  # noqa: E501

        :param price: The price of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def volume(self):
        """Gets the volume of this GetRebateListResponseItems.  # noqa: E501

        数量  # noqa: E501

        :return: The volume of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetRebateListResponseItems.

        数量  # noqa: E501

        :param volume: The volume of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def amount(self):
        """Gets the amount of this GetRebateListResponseItems.  # noqa: E501

        成交金额  # noqa: E501

        :return: The amount of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetRebateListResponseItems.

        成交金额  # noqa: E501

        :param amount: The amount of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def rate(self):
        """Gets the rate of this GetRebateListResponseItems.  # noqa: E501

        交易服务率  # noqa: E501

        :return: The rate of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this GetRebateListResponseItems.

        交易服务率  # noqa: E501

        :param rate: The rate of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._rate = rate

    @property
    def rebate(self):
        """Gets the rebate of this GetRebateListResponseItems.  # noqa: E501

        返佣金额  # noqa: E501

        :return: The rebate of this GetRebateListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._rebate

    @rebate.setter
    def rebate(self, rebate):
        """Sets the rebate of this GetRebateListResponseItems.

        返佣金额  # noqa: E501

        :param rebate: The rebate of this GetRebateListResponseItems.  # noqa: E501
        :type: str
        """

        self._rebate = rebate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetRebateListResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRebateListResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
