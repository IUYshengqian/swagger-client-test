# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetOrderResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'completed_at': 'datetime',
        'order_id': 'str',
        'account_id': 'str',
        'type': 'str',
        'status': 'str',
        'coin_name': 'str',
        'amount': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'completed_at': 'completedAt',
        'order_id': 'orderId',
        'account_id': 'accountId',
        'type': 'type',
        'status': 'status',
        'coin_name': 'coinName',
        'amount': 'amount'
    }

    def __init__(self, created_at=None, completed_at=None, order_id=None, account_id=None, type=None, status=None, coin_name=None, amount=None):  # noqa: E501
        """GetOrderResponseItems - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._completed_at = None
        self._order_id = None
        self._account_id = None
        self._type = None
        self._status = None
        self._coin_name = None
        self._amount = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if completed_at is not None:
            self.completed_at = completed_at
        if order_id is not None:
            self.order_id = order_id
        if account_id is not None:
            self.account_id = account_id
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if coin_name is not None:
            self.coin_name = coin_name
        if amount is not None:
            self.amount = amount

    @property
    def created_at(self):
        """Gets the created_at of this GetOrderResponseItems.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetOrderResponseItems.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetOrderResponseItems.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetOrderResponseItems.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def completed_at(self):
        """Gets the completed_at of this GetOrderResponseItems.  # noqa: E501

        完成时间  # noqa: E501

        :return: The completed_at of this GetOrderResponseItems.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this GetOrderResponseItems.

        完成时间  # noqa: E501

        :param completed_at: The completed_at of this GetOrderResponseItems.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def order_id(self):
        """Gets the order_id of this GetOrderResponseItems.  # noqa: E501

        订单编号  # noqa: E501

        :return: The order_id of this GetOrderResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetOrderResponseItems.

        订单编号  # noqa: E501

        :param order_id: The order_id of this GetOrderResponseItems.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def account_id(self):
        """Gets the account_id of this GetOrderResponseItems.  # noqa: E501

        账户Id  # noqa: E501

        :return: The account_id of this GetOrderResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetOrderResponseItems.

        账户Id  # noqa: E501

        :param account_id: The account_id of this GetOrderResponseItems.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def type(self):
        """Gets the type of this GetOrderResponseItems.  # noqa: E501

        订单类型  # noqa: E501

        :return: The type of this GetOrderResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetOrderResponseItems.

        订单类型  # noqa: E501

        :param type: The type of this GetOrderResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADD_MARKET", "RECHARGE_MARKET"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this GetOrderResponseItems.  # noqa: E501

        订单状态  # noqa: E501

        :return: The status of this GetOrderResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetOrderResponseItems.

        订单状态  # noqa: E501

        :param status: The status of this GetOrderResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCEED", "CANCEL", "UNPAID"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def coin_name(self):
        """Gets the coin_name of this GetOrderResponseItems.  # noqa: E501

        币种  # noqa: E501

        :return: The coin_name of this GetOrderResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._coin_name

    @coin_name.setter
    def coin_name(self, coin_name):
        """Sets the coin_name of this GetOrderResponseItems.

        币种  # noqa: E501

        :param coin_name: The coin_name of this GetOrderResponseItems.  # noqa: E501
        :type: str
        """

        self._coin_name = coin_name

    @property
    def amount(self):
        """Gets the amount of this GetOrderResponseItems.  # noqa: E501

        数量  # noqa: E501

        :return: The amount of this GetOrderResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetOrderResponseItems.

        数量  # noqa: E501

        :param amount: The amount of this GetOrderResponseItems.  # noqa: E501
        :type: str
        """

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOrderResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOrderResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
