# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetInviterResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inviter': 'str',
        'invite_code': 'str',
        'invite_rebate': 'str',
        'invitees': 'int'
    }

    attribute_map = {
        'inviter': 'inviter',
        'invite_code': 'inviteCode',
        'invite_rebate': 'inviteRebate',
        'invitees': 'invitees'
    }

    def __init__(self, inviter=None, invite_code=None, invite_rebate=None, invitees=None):  # noqa: E501
        """GetInviterResponse - a model defined in Swagger"""  # noqa: E501

        self._inviter = None
        self._invite_code = None
        self._invite_rebate = None
        self._invitees = None
        self.discriminator = None

        if inviter is not None:
            self.inviter = inviter
        if invite_code is not None:
            self.invite_code = invite_code
        if invite_rebate is not None:
            self.invite_rebate = invite_rebate
        if invitees is not None:
            self.invitees = invitees

    @property
    def inviter(self):
        """Gets the inviter of this GetInviterResponse.  # noqa: E501

        邀请人账号  # noqa: E501

        :return: The inviter of this GetInviterResponse.  # noqa: E501
        :rtype: str
        """
        return self._inviter

    @inviter.setter
    def inviter(self, inviter):
        """Sets the inviter of this GetInviterResponse.

        邀请人账号  # noqa: E501

        :param inviter: The inviter of this GetInviterResponse.  # noqa: E501
        :type: str
        """

        self._inviter = inviter

    @property
    def invite_code(self):
        """Gets the invite_code of this GetInviterResponse.  # noqa: E501

        邀请码  # noqa: E501

        :return: The invite_code of this GetInviterResponse.  # noqa: E501
        :rtype: str
        """
        return self._invite_code

    @invite_code.setter
    def invite_code(self, invite_code):
        """Sets the invite_code of this GetInviterResponse.

        邀请码  # noqa: E501

        :param invite_code: The invite_code of this GetInviterResponse.  # noqa: E501
        :type: str
        """

        self._invite_code = invite_code

    @property
    def invite_rebate(self):
        """Gets the invite_rebate of this GetInviterResponse.  # noqa: E501

        邀请返佣估值  # noqa: E501

        :return: The invite_rebate of this GetInviterResponse.  # noqa: E501
        :rtype: str
        """
        return self._invite_rebate

    @invite_rebate.setter
    def invite_rebate(self, invite_rebate):
        """Sets the invite_rebate of this GetInviterResponse.

        邀请返佣估值  # noqa: E501

        :param invite_rebate: The invite_rebate of this GetInviterResponse.  # noqa: E501
        :type: str
        """

        self._invite_rebate = invite_rebate

    @property
    def invitees(self):
        """Gets the invitees of this GetInviterResponse.  # noqa: E501

        邀请好友数  # noqa: E501

        :return: The invitees of this GetInviterResponse.  # noqa: E501
        :rtype: int
        """
        return self._invitees

    @invitees.setter
    def invitees(self, invitees):
        """Sets the invitees of this GetInviterResponse.

        邀请好友数  # noqa: E501

        :param invitees: The invitees of this GetInviterResponse.  # noqa: E501
        :type: int
        """

        self._invitees = invitees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetInviterResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetInviterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
