# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.staff.models.get_otc_response_email_address import GetOtcResponseEmailAddress  # noqa: F401,E501


class GetOtcResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'nick_name': 'str',
        'email_address': 'GetOtcResponseEmailAddress',
        'phone_number': 'str',
        'name': 'str',
        'merchant': 'bool'
    }

    attribute_map = {
        'account_id': 'accountId',
        'nick_name': 'nickName',
        'email_address': 'emailAddress',
        'phone_number': 'phoneNumber',
        'name': 'name',
        'merchant': 'merchant'
    }

    def __init__(self, account_id=None, nick_name=None, email_address=None, phone_number=None, name=None, merchant=None):  # noqa: E501
        """GetOtcResponseItems - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._nick_name = None
        self._email_address = None
        self._phone_number = None
        self._name = None
        self._merchant = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if nick_name is not None:
            self.nick_name = nick_name
        if email_address is not None:
            self.email_address = email_address
        if phone_number is not None:
            self.phone_number = phone_number
        if name is not None:
            self.name = name
        if merchant is not None:
            self.merchant = merchant

    @property
    def account_id(self):
        """Gets the account_id of this GetOtcResponseItems.  # noqa: E501

        平台用户id  # noqa: E501

        :return: The account_id of this GetOtcResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetOtcResponseItems.

        平台用户id  # noqa: E501

        :param account_id: The account_id of this GetOtcResponseItems.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def nick_name(self):
        """Gets the nick_name of this GetOtcResponseItems.  # noqa: E501

        昵称  # noqa: E501

        :return: The nick_name of this GetOtcResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this GetOtcResponseItems.

        昵称  # noqa: E501

        :param nick_name: The nick_name of this GetOtcResponseItems.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def email_address(self):
        """Gets the email_address of this GetOtcResponseItems.  # noqa: E501


        :return: The email_address of this GetOtcResponseItems.  # noqa: E501
        :rtype: GetOtcResponseEmailAddress
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this GetOtcResponseItems.


        :param email_address: The email_address of this GetOtcResponseItems.  # noqa: E501
        :type: GetOtcResponseEmailAddress
        """

        self._email_address = email_address

    @property
    def phone_number(self):
        """Gets the phone_number of this GetOtcResponseItems.  # noqa: E501

        手机号码  # noqa: E501

        :return: The phone_number of this GetOtcResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetOtcResponseItems.

        手机号码  # noqa: E501

        :param phone_number: The phone_number of this GetOtcResponseItems.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def name(self):
        """Gets the name of this GetOtcResponseItems.  # noqa: E501

        姓名  # noqa: E501

        :return: The name of this GetOtcResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetOtcResponseItems.

        姓名  # noqa: E501

        :param name: The name of this GetOtcResponseItems.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def merchant(self):
        """Gets the merchant of this GetOtcResponseItems.  # noqa: E501

        0不是1是  # noqa: E501

        :return: The merchant of this GetOtcResponseItems.  # noqa: E501
        :rtype: bool
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this GetOtcResponseItems.

        0不是1是  # noqa: E501

        :param merchant: The merchant of this GetOtcResponseItems.  # noqa: E501
        :type: bool
        """

        self._merchant = merchant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOtcResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOtcResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
