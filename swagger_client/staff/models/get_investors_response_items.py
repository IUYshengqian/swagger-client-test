# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetInvestorsResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created_at': 'datetime',
        'uid': 'str',
        'name': 'str',
        'phone_number': 'str',
        'email': 'str',
        'nationality': 'str',
        'auth_type': 'str',
        'is_certificated': 'bool',
        'is_blocked': 'bool',
        'blocked_reason': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'created_at': 'createdAt',
        'uid': 'uid',
        'name': 'name',
        'phone_number': 'phoneNumber',
        'email': 'email',
        'nationality': 'nationality',
        'auth_type': 'authType',
        'is_certificated': 'isCertificated',
        'is_blocked': 'isBlocked',
        'blocked_reason': 'blockedReason'
    }

    def __init__(self, account_id=None, created_at=None, uid=None, name=None, phone_number=None, email=None, nationality=None, auth_type=None, is_certificated=None, is_blocked=None, blocked_reason=None):  # noqa: E501
        """GetInvestorsResponseItems - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._created_at = None
        self._uid = None
        self._name = None
        self._phone_number = None
        self._email = None
        self._nationality = None
        self._auth_type = None
        self._is_certificated = None
        self._is_blocked = None
        self._blocked_reason = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if created_at is not None:
            self.created_at = created_at
        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email
        if nationality is not None:
            self.nationality = nationality
        if auth_type is not None:
            self.auth_type = auth_type
        if is_certificated is not None:
            self.is_certificated = is_certificated
        if is_blocked is not None:
            self.is_blocked = is_blocked
        if blocked_reason is not None:
            self.blocked_reason = blocked_reason

    @property
    def account_id(self):
        """Gets the account_id of this GetInvestorsResponseItems.  # noqa: E501

        账号ID  # noqa: E501

        :return: The account_id of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetInvestorsResponseItems.

        账号ID  # noqa: E501

        :param account_id: The account_id of this GetInvestorsResponseItems.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """Gets the created_at of this GetInvestorsResponseItems.  # noqa: E501

        注册时间  # noqa: E501

        :return: The created_at of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetInvestorsResponseItems.

        注册时间  # noqa: E501

        :param created_at: The created_at of this GetInvestorsResponseItems.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def uid(self):
        """Gets the uid of this GetInvestorsResponseItems.  # noqa: E501

        平台用户id  # noqa: E501

        :return: The uid of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetInvestorsResponseItems.

        平台用户id  # noqa: E501

        :param uid: The uid of this GetInvestorsResponseItems.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this GetInvestorsResponseItems.  # noqa: E501

        姓名/企业名称  # noqa: E501

        :return: The name of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetInvestorsResponseItems.

        姓名/企业名称  # noqa: E501

        :param name: The name of this GetInvestorsResponseItems.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this GetInvestorsResponseItems.  # noqa: E501

        手机号码  # noqa: E501

        :return: The phone_number of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetInvestorsResponseItems.

        手机号码  # noqa: E501

        :param phone_number: The phone_number of this GetInvestorsResponseItems.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this GetInvestorsResponseItems.  # noqa: E501

        邮箱  # noqa: E501

        :return: The email of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetInvestorsResponseItems.

        邮箱  # noqa: E501

        :param email: The email of this GetInvestorsResponseItems.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def nationality(self):
        """Gets the nationality of this GetInvestorsResponseItems.  # noqa: E501

        地区  # noqa: E501

        :return: The nationality of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this GetInvestorsResponseItems.

        地区  # noqa: E501

        :param nationality: The nationality of this GetInvestorsResponseItems.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def auth_type(self):
        """Gets the auth_type of this GetInvestorsResponseItems.  # noqa: E501

        认证类型 individual:个人,company:企业  # noqa: E501

        :return: The auth_type of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this GetInvestorsResponseItems.

        认证类型 individual:个人,company:企业  # noqa: E501

        :param auth_type: The auth_type of this GetInvestorsResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["individual", "company"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def is_certificated(self):
        """Gets the is_certificated of this GetInvestorsResponseItems.  # noqa: E501

        是否通过实名认证  # noqa: E501

        :return: The is_certificated of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_certificated

    @is_certificated.setter
    def is_certificated(self, is_certificated):
        """Sets the is_certificated of this GetInvestorsResponseItems.

        是否通过实名认证  # noqa: E501

        :param is_certificated: The is_certificated of this GetInvestorsResponseItems.  # noqa: E501
        :type: bool
        """

        self._is_certificated = is_certificated

    @property
    def is_blocked(self):
        """Gets the is_blocked of this GetInvestorsResponseItems.  # noqa: E501

        是否锁定  # noqa: E501

        :return: The is_blocked of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_blocked

    @is_blocked.setter
    def is_blocked(self, is_blocked):
        """Sets the is_blocked of this GetInvestorsResponseItems.

        是否锁定  # noqa: E501

        :param is_blocked: The is_blocked of this GetInvestorsResponseItems.  # noqa: E501
        :type: bool
        """

        self._is_blocked = is_blocked

    @property
    def blocked_reason(self):
        """Gets the blocked_reason of this GetInvestorsResponseItems.  # noqa: E501

        禁用原因  # noqa: E501

        :return: The blocked_reason of this GetInvestorsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._blocked_reason

    @blocked_reason.setter
    def blocked_reason(self, blocked_reason):
        """Sets the blocked_reason of this GetInvestorsResponseItems.

        禁用原因  # noqa: E501

        :param blocked_reason: The blocked_reason of this GetInvestorsResponseItems.  # noqa: E501
        :type: str
        """

        self._blocked_reason = blocked_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetInvestorsResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetInvestorsResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
