# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetSystemTradingPairListResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'price': 'str',
        'is_deep_sharing': 'bool',
        'number_places': 'str',
        'price_places': 'str',
        'min_trading_price': 'str',
        'max_trading_price': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'price': 'price',
        'is_deep_sharing': 'isDeepSharing',
        'number_places': 'numberPlaces',
        'price_places': 'pricePlaces',
        'min_trading_price': 'minTradingPrice',
        'max_trading_price': 'maxTradingPrice'
    }

    def __init__(self, id=None, name=None, price=None, is_deep_sharing=None, number_places=None, price_places=None, min_trading_price=None, max_trading_price=None):  # noqa: E501
        """GetSystemTradingPairListResponseItems - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._price = None
        self._is_deep_sharing = None
        self._number_places = None
        self._price_places = None
        self._min_trading_price = None
        self._max_trading_price = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if is_deep_sharing is not None:
            self.is_deep_sharing = is_deep_sharing
        if number_places is not None:
            self.number_places = number_places
        if price_places is not None:
            self.price_places = price_places
        if min_trading_price is not None:
            self.min_trading_price = min_trading_price
        if max_trading_price is not None:
            self.max_trading_price = max_trading_price

    @property
    def id(self):
        """Gets the id of this GetSystemTradingPairListResponseItems.  # noqa: E501

        交易币对配置ID  # noqa: E501

        :return: The id of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSystemTradingPairListResponseItems.

        交易币对配置ID  # noqa: E501

        :param id: The id of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetSystemTradingPairListResponseItems.  # noqa: E501

        币种名称  # noqa: E501

        :return: The name of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSystemTradingPairListResponseItems.

        币种名称  # noqa: E501

        :param name: The name of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this GetSystemTradingPairListResponseItems.  # noqa: E501

        单价  # noqa: E501

        :return: The price of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetSystemTradingPairListResponseItems.

        单价  # noqa: E501

        :param price: The price of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def is_deep_sharing(self):
        """Gets the is_deep_sharing of this GetSystemTradingPairListResponseItems.  # noqa: E501

        是否深度共享  # noqa: E501

        :return: The is_deep_sharing of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_deep_sharing

    @is_deep_sharing.setter
    def is_deep_sharing(self, is_deep_sharing):
        """Sets the is_deep_sharing of this GetSystemTradingPairListResponseItems.

        是否深度共享  # noqa: E501

        :param is_deep_sharing: The is_deep_sharing of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :type: bool
        """

        self._is_deep_sharing = is_deep_sharing

    @property
    def number_places(self):
        """Gets the number_places of this GetSystemTradingPairListResponseItems.  # noqa: E501

        数量小数位数  # noqa: E501

        :return: The number_places of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._number_places

    @number_places.setter
    def number_places(self, number_places):
        """Sets the number_places of this GetSystemTradingPairListResponseItems.

        数量小数位数  # noqa: E501

        :param number_places: The number_places of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :type: str
        """

        self._number_places = number_places

    @property
    def price_places(self):
        """Gets the price_places of this GetSystemTradingPairListResponseItems.  # noqa: E501

        价格小数位数  # noqa: E501

        :return: The price_places of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._price_places

    @price_places.setter
    def price_places(self, price_places):
        """Sets the price_places of this GetSystemTradingPairListResponseItems.

        价格小数位数  # noqa: E501

        :param price_places: The price_places of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :type: str
        """

        self._price_places = price_places

    @property
    def min_trading_price(self):
        """Gets the min_trading_price of this GetSystemTradingPairListResponseItems.  # noqa: E501

        最小交易单价  # noqa: E501

        :return: The min_trading_price of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._min_trading_price

    @min_trading_price.setter
    def min_trading_price(self, min_trading_price):
        """Sets the min_trading_price of this GetSystemTradingPairListResponseItems.

        最小交易单价  # noqa: E501

        :param min_trading_price: The min_trading_price of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :type: str
        """

        self._min_trading_price = min_trading_price

    @property
    def max_trading_price(self):
        """Gets the max_trading_price of this GetSystemTradingPairListResponseItems.  # noqa: E501

        最大交易单价  # noqa: E501

        :return: The max_trading_price of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._max_trading_price

    @max_trading_price.setter
    def max_trading_price(self, max_trading_price):
        """Sets the max_trading_price of this GetSystemTradingPairListResponseItems.

        最大交易单价  # noqa: E501

        :param max_trading_price: The max_trading_price of this GetSystemTradingPairListResponseItems.  # noqa: E501
        :type: str
        """

        self._max_trading_price = max_trading_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSystemTradingPairListResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSystemTradingPairListResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
