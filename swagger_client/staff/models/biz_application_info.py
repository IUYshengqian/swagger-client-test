# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BizApplicationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apply_time': 'str',
        'id': 'str',
        'user_id': 'str',
        'name': 'str',
        'update_time': 'str',
        'auditor_name': 'str',
        'status': 'int',
        'reason': 'str'
    }

    attribute_map = {
        'apply_time': 'applyTime',
        'id': 'id',
        'user_id': 'userId',
        'name': 'name',
        'update_time': 'updateTime',
        'auditor_name': 'auditorName',
        'status': 'status',
        'reason': 'reason'
    }

    def __init__(self, apply_time=None, id=None, user_id=None, name=None, update_time=None, auditor_name=None, status=None, reason=None):  # noqa: E501
        """BizApplicationInfo - a model defined in Swagger"""  # noqa: E501

        self._apply_time = None
        self._id = None
        self._user_id = None
        self._name = None
        self._update_time = None
        self._auditor_name = None
        self._status = None
        self._reason = None
        self.discriminator = None

        if apply_time is not None:
            self.apply_time = apply_time
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if name is not None:
            self.name = name
        if update_time is not None:
            self.update_time = update_time
        if auditor_name is not None:
            self.auditor_name = auditor_name
        if status is not None:
            self.status = status
        if reason is not None:
            self.reason = reason

    @property
    def apply_time(self):
        """Gets the apply_time of this BizApplicationInfo.  # noqa: E501

        提交申请的时间  # noqa: E501

        :return: The apply_time of this BizApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._apply_time

    @apply_time.setter
    def apply_time(self, apply_time):
        """Sets the apply_time of this BizApplicationInfo.

        提交申请的时间  # noqa: E501

        :param apply_time: The apply_time of this BizApplicationInfo.  # noqa: E501
        :type: str
        """

        self._apply_time = apply_time

    @property
    def id(self):
        """Gets the id of this BizApplicationInfo.  # noqa: E501

        工单编号  # noqa: E501

        :return: The id of this BizApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BizApplicationInfo.

        工单编号  # noqa: E501

        :param id: The id of this BizApplicationInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this BizApplicationInfo.  # noqa: E501

        用户id  # noqa: E501

        :return: The user_id of this BizApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BizApplicationInfo.

        用户id  # noqa: E501

        :param user_id: The user_id of this BizApplicationInfo.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this BizApplicationInfo.  # noqa: E501

        姓名  # noqa: E501

        :return: The name of this BizApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BizApplicationInfo.

        姓名  # noqa: E501

        :param name: The name of this BizApplicationInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this BizApplicationInfo.  # noqa: E501

        更新时间  # noqa: E501

        :return: The update_time of this BizApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this BizApplicationInfo.

        更新时间  # noqa: E501

        :param update_time: The update_time of this BizApplicationInfo.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def auditor_name(self):
        """Gets the auditor_name of this BizApplicationInfo.  # noqa: E501

        审核人员  # noqa: E501

        :return: The auditor_name of this BizApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._auditor_name

    @auditor_name.setter
    def auditor_name(self, auditor_name):
        """Sets the auditor_name of this BizApplicationInfo.

        审核人员  # noqa: E501

        :param auditor_name: The auditor_name of this BizApplicationInfo.  # noqa: E501
        :type: str
        """

        self._auditor_name = auditor_name

    @property
    def status(self):
        """Gets the status of this BizApplicationInfo.  # noqa: E501

        状态  # noqa: E501

        :return: The status of this BizApplicationInfo.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BizApplicationInfo.

        状态  # noqa: E501

        :param status: The status of this BizApplicationInfo.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this BizApplicationInfo.  # noqa: E501

        失败原因  # noqa: E501

        :return: The reason of this BizApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this BizApplicationInfo.

        失败原因  # noqa: E501

        :param reason: The reason of this BizApplicationInfo.  # noqa: E501
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BizApplicationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BizApplicationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
