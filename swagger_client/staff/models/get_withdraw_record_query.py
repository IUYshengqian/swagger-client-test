# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetWithdrawRecordQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'submitted_start_at': 'date',
        'submitted_end_at': 'date',
        'completed_start_at': 'date',
        'completed_end_at': 'date',
        'order_id': 'str',
        'account_id': 'str',
        'status': 'str',
        'coin_id': 'str'
    }

    attribute_map = {
        'submitted_start_at': 'submittedStartAt',
        'submitted_end_at': 'submittedEndAt',
        'completed_start_at': 'completedStartAt',
        'completed_end_at': 'completedEndAt',
        'order_id': 'orderId',
        'account_id': 'accountId',
        'status': 'status',
        'coin_id': 'coinId'
    }

    def __init__(self, submitted_start_at=None, submitted_end_at=None, completed_start_at=None, completed_end_at=None, order_id=None, account_id=None, status=None, coin_id=None):  # noqa: E501
        """GetWithdrawRecordQuery - a model defined in Swagger"""  # noqa: E501

        self._submitted_start_at = None
        self._submitted_end_at = None
        self._completed_start_at = None
        self._completed_end_at = None
        self._order_id = None
        self._account_id = None
        self._status = None
        self._coin_id = None
        self.discriminator = None

        if submitted_start_at is not None:
            self.submitted_start_at = submitted_start_at
        if submitted_end_at is not None:
            self.submitted_end_at = submitted_end_at
        if completed_start_at is not None:
            self.completed_start_at = completed_start_at
        if completed_end_at is not None:
            self.completed_end_at = completed_end_at
        if order_id is not None:
            self.order_id = order_id
        if account_id is not None:
            self.account_id = account_id
        if status is not None:
            self.status = status
        if coin_id is not None:
            self.coin_id = coin_id

    @property
    def submitted_start_at(self):
        """Gets the submitted_start_at of this GetWithdrawRecordQuery.  # noqa: E501

        提交开始时间  # noqa: E501

        :return: The submitted_start_at of this GetWithdrawRecordQuery.  # noqa: E501
        :rtype: date
        """
        return self._submitted_start_at

    @submitted_start_at.setter
    def submitted_start_at(self, submitted_start_at):
        """Sets the submitted_start_at of this GetWithdrawRecordQuery.

        提交开始时间  # noqa: E501

        :param submitted_start_at: The submitted_start_at of this GetWithdrawRecordQuery.  # noqa: E501
        :type: date
        """

        self._submitted_start_at = submitted_start_at

    @property
    def submitted_end_at(self):
        """Gets the submitted_end_at of this GetWithdrawRecordQuery.  # noqa: E501

        提交结束时间  # noqa: E501

        :return: The submitted_end_at of this GetWithdrawRecordQuery.  # noqa: E501
        :rtype: date
        """
        return self._submitted_end_at

    @submitted_end_at.setter
    def submitted_end_at(self, submitted_end_at):
        """Sets the submitted_end_at of this GetWithdrawRecordQuery.

        提交结束时间  # noqa: E501

        :param submitted_end_at: The submitted_end_at of this GetWithdrawRecordQuery.  # noqa: E501
        :type: date
        """

        self._submitted_end_at = submitted_end_at

    @property
    def completed_start_at(self):
        """Gets the completed_start_at of this GetWithdrawRecordQuery.  # noqa: E501

        完成开始时间  # noqa: E501

        :return: The completed_start_at of this GetWithdrawRecordQuery.  # noqa: E501
        :rtype: date
        """
        return self._completed_start_at

    @completed_start_at.setter
    def completed_start_at(self, completed_start_at):
        """Sets the completed_start_at of this GetWithdrawRecordQuery.

        完成开始时间  # noqa: E501

        :param completed_start_at: The completed_start_at of this GetWithdrawRecordQuery.  # noqa: E501
        :type: date
        """

        self._completed_start_at = completed_start_at

    @property
    def completed_end_at(self):
        """Gets the completed_end_at of this GetWithdrawRecordQuery.  # noqa: E501

        完成结束时间  # noqa: E501

        :return: The completed_end_at of this GetWithdrawRecordQuery.  # noqa: E501
        :rtype: date
        """
        return self._completed_end_at

    @completed_end_at.setter
    def completed_end_at(self, completed_end_at):
        """Sets the completed_end_at of this GetWithdrawRecordQuery.

        完成结束时间  # noqa: E501

        :param completed_end_at: The completed_end_at of this GetWithdrawRecordQuery.  # noqa: E501
        :type: date
        """

        self._completed_end_at = completed_end_at

    @property
    def order_id(self):
        """Gets the order_id of this GetWithdrawRecordQuery.  # noqa: E501

        订单标号  # noqa: E501

        :return: The order_id of this GetWithdrawRecordQuery.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetWithdrawRecordQuery.

        订单标号  # noqa: E501

        :param order_id: The order_id of this GetWithdrawRecordQuery.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def account_id(self):
        """Gets the account_id of this GetWithdrawRecordQuery.  # noqa: E501

        账户Id  # noqa: E501

        :return: The account_id of this GetWithdrawRecordQuery.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetWithdrawRecordQuery.

        账户Id  # noqa: E501

        :param account_id: The account_id of this GetWithdrawRecordQuery.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def status(self):
        """Gets the status of this GetWithdrawRecordQuery.  # noqa: E501

        提币状态  # noqa: E501

        :return: The status of this GetWithdrawRecordQuery.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetWithdrawRecordQuery.

        提币状态  # noqa: E501

        :param status: The status of this GetWithdrawRecordQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["WAIT_REVIEW", "SUCCEED", "FAILED", "CONFIRMING", "CANCEL", "FIRST_REFUSAL", "SECOND_REFUSAL", "FIRST_REVIEW", "PATCH"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def coin_id(self):
        """Gets the coin_id of this GetWithdrawRecordQuery.  # noqa: E501

        币id  # noqa: E501

        :return: The coin_id of this GetWithdrawRecordQuery.  # noqa: E501
        :rtype: str
        """
        return self._coin_id

    @coin_id.setter
    def coin_id(self, coin_id):
        """Sets the coin_id of this GetWithdrawRecordQuery.

        币id  # noqa: E501

        :param coin_id: The coin_id of this GetWithdrawRecordQuery.  # noqa: E501
        :type: str
        """

        self._coin_id = coin_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWithdrawRecordQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWithdrawRecordQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
