# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PutSystemCoinsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rc_times': 'int',
        'wc_times': 'int',
        'withdraw_rate': 'str',
        'min_withdraw_fee': 'str',
        'min_withdraw': 'str',
        'max_withdraw': 'str',
        'day_withdraw_total': 'str',
        'min_recharge': 'str',
        'address_tag_switch': 'bool',
        'address_type': 'str',
        'address_url': 'str',
        'txid_url': 'str'
    }

    attribute_map = {
        'rc_times': 'rcTimes',
        'wc_times': 'wcTimes',
        'withdraw_rate': 'withdrawRate',
        'min_withdraw_fee': 'minWithdrawFee',
        'min_withdraw': 'minWithdraw',
        'max_withdraw': 'maxWithdraw',
        'day_withdraw_total': 'dayWithdrawTotal',
        'min_recharge': 'minRecharge',
        'address_tag_switch': 'addressTagSwitch',
        'address_type': 'addressType',
        'address_url': 'addressUrl',
        'txid_url': 'txidUrl'
    }

    def __init__(self, rc_times=None, wc_times=None, withdraw_rate=None, min_withdraw_fee=None, min_withdraw=None, max_withdraw=None, day_withdraw_total=None, min_recharge=None, address_tag_switch=None, address_type=None, address_url=None, txid_url=None):  # noqa: E501
        """PutSystemCoinsRequest - a model defined in Swagger"""  # noqa: E501

        self._rc_times = None
        self._wc_times = None
        self._withdraw_rate = None
        self._min_withdraw_fee = None
        self._min_withdraw = None
        self._max_withdraw = None
        self._day_withdraw_total = None
        self._min_recharge = None
        self._address_tag_switch = None
        self._address_type = None
        self._address_url = None
        self._txid_url = None
        self.discriminator = None

        if rc_times is not None:
            self.rc_times = rc_times
        if wc_times is not None:
            self.wc_times = wc_times
        if withdraw_rate is not None:
            self.withdraw_rate = withdraw_rate
        if min_withdraw_fee is not None:
            self.min_withdraw_fee = min_withdraw_fee
        if min_withdraw is not None:
            self.min_withdraw = min_withdraw
        if max_withdraw is not None:
            self.max_withdraw = max_withdraw
        if day_withdraw_total is not None:
            self.day_withdraw_total = day_withdraw_total
        if min_recharge is not None:
            self.min_recharge = min_recharge
        if address_tag_switch is not None:
            self.address_tag_switch = address_tag_switch
        if address_type is not None:
            self.address_type = address_type
        if address_url is not None:
            self.address_url = address_url
        if txid_url is not None:
            self.txid_url = txid_url

    @property
    def rc_times(self):
        """Gets the rc_times of this PutSystemCoinsRequest.  # noqa: E501

        充币确认次数  # noqa: E501

        :return: The rc_times of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: int
        """
        return self._rc_times

    @rc_times.setter
    def rc_times(self, rc_times):
        """Sets the rc_times of this PutSystemCoinsRequest.

        充币确认次数  # noqa: E501

        :param rc_times: The rc_times of this PutSystemCoinsRequest.  # noqa: E501
        :type: int
        """

        self._rc_times = rc_times

    @property
    def wc_times(self):
        """Gets the wc_times of this PutSystemCoinsRequest.  # noqa: E501

        提币确认次数  # noqa: E501

        :return: The wc_times of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: int
        """
        return self._wc_times

    @wc_times.setter
    def wc_times(self, wc_times):
        """Sets the wc_times of this PutSystemCoinsRequest.

        提币确认次数  # noqa: E501

        :param wc_times: The wc_times of this PutSystemCoinsRequest.  # noqa: E501
        :type: int
        """

        self._wc_times = wc_times

    @property
    def withdraw_rate(self):
        """Gets the withdraw_rate of this PutSystemCoinsRequest.  # noqa: E501

        提币费率  # noqa: E501

        :return: The withdraw_rate of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._withdraw_rate

    @withdraw_rate.setter
    def withdraw_rate(self, withdraw_rate):
        """Sets the withdraw_rate of this PutSystemCoinsRequest.

        提币费率  # noqa: E501

        :param withdraw_rate: The withdraw_rate of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._withdraw_rate = withdraw_rate

    @property
    def min_withdraw_fee(self):
        """Gets the min_withdraw_fee of this PutSystemCoinsRequest.  # noqa: E501

        最小提币费  # noqa: E501

        :return: The min_withdraw_fee of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._min_withdraw_fee

    @min_withdraw_fee.setter
    def min_withdraw_fee(self, min_withdraw_fee):
        """Sets the min_withdraw_fee of this PutSystemCoinsRequest.

        最小提币费  # noqa: E501

        :param min_withdraw_fee: The min_withdraw_fee of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._min_withdraw_fee = min_withdraw_fee

    @property
    def min_withdraw(self):
        """Gets the min_withdraw of this PutSystemCoinsRequest.  # noqa: E501

        最小提币数量  # noqa: E501

        :return: The min_withdraw of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._min_withdraw

    @min_withdraw.setter
    def min_withdraw(self, min_withdraw):
        """Sets the min_withdraw of this PutSystemCoinsRequest.

        最小提币数量  # noqa: E501

        :param min_withdraw: The min_withdraw of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._min_withdraw = min_withdraw

    @property
    def max_withdraw(self):
        """Gets the max_withdraw of this PutSystemCoinsRequest.  # noqa: E501

        最大提币数量  # noqa: E501

        :return: The max_withdraw of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._max_withdraw

    @max_withdraw.setter
    def max_withdraw(self, max_withdraw):
        """Sets the max_withdraw of this PutSystemCoinsRequest.

        最大提币数量  # noqa: E501

        :param max_withdraw: The max_withdraw of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._max_withdraw = max_withdraw

    @property
    def day_withdraw_total(self):
        """Gets the day_withdraw_total of this PutSystemCoinsRequest.  # noqa: E501

        每日最大提币  # noqa: E501

        :return: The day_withdraw_total of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._day_withdraw_total

    @day_withdraw_total.setter
    def day_withdraw_total(self, day_withdraw_total):
        """Sets the day_withdraw_total of this PutSystemCoinsRequest.

        每日最大提币  # noqa: E501

        :param day_withdraw_total: The day_withdraw_total of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._day_withdraw_total = day_withdraw_total

    @property
    def min_recharge(self):
        """Gets the min_recharge of this PutSystemCoinsRequest.  # noqa: E501

        最小充币数量  # noqa: E501

        :return: The min_recharge of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._min_recharge

    @min_recharge.setter
    def min_recharge(self, min_recharge):
        """Sets the min_recharge of this PutSystemCoinsRequest.

        最小充币数量  # noqa: E501

        :param min_recharge: The min_recharge of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._min_recharge = min_recharge

    @property
    def address_tag_switch(self):
        """Gets the address_tag_switch of this PutSystemCoinsRequest.  # noqa: E501

        是否使用地址标签  # noqa: E501

        :return: The address_tag_switch of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._address_tag_switch

    @address_tag_switch.setter
    def address_tag_switch(self, address_tag_switch):
        """Sets the address_tag_switch of this PutSystemCoinsRequest.

        是否使用地址标签  # noqa: E501

        :param address_tag_switch: The address_tag_switch of this PutSystemCoinsRequest.  # noqa: E501
        :type: bool
        """

        self._address_tag_switch = address_tag_switch

    @property
    def address_type(self):
        """Gets the address_type of this PutSystemCoinsRequest.  # noqa: E501

        地址标识  # noqa: E501

        :return: The address_type of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this PutSystemCoinsRequest.

        地址标识  # noqa: E501

        :param address_type: The address_type of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._address_type = address_type

    @property
    def address_url(self):
        """Gets the address_url of this PutSystemCoinsRequest.  # noqa: E501

        地址URL  # noqa: E501

        :return: The address_url of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._address_url

    @address_url.setter
    def address_url(self, address_url):
        """Sets the address_url of this PutSystemCoinsRequest.

        地址URL  # noqa: E501

        :param address_url: The address_url of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._address_url = address_url

    @property
    def txid_url(self):
        """Gets the txid_url of this PutSystemCoinsRequest.  # noqa: E501

        哈希URL  # noqa: E501

        :return: The txid_url of this PutSystemCoinsRequest.  # noqa: E501
        :rtype: str
        """
        return self._txid_url

    @txid_url.setter
    def txid_url(self, txid_url):
        """Sets the txid_url of this PutSystemCoinsRequest.

        哈希URL  # noqa: E501

        :param txid_url: The txid_url of this PutSystemCoinsRequest.  # noqa: E501
        :type: str
        """

        self._txid_url = txid_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutSystemCoinsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutSystemCoinsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
