# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdminOrderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_time': 'str',
        'complete_time': 'str',
        'ad_id': 'str',
        'order_id': 'str',
        'currency_code': 'str',
        'price': 'str',
        'amount': 'str',
        'dealt': 'str',
        'type': 'int',
        'status': 'int',
        'operator': 'str',
        'pay_note': 'str',
        'biz_user_id': 'str',
        'user_id': 'str',
        'complain': 'str'
    }

    attribute_map = {
        'order_time': 'orderTime',
        'complete_time': 'completeTime',
        'ad_id': 'adId',
        'order_id': 'orderId',
        'currency_code': 'currencyCode',
        'price': 'price',
        'amount': 'amount',
        'dealt': 'dealt',
        'type': 'type',
        'status': 'status',
        'operator': 'operator',
        'pay_note': 'payNote',
        'biz_user_id': 'bizUserId',
        'user_id': 'userId',
        'complain': 'complain'
    }

    def __init__(self, order_time=None, complete_time=None, ad_id=None, order_id=None, currency_code=None, price=None, amount=None, dealt=None, type=None, status=None, operator=None, pay_note=None, biz_user_id=None, user_id=None, complain=None):  # noqa: E501
        """AdminOrderInfo - a model defined in Swagger"""  # noqa: E501

        self._order_time = None
        self._complete_time = None
        self._ad_id = None
        self._order_id = None
        self._currency_code = None
        self._price = None
        self._amount = None
        self._dealt = None
        self._type = None
        self._status = None
        self._operator = None
        self._pay_note = None
        self._biz_user_id = None
        self._user_id = None
        self._complain = None
        self.discriminator = None

        if order_time is not None:
            self.order_time = order_time
        if complete_time is not None:
            self.complete_time = complete_time
        if ad_id is not None:
            self.ad_id = ad_id
        if order_id is not None:
            self.order_id = order_id
        if currency_code is not None:
            self.currency_code = currency_code
        if price is not None:
            self.price = price
        if amount is not None:
            self.amount = amount
        if dealt is not None:
            self.dealt = dealt
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if operator is not None:
            self.operator = operator
        if pay_note is not None:
            self.pay_note = pay_note
        if biz_user_id is not None:
            self.biz_user_id = biz_user_id
        if user_id is not None:
            self.user_id = user_id
        if complain is not None:
            self.complain = complain

    @property
    def order_time(self):
        """Gets the order_time of this AdminOrderInfo.  # noqa: E501

        下单时间  # noqa: E501

        :return: The order_time of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._order_time

    @order_time.setter
    def order_time(self, order_time):
        """Sets the order_time of this AdminOrderInfo.

        下单时间  # noqa: E501

        :param order_time: The order_time of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._order_time = order_time

    @property
    def complete_time(self):
        """Gets the complete_time of this AdminOrderInfo.  # noqa: E501

        完成时间  # noqa: E501

        :return: The complete_time of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._complete_time

    @complete_time.setter
    def complete_time(self, complete_time):
        """Sets the complete_time of this AdminOrderInfo.

        完成时间  # noqa: E501

        :param complete_time: The complete_time of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._complete_time = complete_time

    @property
    def ad_id(self):
        """Gets the ad_id of this AdminOrderInfo.  # noqa: E501

        广告id  # noqa: E501

        :return: The ad_id of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._ad_id

    @ad_id.setter
    def ad_id(self, ad_id):
        """Sets the ad_id of this AdminOrderInfo.

        广告id  # noqa: E501

        :param ad_id: The ad_id of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._ad_id = ad_id

    @property
    def order_id(self):
        """Gets the order_id of this AdminOrderInfo.  # noqa: E501

        订单id  # noqa: E501

        :return: The order_id of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this AdminOrderInfo.

        订单id  # noqa: E501

        :param order_id: The order_id of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def currency_code(self):
        """Gets the currency_code of this AdminOrderInfo.  # noqa: E501

        币种代码  # noqa: E501

        :return: The currency_code of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AdminOrderInfo.

        币种代码  # noqa: E501

        :param currency_code: The currency_code of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def price(self):
        """Gets the price of this AdminOrderInfo.  # noqa: E501

        价格  # noqa: E501

        :return: The price of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AdminOrderInfo.

        价格  # noqa: E501

        :param price: The price of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def amount(self):
        """Gets the amount of this AdminOrderInfo.  # noqa: E501

        数量  # noqa: E501

        :return: The amount of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AdminOrderInfo.

        数量  # noqa: E501

        :param amount: The amount of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def dealt(self):
        """Gets the dealt of this AdminOrderInfo.  # noqa: E501

        成交金额  # noqa: E501

        :return: The dealt of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._dealt

    @dealt.setter
    def dealt(self, dealt):
        """Sets the dealt of this AdminOrderInfo.

        成交金额  # noqa: E501

        :param dealt: The dealt of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._dealt = dealt

    @property
    def type(self):
        """Gets the type of this AdminOrderInfo.  # noqa: E501

        广告方向  # noqa: E501

        :return: The type of this AdminOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AdminOrderInfo.

        广告方向  # noqa: E501

        :param type: The type of this AdminOrderInfo.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AdminOrderInfo.  # noqa: E501

        状态  # noqa: E501

        :return: The status of this AdminOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AdminOrderInfo.

        状态  # noqa: E501

        :param status: The status of this AdminOrderInfo.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def operator(self):
        """Gets the operator of this AdminOrderInfo.  # noqa: E501

        操作人  # noqa: E501

        :return: The operator of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this AdminOrderInfo.

        操作人  # noqa: E501

        :param operator: The operator of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def pay_note(self):
        """Gets the pay_note of this AdminOrderInfo.  # noqa: E501

        付款码  # noqa: E501

        :return: The pay_note of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._pay_note

    @pay_note.setter
    def pay_note(self, pay_note):
        """Sets the pay_note of this AdminOrderInfo.

        付款码  # noqa: E501

        :param pay_note: The pay_note of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._pay_note = pay_note

    @property
    def biz_user_id(self):
        """Gets the biz_user_id of this AdminOrderInfo.  # noqa: E501

        商家id  # noqa: E501

        :return: The biz_user_id of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._biz_user_id

    @biz_user_id.setter
    def biz_user_id(self, biz_user_id):
        """Sets the biz_user_id of this AdminOrderInfo.

        商家id  # noqa: E501

        :param biz_user_id: The biz_user_id of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._biz_user_id = biz_user_id

    @property
    def user_id(self):
        """Gets the user_id of this AdminOrderInfo.  # noqa: E501

        下单用户id  # noqa: E501

        :return: The user_id of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AdminOrderInfo.

        下单用户id  # noqa: E501

        :param user_id: The user_id of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def complain(self):
        """Gets the complain of this AdminOrderInfo.  # noqa: E501

        申诉原因  # noqa: E501

        :return: The complain of this AdminOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._complain

    @complain.setter
    def complain(self, complain):
        """Sets the complain of this AdminOrderInfo.

        申诉原因  # noqa: E501

        :param complain: The complain of this AdminOrderInfo.  # noqa: E501
        :type: str
        """

        self._complain = complain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminOrderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminOrderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
