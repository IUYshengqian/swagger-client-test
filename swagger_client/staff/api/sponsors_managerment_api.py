# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.staff.api_client import ApiClient


class SponsorsManagermentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def staff_sponsor_status_put(self, put_sponsor_status, **kwargs):  # noqa: E501
        """修改保荐方状态  # noqa: E501

        修改保荐方状态  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsor_status_put(put_sponsor_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSponsorStatusRequest put_sponsor_status: 修改保荐方状态 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staff_sponsor_status_put_with_http_info(put_sponsor_status, **kwargs)  # noqa: E501
        else:
            (data) = self.staff_sponsor_status_put_with_http_info(put_sponsor_status, **kwargs)  # noqa: E501
            return data

    def staff_sponsor_status_put_with_http_info(self, put_sponsor_status, **kwargs):  # noqa: E501
        """修改保荐方状态  # noqa: E501

        修改保荐方状态  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsor_status_put_with_http_info(put_sponsor_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSponsorStatusRequest put_sponsor_status: 修改保荐方状态 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['put_sponsor_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staff_sponsor_status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'put_sponsor_status' is set
        if ('put_sponsor_status' not in params or
                params['put_sponsor_status'] is None):
            raise ValueError("Missing the required parameter `put_sponsor_status` when calling `staff_sponsor_status_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'put_sponsor_status' in params:
            body_params = params['put_sponsor_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/staff/sponsor-status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staff_sponsors_get(self, page, **kwargs):  # noqa: E501
        """管理后台获取保荐方列表  # noqa: E501

        管理后台获取保荐方列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsors_get(page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码 (required)
        :param date start_time: 开始时间
        :param date end_time: 结束时间
        :param str id: 保荐方id
        :param str name: 保荐方名称
        :param str email: 保荐方邮箱
        :param bool status: 是否冻结 0:未冻结  1：已冻结 什么都不传查所有
        :return: GetStaffSponsorListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staff_sponsors_get_with_http_info(page, **kwargs)  # noqa: E501
        else:
            (data) = self.staff_sponsors_get_with_http_info(page, **kwargs)  # noqa: E501
            return data

    def staff_sponsors_get_with_http_info(self, page, **kwargs):  # noqa: E501
        """管理后台获取保荐方列表  # noqa: E501

        管理后台获取保荐方列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsors_get_with_http_info(page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码 (required)
        :param date start_time: 开始时间
        :param date end_time: 结束时间
        :param str id: 保荐方id
        :param str name: 保荐方名称
        :param str email: 保荐方邮箱
        :param bool status: 是否冻结 0:未冻结  1：已冻结 什么都不传查所有
        :return: GetStaffSponsorListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'start_time', 'end_time', 'id', 'name', 'email', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staff_sponsors_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `staff_sponsors_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/staff/sponsors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStaffSponsorListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staff_sponsors_id_get(self, id, **kwargs):  # noqa: E501
        """管理后台获取保荐方详情  # noqa: E501

        管理后台获取保荐方详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsors_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 保荐机构id (required)
        :return: GetSponsorInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staff_sponsors_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.staff_sponsors_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def staff_sponsors_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """管理后台获取保荐方详情  # noqa: E501

        管理后台获取保荐方详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsors_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 保荐机构id (required)
        :return: GetSponsorInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staff_sponsors_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `staff_sponsors_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/staff/sponsors/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSponsorInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staff_sponsors_post(self, post_sponsor, **kwargs):  # noqa: E501
        """新增保荐方信息  # noqa: E501

        新增保荐方信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsors_post(post_sponsor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSponsorRequest post_sponsor: 新增保荐方信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staff_sponsors_post_with_http_info(post_sponsor, **kwargs)  # noqa: E501
        else:
            (data) = self.staff_sponsors_post_with_http_info(post_sponsor, **kwargs)  # noqa: E501
            return data

    def staff_sponsors_post_with_http_info(self, post_sponsor, **kwargs):  # noqa: E501
        """新增保荐方信息  # noqa: E501

        新增保荐方信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsors_post_with_http_info(post_sponsor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSponsorRequest post_sponsor: 新增保荐方信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_sponsor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staff_sponsors_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_sponsor' is set
        if ('post_sponsor' not in params or
                params['post_sponsor'] is None):
            raise ValueError("Missing the required parameter `post_sponsor` when calling `staff_sponsors_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_sponsor' in params:
            body_params = params['post_sponsor']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/staff/sponsors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staff_sponsors_put(self, put_sponsor, **kwargs):  # noqa: E501
        """修改保荐方信息  # noqa: E501

        修改保荐方信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsors_put(put_sponsor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSponsorRequest put_sponsor: 修改保荐方信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staff_sponsors_put_with_http_info(put_sponsor, **kwargs)  # noqa: E501
        else:
            (data) = self.staff_sponsors_put_with_http_info(put_sponsor, **kwargs)  # noqa: E501
            return data

    def staff_sponsors_put_with_http_info(self, put_sponsor, **kwargs):  # noqa: E501
        """修改保荐方信息  # noqa: E501

        修改保荐方信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staff_sponsors_put_with_http_info(put_sponsor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutSponsorRequest put_sponsor: 修改保荐方信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['put_sponsor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staff_sponsors_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'put_sponsor' is set
        if ('put_sponsor' not in params or
                params['put_sponsor'] is None):
            raise ValueError("Missing the required parameter `put_sponsor` when calling `staff_sponsors_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'put_sponsor' in params:
            body_params = params['put_sponsor']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/staff/sponsors', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
