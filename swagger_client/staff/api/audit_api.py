# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.staff.api_client import ApiClient


class AuditApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accounts_company_audits_get(self, **kwargs):  # noqa: E501
        """企业用户实名审核列表 - 李欣  # noqa: E501

        企业用户实名审核列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param date submitted_start_at: 提交开始申请时间
        :param date submitted_end_at: 提交结束申请时间
        :param str social_number: 社会统一编号
        :param str ticket_number: 工单编号
        :param str reject_type: 状态[\"INDIVIDUAL_ID(1)、INDIVIDUAL_PASSPORT(2)、ENTERPRISE_LOGO(3)、 ENTERPRISE_LICENSE(4)、INDIVIDUAL_ABNORMAL(5)、ENTERPRISE_ABNORMAL(6)、USER_REPORT_ABNORMAL(7)\"]
        :param str uid: uid
        :param str name: 企业名
        :param str status: 状态[\"all（全部）、APPLIED（待审核）、ACCEPTED（通过）、REJECTED（未通过）\"]
        :return: GetCompanyAuditListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_company_audits_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_company_audits_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_company_audits_get_with_http_info(self, **kwargs):  # noqa: E501
        """企业用户实名审核列表 - 李欣  # noqa: E501

        企业用户实名审核列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param date submitted_start_at: 提交开始申请时间
        :param date submitted_end_at: 提交结束申请时间
        :param str social_number: 社会统一编号
        :param str ticket_number: 工单编号
        :param str reject_type: 状态[\"INDIVIDUAL_ID(1)、INDIVIDUAL_PASSPORT(2)、ENTERPRISE_LOGO(3)、 ENTERPRISE_LICENSE(4)、INDIVIDUAL_ABNORMAL(5)、ENTERPRISE_ABNORMAL(6)、USER_REPORT_ABNORMAL(7)\"]
        :param str uid: uid
        :param str name: 企业名
        :param str status: 状态[\"all（全部）、APPLIED（待审核）、ACCEPTED（通过）、REJECTED（未通过）\"]
        :return: GetCompanyAuditListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'submitted_start_at', 'submitted_end_at', 'social_number', 'ticket_number', 'reject_type', 'uid', 'name', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_company_audits_get" % key
                )
            params[key] = val
        del params['kwargs']

        if ('social_number' in params and
                len(params['social_number']) > 64):
            raise ValueError("Invalid value for parameter `social_number` when calling `accounts_company_audits_get`, length must be less than or equal to `64`")  # noqa: E501
        if ('ticket_number' in params and
                len(params['ticket_number']) > 64):
            raise ValueError("Invalid value for parameter `ticket_number` when calling `accounts_company_audits_get`, length must be less than or equal to `64`")  # noqa: E501
        if ('name' in params and
                len(params['name']) > 50):
            raise ValueError("Invalid value for parameter `name` when calling `accounts_company_audits_get`, length must be less than or equal to `50`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'submitted_start_at' in params:
            query_params.append(('submittedStartAt', params['submitted_start_at']))  # noqa: E501
        if 'submitted_end_at' in params:
            query_params.append(('submittedEndAt', params['submitted_end_at']))  # noqa: E501
        if 'social_number' in params:
            query_params.append(('socialNumber', params['social_number']))  # noqa: E501
        if 'ticket_number' in params:
            query_params.append(('ticketNumber', params['ticket_number']))  # noqa: E501
        if 'reject_type' in params:
            query_params.append(('rejectType', params['reject_type']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/company-audits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCompanyAuditListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_company_audits_id_get(self, id, **kwargs):  # noqa: E501
        """获取企业用户实名审核详情 - 李欣  # noqa: E501

        获取企业用户实名审核详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 企业实名审核资料id (required)
        :return: GetCompanyAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_company_audits_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_company_audits_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_company_audits_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取企业用户实名审核详情 - 李欣  # noqa: E501

        获取企业用户实名审核详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 企业实名审核资料id (required)
        :return: GetCompanyAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_company_audits_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_company_audits_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/company-audits/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCompanyAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_company_audits_post(self, body, **kwargs):  # noqa: E501
        """提交企业用户实名审核 - 李欣  # noqa: E501

        提交企业用户实名审核  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCompanyAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_company_audits_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_company_audits_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def accounts_company_audits_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """提交企业用户实名审核 - 李欣  # noqa: E501

        提交企业用户实名审核  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostCompanyAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_company_audits_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_company_audits_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/company-audits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_company_audits_tasks_audit_num_get(self, **kwargs):  # noqa: E501
        """获取企业实名审核任务数量 - 李欣  # noqa: E501

        获取企业实名审核任务数量  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_tasks_audit_num_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetTasksNumAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_company_audits_tasks_audit_num_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_company_audits_tasks_audit_num_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_company_audits_tasks_audit_num_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取企业实名审核任务数量 - 李欣  # noqa: E501

        获取企业实名审核任务数量  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_tasks_audit_num_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetTasksNumAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_company_audits_tasks_audit_num_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/company-audits/tasks/audit-num', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTasksNumAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_company_audits_tasks_receive_get(self, **kwargs):  # noqa: E501
        """开始实名审核 - 李欣  # noqa: E501

        开始实名审核  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_tasks_receive_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 实名用户审核资料id（随机审核不需要，进行特殊审核时才需要）
        :return: GetCompanyAuditReceiveTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_company_audits_tasks_receive_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_company_audits_tasks_receive_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_company_audits_tasks_receive_get_with_http_info(self, **kwargs):  # noqa: E501
        """开始实名审核 - 李欣  # noqa: E501

        开始实名审核  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_company_audits_tasks_receive_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 实名用户审核资料id（随机审核不需要，进行特殊审核时才需要）
        :return: GetCompanyAuditReceiveTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_company_audits_tasks_receive_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/company-audits/tasks/receive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCompanyAuditReceiveTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_individual_audits_get(self, **kwargs):  # noqa: E501
        """个人用户实名审核列表 - 李欣  # noqa: E501

        个人用户实名审核列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param date submitted_start_at: 提交开始申请时间
        :param date submitted_end_at: 提交结束申请时间
        :param str id_number: 证件号码
        :param str ticket_number: 工单编号
        :param str reject_type: 状态[\"INDIVIDUAL_ID(1)、INDIVIDUAL_PASSPORT(2)、ENTERPRISE_LOGO(3)、 ENTERPRISE_LICENSE(4)、INDIVIDUAL_ABNORMAL(5)、ENTERPRISE_ABNORMAL(6)、USER_REPORT_ABNORMAL(7)\"]
        :param str uid: uid
        :param str status: 状态[\"all（全部）、APPLIED（待审核）、ACCEPTED（通过）、REJECTED（未通过）\"]
        :return: GetIndividualAuditListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_individual_audits_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_individual_audits_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_individual_audits_get_with_http_info(self, **kwargs):  # noqa: E501
        """个人用户实名审核列表 - 李欣  # noqa: E501

        个人用户实名审核列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param date submitted_start_at: 提交开始申请时间
        :param date submitted_end_at: 提交结束申请时间
        :param str id_number: 证件号码
        :param str ticket_number: 工单编号
        :param str reject_type: 状态[\"INDIVIDUAL_ID(1)、INDIVIDUAL_PASSPORT(2)、ENTERPRISE_LOGO(3)、 ENTERPRISE_LICENSE(4)、INDIVIDUAL_ABNORMAL(5)、ENTERPRISE_ABNORMAL(6)、USER_REPORT_ABNORMAL(7)\"]
        :param str uid: uid
        :param str status: 状态[\"all（全部）、APPLIED（待审核）、ACCEPTED（通过）、REJECTED（未通过）\"]
        :return: GetIndividualAuditListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'submitted_start_at', 'submitted_end_at', 'id_number', 'ticket_number', 'reject_type', 'uid', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_individual_audits_get" % key
                )
            params[key] = val
        del params['kwargs']

        if ('id_number' in params and
                len(params['id_number']) > 20):
            raise ValueError("Invalid value for parameter `id_number` when calling `accounts_individual_audits_get`, length must be less than or equal to `20`")  # noqa: E501
        if ('ticket_number' in params and
                len(params['ticket_number']) > 64):
            raise ValueError("Invalid value for parameter `ticket_number` when calling `accounts_individual_audits_get`, length must be less than or equal to `64`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'submitted_start_at' in params:
            query_params.append(('submittedStartAt', params['submitted_start_at']))  # noqa: E501
        if 'submitted_end_at' in params:
            query_params.append(('submittedEndAt', params['submitted_end_at']))  # noqa: E501
        if 'id_number' in params:
            query_params.append(('idNumber', params['id_number']))  # noqa: E501
        if 'ticket_number' in params:
            query_params.append(('ticketNumber', params['ticket_number']))  # noqa: E501
        if 'reject_type' in params:
            query_params.append(('rejectType', params['reject_type']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/individual-audits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIndividualAuditListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_individual_audits_id_get(self, id, **kwargs):  # noqa: E501
        """获取实名用户审核结果详情 - 李欣  # noqa: E501

        获取实名用户审核结果详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 实名用户审核资料id (required)
        :return: GetIndividualAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_individual_audits_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_individual_audits_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_individual_audits_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取实名用户审核结果详情 - 李欣  # noqa: E501

        获取实名用户审核结果详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 实名用户审核资料id (required)
        :return: GetIndividualAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_individual_audits_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_individual_audits_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/individual-audits/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIndividualAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_individual_audits_post(self, body, **kwargs):  # noqa: E501
        """提交个人用户实名审核 - 李欣  # noqa: E501

        提交个人用户实名审核  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostIndividualAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_individual_audits_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_individual_audits_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def accounts_individual_audits_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """提交个人用户实名审核 - 李欣  # noqa: E501

        提交个人用户实名审核  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostIndividualAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_individual_audits_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_individual_audits_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/individual-audits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_individual_audits_tasks_audit_pending_num_get(self, **kwargs):  # noqa: E501
        """个人用户待审数 - 李欣  # noqa: E501

        个人用户待审数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_tasks_audit_pending_num_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetTasksNumAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_individual_audits_tasks_audit_pending_num_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_individual_audits_tasks_audit_pending_num_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_individual_audits_tasks_audit_pending_num_get_with_http_info(self, **kwargs):  # noqa: E501
        """个人用户待审数 - 李欣  # noqa: E501

        个人用户待审数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_tasks_audit_pending_num_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetTasksNumAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_individual_audits_tasks_audit_pending_num_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/individual-audits/tasks/audit-pending-num', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTasksNumAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_individual_audits_tasks_receive_get(self, **kwargs):  # noqa: E501
        """开始实名审核 - 李欣  # noqa: E501

        开始实名审核  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_tasks_receive_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 实名用户审核资料id（随机审核不需要，进行特殊审核时才需要）
        :return: GetIndividualAuditReceiveTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_individual_audits_tasks_receive_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_individual_audits_tasks_receive_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_individual_audits_tasks_receive_get_with_http_info(self, **kwargs):  # noqa: E501
        """开始实名审核 - 李欣  # noqa: E501

        开始实名审核  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_individual_audits_tasks_receive_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 实名用户审核资料id（随机审核不需要，进行特殊审核时才需要）
        :return: GetIndividualAuditReceiveTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_individual_audits_tasks_receive_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/individual-audits/tasks/receive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIndividualAuditReceiveTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_market_audits_audit_post(self, body, **kwargs):  # noqa: E501
        """提交关闭交易市场审核-初审 - 邹凌威  # noqa: E501

        提交关闭交易市场审核-初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_audit_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostShutdownMarketAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_market_audits_audit_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_market_audits_audit_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def shutdown_market_audits_audit_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """提交关闭交易市场审核-初审 - 邹凌威  # noqa: E501

        提交关闭交易市场审核-初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_audit_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostShutdownMarketAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_market_audits_audit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shutdown_market_audits_audit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shutdown-market-audits/audit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_market_audits_get(self, **kwargs):  # noqa: E501
        """关闭交易市场审核列表 - 邹凌威  # noqa: E501

        关闭交易市场审核列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str submitted_start_at: 提交申请开始时间
        :param str submitted_end_at: 提交申请结束时间
        :param str ticket_number: 工单编号
        :param str exchange_id: 交易所ID
        :param str exchange_name: 交易所名称
        :param str type: 类型audit(初审)、re_audit(复审)、audit_return(初审驳回)、re_audit_return(复审驳回)、approved(通过)
        :param str failure_type: 失败类型
        :return: GetShutdownMarketAuditListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_market_audits_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_market_audits_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def shutdown_market_audits_get_with_http_info(self, **kwargs):  # noqa: E501
        """关闭交易市场审核列表 - 邹凌威  # noqa: E501

        关闭交易市场审核列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str submitted_start_at: 提交申请开始时间
        :param str submitted_end_at: 提交申请结束时间
        :param str ticket_number: 工单编号
        :param str exchange_id: 交易所ID
        :param str exchange_name: 交易所名称
        :param str type: 类型audit(初审)、re_audit(复审)、audit_return(初审驳回)、re_audit_return(复审驳回)、approved(通过)
        :param str failure_type: 失败类型
        :return: GetShutdownMarketAuditListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'submitted_start_at', 'submitted_end_at', 'ticket_number', 'exchange_id', 'exchange_name', 'type', 'failure_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_market_audits_get" % key
                )
            params[key] = val
        del params['kwargs']

        if ('ticket_number' in params and
                len(params['ticket_number']) > 64):
            raise ValueError("Invalid value for parameter `ticket_number` when calling `shutdown_market_audits_get`, length must be less than or equal to `64`")  # noqa: E501
        if ('exchange_name' in params and
                len(params['exchange_name']) > 16):
            raise ValueError("Invalid value for parameter `exchange_name` when calling `shutdown_market_audits_get`, length must be less than or equal to `16`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'submitted_start_at' in params:
            query_params.append(('submittedStartAt', params['submitted_start_at']))  # noqa: E501
        if 'submitted_end_at' in params:
            query_params.append(('submittedEndAt', params['submitted_end_at']))  # noqa: E501
        if 'ticket_number' in params:
            query_params.append(('ticketNumber', params['ticket_number']))  # noqa: E501
        if 'exchange_id' in params:
            query_params.append(('exchangeId', params['exchange_id']))  # noqa: E501
        if 'exchange_name' in params:
            query_params.append(('exchangeName', params['exchange_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'failure_type' in params:
            query_params.append(('failureType', params['failure_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shutdown-market-audits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetShutdownMarketAuditListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_market_audits_id_audit_get(self, id, **kwargs):  # noqa: E501
        """关闭交易市场审核详情-初审 - 邹凌威  # noqa: E501

        关闭交易市场审核详情-初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_id_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 审核Id (required)
        :return: GetShutdownMarketAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_market_audits_id_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_market_audits_id_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shutdown_market_audits_id_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """关闭交易市场审核详情-初审 - 邹凌威  # noqa: E501

        关闭交易市场审核详情-初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_id_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 审核Id (required)
        :return: GetShutdownMarketAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_market_audits_id_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shutdown_market_audits_id_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shutdown-market-audits/{id}/audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetShutdownMarketAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_market_audits_id_re_audit_get(self, id, **kwargs):  # noqa: E501
        """关闭交易市场审核详情-复审 - 邹凌威  # noqa: E501

        关闭交易市场审核详情-复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_id_re_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 审核Id (required)
        :return: GetShutdownMarketReAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_market_audits_id_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_market_audits_id_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shutdown_market_audits_id_re_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """关闭交易市场审核详情-复审 - 邹凌威  # noqa: E501

        关闭交易市场审核详情-复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_id_re_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 审核Id (required)
        :return: GetShutdownMarketReAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_market_audits_id_re_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shutdown_market_audits_id_re_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shutdown-market-audits/{id}/re_audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetShutdownMarketReAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_market_audits_id_tasks_audit_get(self, id, **kwargs):  # noqa: E501
        """关闭交易市场审核初审 - 邹凌威  # noqa: E501

        关闭交易市场审核初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_id_tasks_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 审核Id (required)
        :return: GetShutdownMarketAuditTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_market_audits_id_tasks_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_market_audits_id_tasks_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shutdown_market_audits_id_tasks_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """关闭交易市场审核初审 - 邹凌威  # noqa: E501

        关闭交易市场审核初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_id_tasks_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 审核Id (required)
        :return: GetShutdownMarketAuditTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_market_audits_id_tasks_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shutdown_market_audits_id_tasks_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shutdown-market-audits/{id}/tasks/audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetShutdownMarketAuditTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_market_audits_id_tasks_re_audit_get(self, id, **kwargs):  # noqa: E501
        """关闭交易市场审核复审 - 邹凌威  # noqa: E501

        关闭交易市场审核复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_id_tasks_re_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 审核Id (required)
        :return: GetShutdownMarketReAuditTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_market_audits_id_tasks_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_market_audits_id_tasks_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shutdown_market_audits_id_tasks_re_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """关闭交易市场审核复审 - 邹凌威  # noqa: E501

        关闭交易市场审核复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_id_tasks_re_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 审核Id (required)
        :return: GetShutdownMarketReAuditTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_market_audits_id_tasks_re_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shutdown_market_audits_id_tasks_re_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shutdown-market-audits/{id}/tasks/re_audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetShutdownMarketReAuditTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_market_audits_re_audit_post(self, body, **kwargs):  # noqa: E501
        """提交关闭交易市场审核-复审 - 邹凌威  # noqa: E501

        提交关闭交易市场审核-复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_re_audit_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostShutdownMarketReAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_market_audits_re_audit_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_market_audits_re_audit_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def shutdown_market_audits_re_audit_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """提交关闭交易市场审核-复审 - 邹凌威  # noqa: E501

        提交关闭交易市场审核-复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_market_audits_re_audit_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostShutdownMarketReAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_market_audits_re_audit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `shutdown_market_audits_re_audit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/shutdown-market-audits/re_audit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_audit_post(self, body, **kwargs):  # noqa: E501
        """提交交易所账号审核-初审 - 邹凌威  # noqa: E501

        提交交易所账号审核-初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_audit_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTenantAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_audit_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_audit_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def tenant_audits_audit_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """提交交易所账号审核-初审 - 邹凌威  # noqa: E501

        提交交易所账号审核-初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_audit_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTenantAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_audit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tenant_audits_audit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/audit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_get(self, **kwargs):  # noqa: E501
        """交易所账号审核列表 - 邹凌威  # noqa: E501

        交易所账号审核列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str submitted_start_at: 提交申请开始时间
        :param str submitted_end_at: 提交申请结束时间
        :param str ticket_number: 工单编号
        :param str uid: uid
        :param str exchange_name: 交易所名称
        :param str type: 类型audit(初审)、re_audit(复审)、audit_return(初审驳回)、re_audit_return(复审驳回)、approved(通过)
        :param str failure_type: 失败类型
        :return: GetTenantAuditListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tenant_audits_get_with_http_info(self, **kwargs):  # noqa: E501
        """交易所账号审核列表 - 邹凌威  # noqa: E501

        交易所账号审核列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str submitted_start_at: 提交申请开始时间
        :param str submitted_end_at: 提交申请结束时间
        :param str ticket_number: 工单编号
        :param str uid: uid
        :param str exchange_name: 交易所名称
        :param str type: 类型audit(初审)、re_audit(复审)、audit_return(初审驳回)、re_audit_return(复审驳回)、approved(通过)
        :param str failure_type: 失败类型
        :return: GetTenantAuditListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'submitted_start_at', 'submitted_end_at', 'ticket_number', 'uid', 'exchange_name', 'type', 'failure_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_get" % key
                )
            params[key] = val
        del params['kwargs']

        if ('ticket_number' in params and
                len(params['ticket_number']) > 64):
            raise ValueError("Invalid value for parameter `ticket_number` when calling `tenant_audits_get`, length must be less than or equal to `64`")  # noqa: E501
        if ('uid' in params and
                len(params['uid']) > 32):
            raise ValueError("Invalid value for parameter `uid` when calling `tenant_audits_get`, length must be less than or equal to `32`")  # noqa: E501
        if ('exchange_name' in params and
                len(params['exchange_name']) > 16):
            raise ValueError("Invalid value for parameter `exchange_name` when calling `tenant_audits_get`, length must be less than or equal to `16`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'submitted_start_at' in params:
            query_params.append(('submittedStartAt', params['submitted_start_at']))  # noqa: E501
        if 'submitted_end_at' in params:
            query_params.append(('submittedEndAt', params['submitted_end_at']))  # noqa: E501
        if 'ticket_number' in params:
            query_params.append(('ticketNumber', params['ticket_number']))  # noqa: E501
        if 'uid' in params:
            query_params.append(('uid', params['uid']))  # noqa: E501
        if 'exchange_name' in params:
            query_params.append(('exchangeName', params['exchange_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'failure_type' in params:
            query_params.append(('failureType', params['failure_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantAuditListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_re_audit_post(self, body, **kwargs):  # noqa: E501
        """提交交易所账号审核-复审 - 邹凌威  # noqa: E501

        提交交易所账号审核-复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_re_audit_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTenantReAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_re_audit_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_re_audit_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def tenant_audits_re_audit_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """提交交易所账号审核-复审 - 邹凌威  # noqa: E501

        提交交易所账号审核-复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_re_audit_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostTenantReAuditRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_re_audit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tenant_audits_re_audit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/re_audit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_results_id_company_audit_get(self, id, **kwargs):  # noqa: E501
        """企业认证交易所账号审核详情-初审 - 邹凌威  # noqa: E501

        交易所账号审核详情-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_results_id_company_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantCompanyAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_results_id_company_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_results_id_company_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenant_audits_results_id_company_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """企业认证交易所账号审核详情-初审 - 邹凌威  # noqa: E501

        交易所账号审核详情-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_results_id_company_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantCompanyAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_results_id_company_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenant_audits_results_id_company_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/results/{id}/company/audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantCompanyAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_results_id_company_re_audit_get(self, id, **kwargs):  # noqa: E501
        """企业认证交易所账号审核详情-复审 - 邹凌威  # noqa: E501

        交易所账号审核详情-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_results_id_company_re_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantAuditCompanyReAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_results_id_company_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_results_id_company_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenant_audits_results_id_company_re_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """企业认证交易所账号审核详情-复审 - 邹凌威  # noqa: E501

        交易所账号审核详情-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_results_id_company_re_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantAuditCompanyReAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_results_id_company_re_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenant_audits_results_id_company_re_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/results/{id}/company/re_audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantAuditCompanyReAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_results_id_individual_audit_get(self, id, **kwargs):  # noqa: E501
        """个人认证交易所账号审核详情-初审 - 邹凌威  # noqa: E501

        交易所账号审核详情-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_results_id_individual_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantIndividualAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_results_id_individual_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_results_id_individual_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenant_audits_results_id_individual_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """个人认证交易所账号审核详情-初审 - 邹凌威  # noqa: E501

        交易所账号审核详情-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_results_id_individual_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantIndividualAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_results_id_individual_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenant_audits_results_id_individual_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/results/{id}/individual/audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantIndividualAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_results_id_individual_re_audit_get(self, id, **kwargs):  # noqa: E501
        """个人认证交易所账号审核详情-复审 - 邹凌威  # noqa: E501

        交易所账号审核详情-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_results_id_individual_re_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantAuditIndividualReAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_results_id_individual_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_results_id_individual_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenant_audits_results_id_individual_re_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """个人认证交易所账号审核详情-复审 - 邹凌威  # noqa: E501

        交易所账号审核详情-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_results_id_individual_re_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantAuditIndividualReAuditResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_results_id_individual_re_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenant_audits_results_id_individual_re_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/results/{id}/individual/re_audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantAuditIndividualReAuditResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_tasks_id_company_audit_get(self, id, **kwargs):  # noqa: E501
        """企业认证交易所账号初审 - 邹凌威  # noqa: E501

        企业认证交易所账号初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_tasks_id_company_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantCompanyAuditTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_tasks_id_company_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_tasks_id_company_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenant_audits_tasks_id_company_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """企业认证交易所账号初审 - 邹凌威  # noqa: E501

        企业认证交易所账号初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_tasks_id_company_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantCompanyAuditTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_tasks_id_company_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenant_audits_tasks_id_company_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/tasks/{id}/company/audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantCompanyAuditTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_tasks_id_company_re_audit_get(self, id, **kwargs):  # noqa: E501
        """企业认证交易所账号复审 - 邹凌威  # noqa: E501

        企业认证交易所账号复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_tasks_id_company_re_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantCompanyReAuditTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_tasks_id_company_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_tasks_id_company_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenant_audits_tasks_id_company_re_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """企业认证交易所账号复审 - 邹凌威  # noqa: E501

        企业认证交易所账号复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_tasks_id_company_re_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantCompanyReAuditTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_tasks_id_company_re_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenant_audits_tasks_id_company_re_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/tasks/{id}/company/re_audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantCompanyReAuditTaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_tasks_id_individual_audit_get(self, id, **kwargs):  # noqa: E501
        """个人认证交易所账号初审 - 邹凌威  # noqa: E501

        个人认证交易所账号初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_tasks_id_individual_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantIndividualAuditTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_tasks_id_individual_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_tasks_id_individual_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenant_audits_tasks_id_individual_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """个人认证交易所账号初审 - 邹凌威  # noqa: E501

        个人认证交易所账号初审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_tasks_id_individual_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantIndividualAuditTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_tasks_id_individual_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenant_audits_tasks_id_individual_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/tasks/{id}/individual/audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantIndividualAuditTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_audits_tasks_id_individual_re_audit_get(self, id, **kwargs):  # noqa: E501
        """个人认证交易所账号复审 - 邹凌威  # noqa: E501

        个人认证交易所账号复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_tasks_id_individual_re_audit_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantIndividualReAuditTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_audits_tasks_id_individual_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenant_audits_tasks_id_individual_re_audit_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenant_audits_tasks_id_individual_re_audit_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """个人认证交易所账号复审 - 邹凌威  # noqa: E501

        个人认证交易所账号复审-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_audits_tasks_id_individual_re_audit_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 租户认证审核资料id (required)
        :return: GetTenantIndividualReAuditTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_audits_tasks_id_individual_re_audit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenant_audits_tasks_id_individual_re_audit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tenant-audits/tasks/{id}/individual/re_audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantIndividualReAuditTaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
