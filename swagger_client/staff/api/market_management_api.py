# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.staff.api_client import ApiClient


class MarketManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def markets_get(self, exchange_id, **kwargs):  # noqa: E501
        """获取交易对市场列表-邹凌威  # noqa: E501

        获取交易对市场列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_get(exchange_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange_id: 交易所ID (required)
        :param int page: 页码
        :param str market_mark: 市场标识
        :return: GetMarketListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_get_with_http_info(exchange_id, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_get_with_http_info(exchange_id, **kwargs)  # noqa: E501
            return data

    def markets_get_with_http_info(self, exchange_id, **kwargs):  # noqa: E501
        """获取交易对市场列表-邹凌威  # noqa: E501

        获取交易对市场列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_get_with_http_info(exchange_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange_id: 交易所ID (required)
        :param int page: 页码
        :param str market_mark: 市场标识
        :return: GetMarketListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange_id', 'page', 'market_mark']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange_id' is set
        if ('exchange_id' not in params or
                params['exchange_id'] is None):
            raise ValueError("Missing the required parameter `exchange_id` when calling `markets_get`")  # noqa: E501

        if ('market_mark' in params and
                len(params['market_mark']) > 16):
            raise ValueError("Invalid value for parameter `market_mark` when calling `markets_get`, length must be less than or equal to `16`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'exchange_id' in params:
            query_params.append(('exchangeId', params['exchange_id']))  # noqa: E501
        if 'market_mark' in params:
            query_params.append(('marketMark', params['market_mark']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMarketListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_id_close_put(self, id, remarks, **kwargs):  # noqa: E501
        """关闭市场-邹凌威  # noqa: E501

        关闭市场-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_close_put(id, remarks, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :param str remarks: 备注 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_id_close_put_with_http_info(id, remarks, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_id_close_put_with_http_info(id, remarks, **kwargs)  # noqa: E501
            return data

    def markets_id_close_put_with_http_info(self, id, remarks, **kwargs):  # noqa: E501
        """关闭市场-邹凌威  # noqa: E501

        关闭市场-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_close_put_with_http_info(id, remarks, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :param str remarks: 备注 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'remarks']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_id_close_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `markets_id_close_put`")  # noqa: E501
        # verify the required parameter 'remarks' is set
        if ('remarks' not in params or
                params['remarks'] is None):
            raise ValueError("Missing the required parameter `remarks` when calling `markets_id_close_put`")  # noqa: E501

        if ('remarks' in params and
                len(params['remarks']) > 1024):
            raise ValueError("Invalid value for parameter `remarks` when calling `markets_id_close_put`, length must be less than or equal to `1024`")  # noqa: E501
        if ('remarks' in params and
                len(params['remarks']) < 1):
            raise ValueError("Invalid value for parameter `remarks` when calling `markets_id_close_put`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'remarks' in params:
            query_params.append(('remarks', params['remarks']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets/{id}/close', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_id_open_put(self, id, **kwargs):  # noqa: E501
        """开启市场-邹凌威  # noqa: E501

        开启市场-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_open_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_id_open_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_id_open_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def markets_id_open_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """开启市场-邹凌威  # noqa: E501

        开启市场-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_open_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_id_open_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `markets_id_open_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets/{id}/open', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
