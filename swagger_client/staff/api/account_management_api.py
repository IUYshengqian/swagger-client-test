# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.staff.api_client import ApiClient


class AccountManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accounts_accounts_id_get(self, id, **kwargs):  # noqa: E501
        """获取账号信息详情  # noqa: E501

        获取账户信息详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accounts_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :param str platform_id: 平台id investor:主平台id,tenant:租户id,otc:法币id,venture:项目方id
        :return: GetAccountInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_accounts_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_accounts_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_accounts_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取账号信息详情  # noqa: E501

        获取账户信息详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accounts_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :param str platform_id: 平台id investor:主平台id,tenant:租户id,otc:法币id,venture:项目方id
        :return: GetAccountInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'platform_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_accounts_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_accounts_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'platform_id' in params:
            query_params.append(('platformId', params['platform_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/accounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_company_get(self, id, **kwargs):  # noqa: E501
        """查看账户企业认证信息  # noqa: E501

        查看账户企业认证信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_company_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :return: GetEnterpriseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_company_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_company_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_company_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """查看账户企业认证信息  # noqa: E501

        查看账户企业认证信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_company_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :return: GetEnterpriseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_company_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_company_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/company', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetEnterpriseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_individual_get(self, id, **kwargs):  # noqa: E501
        """查看账户个人认证信息  # noqa: E501

        查看账户个人认证信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_individual_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :return: GetPersonalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_individual_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_individual_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_individual_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """查看账户个人认证信息  # noqa: E501

        查看账户个人认证信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_individual_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :return: GetPersonalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_individual_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_individual_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/individual', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPersonalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_invitees_get(self, id, **kwargs):  # noqa: E501
        """获取邀请好友列表  # noqa: E501

        获取邀请好友列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_invitees_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :param int page: 页码
        :return: GetInviterListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_invitees_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_invitees_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_invitees_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取邀请好友列表  # noqa: E501

        获取邀请好友列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_invitees_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :param int page: 页码
        :return: GetInviterListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_invitees_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_invitees_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/invitees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInviterListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_inviter_get(self, id, **kwargs):  # noqa: E501
        """获取邀请信息  # noqa: E501

        获取邀请信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_inviter_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :return: GetInviterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_inviter_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_inviter_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_inviter_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取邀请信息  # noqa: E501

        获取邀请信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_inviter_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :return: GetInviterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_inviter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_inviter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/inviter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInviterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_lock_account_put(self, id, body, **kwargs):  # noqa: E501
        """锁定用户  # noqa: E501

        锁定用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_lock_account_put(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户ID (required)
        :param PutAccountsLockRequest body: 请求锁定用户 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_lock_account_put_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_lock_account_put_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def accounts_id_lock_account_put_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """锁定用户  # noqa: E501

        锁定用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_lock_account_put_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户ID (required)
        :param PutAccountsLockRequest body: 请求锁定用户 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_lock_account_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_lock_account_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_id_lock_account_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/lock-account', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_rebates_get(self, id, **kwargs):  # noqa: E501
        """邀请好友返佣记录  # noqa: E501

        邀请好友返佣记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_rebates_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :param int page: 页码
        :return: GetRebateListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_rebates_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_rebates_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_rebates_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """邀请好友返佣记录  # noqa: E501

        邀请好友返佣记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_rebates_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账号ID (required)
        :param int page: 页码
        :return: GetRebateListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_rebates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_rebates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/rebates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRebateListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_release_google_delete(self, id, **kwargs):  # noqa: E501
        """解除账号谷歌认证  # noqa: E501

        解除账号谷歌认证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_release_google_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账户ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_release_google_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_release_google_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_release_google_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """解除账号谷歌认证  # noqa: E501

        解除账号谷歌认证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_release_google_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账户ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_release_google_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_release_google_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/release-google', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_reset_phone_put(self, id, **kwargs):  # noqa: E501
        """重置手机号  # noqa: E501

        重置手机号  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_reset_phone_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_reset_phone_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_reset_phone_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_reset_phone_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """重置手机号  # noqa: E501

        重置手机号  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_reset_phone_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_reset_phone_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_reset_phone_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/reset-phone', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_unlock_account_put(self, id, body, **kwargs):  # noqa: E501
        """解锁用户  # noqa: E501

        解锁用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_unlock_account_put(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户ID (required)
        :param PutAccountsUnlockRequest body: 请求解锁用户 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_unlock_account_put_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_unlock_account_put_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def accounts_id_unlock_account_put_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """解锁用户  # noqa: E501

        解锁用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_unlock_account_put_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户ID (required)
        :param PutAccountsUnlockRequest body: 请求解锁用户 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_unlock_account_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_unlock_account_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_id_unlock_account_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}/unlock-account', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_init_captcha_get(self, **kwargs):  # noqa: E501
        """极验初始化  # noqa: E501

        极验初始化  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_init_captcha_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InitCaptchaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_init_captcha_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_init_captcha_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_init_captcha_get_with_http_info(self, **kwargs):  # noqa: E501
        """极验初始化  # noqa: E501

        极验初始化  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_init_captcha_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InitCaptchaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_init_captcha_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/init-captcha', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InitCaptchaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_investors_get(self, **kwargs):  # noqa: E501
        """获取用户列表  # noqa: E501

        获取用户列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_investors_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param date created_start_at: 注册时间起始
        :param date created_end_at: 注册时间结束
        :param str account_id: 账户id
        :param str email: 邮箱
        :param str phone_number: 手机号码
        :param str name: 姓名/企业名称
        :param str nationality_code: 地区
        :param bool is_block: 是否锁定默认传-1
        :param str auth_type: 认证类型 individual:个人, company:企业
        :param str certificated_id: 认证身份 all:全部,user:普通用户,certificated_user:实名用户,tenant:租户用户,venture:项目方用户
        :return: GetInvestorsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_investors_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_investors_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_investors_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户列表  # noqa: E501

        获取用户列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_investors_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param date created_start_at: 注册时间起始
        :param date created_end_at: 注册时间结束
        :param str account_id: 账户id
        :param str email: 邮箱
        :param str phone_number: 手机号码
        :param str name: 姓名/企业名称
        :param str nationality_code: 地区
        :param bool is_block: 是否锁定默认传-1
        :param str auth_type: 认证类型 individual:个人, company:企业
        :param str certificated_id: 认证身份 all:全部,user:普通用户,certificated_user:实名用户,tenant:租户用户,venture:项目方用户
        :return: GetInvestorsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'created_start_at', 'created_end_at', 'account_id', 'email', 'phone_number', 'name', 'nationality_code', 'is_block', 'auth_type', 'certificated_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_investors_get" % key
                )
            params[key] = val
        del params['kwargs']

        if ('email' in params and
                len(params['email']) > 64):
            raise ValueError("Invalid value for parameter `email` when calling `accounts_investors_get`, length must be less than or equal to `64`")  # noqa: E501
        if ('phone_number' in params and
                len(params['phone_number']) > 16):
            raise ValueError("Invalid value for parameter `phone_number` when calling `accounts_investors_get`, length must be less than or equal to `16`")  # noqa: E501
        if ('name' in params and
                len(params['name']) > 50):
            raise ValueError("Invalid value for parameter `name` when calling `accounts_investors_get`, length must be less than or equal to `50`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'created_start_at' in params:
            query_params.append(('createdStartAt', params['created_start_at']))  # noqa: E501
        if 'created_end_at' in params:
            query_params.append(('createdEndAt', params['created_end_at']))  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phoneNumber', params['phone_number']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'nationality_code' in params:
            query_params.append(('nationalityCode', params['nationality_code']))  # noqa: E501
        if 'is_block' in params:
            query_params.append(('isBlock', params['is_block']))  # noqa: E501
        if 'auth_type' in params:
            query_params.append(('authType', params['auth_type']))  # noqa: E501
        if 'certificated_id' in params:
            query_params.append(('certificated_ID', params['certificated_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/investors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInvestorsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_otc_get(self, **kwargs):  # noqa: E501
        """获取otc列表  # noqa: E501

        获取otc列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_otc_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str account_id: 账户id
        :param str nick_name: 昵称
        :param str email: 邮箱
        :param str phone_number: 手机号
        :param str auth_type: 认证类型 normal:普通用户, merchant:商家
        :return: GetOtcResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_otc_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_otc_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_otc_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取otc列表  # noqa: E501

        获取otc列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_otc_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str account_id: 账户id
        :param str nick_name: 昵称
        :param str email: 邮箱
        :param str phone_number: 手机号
        :param str auth_type: 认证类型 normal:普通用户, merchant:商家
        :return: GetOtcResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'account_id', 'nick_name', 'email', 'phone_number', 'auth_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_otc_get" % key
                )
            params[key] = val
        del params['kwargs']

        if ('nick_name' in params and
                len(params['nick_name']) > 16):
            raise ValueError("Invalid value for parameter `nick_name` when calling `accounts_otc_get`, length must be less than or equal to `16`")  # noqa: E501
        if ('email' in params and
                len(params['email']) > 64):
            raise ValueError("Invalid value for parameter `email` when calling `accounts_otc_get`, length must be less than or equal to `64`")  # noqa: E501
        if ('phone_number' in params and
                len(params['phone_number']) > 16):
            raise ValueError("Invalid value for parameter `phone_number` when calling `accounts_otc_get`, length must be less than or equal to `16`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'nick_name' in params:
            query_params.append(('nickName', params['nick_name']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phoneNumber', params['phone_number']))  # noqa: E501
        if 'auth_type' in params:
            query_params.append(('authType', params['auth_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/otc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetOtcResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_send_verification_code_post(self, body, **kwargs):  # noqa: E501
        """发送验证码  # noqa: E501

        绑定手机号码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_send_verification_code_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSendverificationCodeRequest body: 请求手机号码 (required)
        :return: PostCodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_send_verification_code_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_send_verification_code_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def accounts_send_verification_code_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """发送验证码  # noqa: E501

        绑定手机号码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_send_verification_code_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSendverificationCodeRequest body: 请求手机号码 (required)
        :return: PostCodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_send_verification_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_send_verification_code_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/send-verification-code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostCodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_verify_post(self, verify_info, **kwargs):  # noqa: E501
        """验证码验证  # noqa: E501

        验证码验证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_verify_post(verify_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyInfo verify_info: (required)
        :return: VerifyRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_verify_post_with_http_info(verify_info, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_verify_post_with_http_info(verify_info, **kwargs)  # noqa: E501
            return data

    def accounts_verify_post_with_http_info(self, verify_info, **kwargs):  # noqa: E501
        """验证码验证  # noqa: E501

        验证码验证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_verify_post_with_http_info(verify_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VerifyInfo verify_info: (required)
        :return: VerifyRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['verify_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_verify_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'verify_info' is set
        if ('verify_info' not in params or
                params['verify_info'] is None):
            raise ValueError("Missing the required parameter `verify_info` when calling `accounts_verify_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'verify_info' in params:
            body_params = params['verify_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VerifyRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
