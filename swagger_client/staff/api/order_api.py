# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.staff.api_client import ApiClient


class OrderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def admin_order_cancel_times_get(self, user_id, **kwargs):  # noqa: E501
        """查询过去24小时已取消的订单总数  # noqa: E501

        查询过去24小时已取消的订单总数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_cancel_times_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: 用户id (required)
        :return: OrderCancelTimesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_order_cancel_times_get_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_order_cancel_times_get_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def admin_order_cancel_times_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """查询过去24小时已取消的订单总数  # noqa: E501

        查询过去24小时已取消的订单总数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_cancel_times_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: 用户id (required)
        :return: OrderCancelTimesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_order_cancel_times_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `admin_order_cancel_times_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/admin/order/cancel-times', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderCancelTimesResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_order_complete_order_count_get(self, user_id, **kwargs):  # noqa: E501
        """用户总成单数  # noqa: E501

        用户总成单数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_complete_order_count_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: 用户Id (required)
        :return: CompleteOrderCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_order_complete_order_count_get_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_order_complete_order_count_get_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def admin_order_complete_order_count_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """用户总成单数  # noqa: E501

        用户总成单数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_complete_order_count_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: 用户Id (required)
        :return: CompleteOrderCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_order_complete_order_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `admin_order_complete_order_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/admin/order/complete-order-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompleteOrderCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_order_find_page_get(self, **kwargs):  # noqa: E501
        """查询订单列表  # noqa: E501

        查询订单列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_find_page_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param int page_size: 页面大小
        :param str order_start: 下单起始时间 国际时间
        :param str order_end: 下单结束时间 国际时间
        :param str complete_start: 完成时间起始 国际时间
        :param str complete_end: 完成时间截止 国际时间
        :param str ad_id: 广告id
        :param str order_id: 订单id
        :param str currency_code: 币种代码
        :param str operator: 操作人
        :param str pay_note: 付款码
        :param str biz_user_id: 商家id
        :param str user_id: 下单用户id
        :param int type: 类型 0 全部 1 购买 2 出售
        :param int status: 订单状态 0 全部 10 等待支付 20 买家已付款 25 申诉中 30 已完成 35已强制完成 -1 已删除 -2 已取消 -3 已被强制取消
        :return: OrderFindPageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_order_find_page_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.admin_order_find_page_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def admin_order_find_page_get_with_http_info(self, **kwargs):  # noqa: E501
        """查询订单列表  # noqa: E501

        查询订单列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_find_page_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param int page_size: 页面大小
        :param str order_start: 下单起始时间 国际时间
        :param str order_end: 下单结束时间 国际时间
        :param str complete_start: 完成时间起始 国际时间
        :param str complete_end: 完成时间截止 国际时间
        :param str ad_id: 广告id
        :param str order_id: 订单id
        :param str currency_code: 币种代码
        :param str operator: 操作人
        :param str pay_note: 付款码
        :param str biz_user_id: 商家id
        :param str user_id: 下单用户id
        :param int type: 类型 0 全部 1 购买 2 出售
        :param int status: 订单状态 0 全部 10 等待支付 20 买家已付款 25 申诉中 30 已完成 35已强制完成 -1 已删除 -2 已取消 -3 已被强制取消
        :return: OrderFindPageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'order_start', 'order_end', 'complete_start', 'complete_end', 'ad_id', 'order_id', 'currency_code', 'operator', 'pay_note', 'biz_user_id', 'user_id', 'type', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_order_find_page_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_start' in params:
            query_params.append(('orderStart', params['order_start']))  # noqa: E501
        if 'order_end' in params:
            query_params.append(('orderEnd', params['order_end']))  # noqa: E501
        if 'complete_start' in params:
            query_params.append(('completeStart', params['complete_start']))  # noqa: E501
        if 'complete_end' in params:
            query_params.append(('completeEnd', params['complete_end']))  # noqa: E501
        if 'ad_id' in params:
            query_params.append(('adId', params['ad_id']))  # noqa: E501
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'currency_code' in params:
            query_params.append(('currencyCode', params['currency_code']))  # noqa: E501
        if 'operator' in params:
            query_params.append(('operator', params['operator']))  # noqa: E501
        if 'pay_note' in params:
            query_params.append(('payNote', params['pay_note']))  # noqa: E501
        if 'biz_user_id' in params:
            query_params.append(('bizUserId', params['biz_user_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/admin/order/find-page', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderFindPageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_order_force_cancel_order_id_post(self, order_id, **kwargs):  # noqa: E501
        """强制取消订单  # noqa: E501

        强制取消订单  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_force_cancel_order_id_post(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: 订单Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_order_force_cancel_order_id_post_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_order_force_cancel_order_id_post_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def admin_order_force_cancel_order_id_post_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """强制取消订单  # noqa: E501

        强制取消订单  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_force_cancel_order_id_post_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: 订单Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_order_force_cancel_order_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `admin_order_force_cancel_order_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/admin/order/force-cancel/{orderId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_order_force_confirm_order_id_post(self, order_id, **kwargs):  # noqa: E501
        """强制放行订单  # noqa: E501

        强制放行订单  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_force_confirm_order_id_post(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: 订单Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_order_force_confirm_order_id_post_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_order_force_confirm_order_id_post_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def admin_order_force_confirm_order_id_post_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """强制放行订单  # noqa: E501

        强制放行订单  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_force_confirm_order_id_post_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: 订单Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_order_force_confirm_order_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `admin_order_force_confirm_order_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/admin/order/force-confirm/{orderId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_order_reset_cancel_times_user_id_post(self, user_id, **kwargs):  # noqa: E501
        """重置用户取消订单数  # noqa: E501

        重置用户取消订单数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_reset_cancel_times_user_id_post(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: 用户Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_order_reset_cancel_times_user_id_post_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_order_reset_cancel_times_user_id_post_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def admin_order_reset_cancel_times_user_id_post_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """重置用户取消订单数  # noqa: E501

        重置用户取消订单数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_order_reset_cancel_times_user_id_post_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: 用户Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_order_reset_cancel_times_user_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `admin_order_reset_cancel_times_user_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/admin/order/reset-cancel-times/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
