# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.staff.api_client import ApiClient


class AssetManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def asset_mgmt_asset_password_has_set_account_id_get(self, account_id, **kwargs):  # noqa: E501
        """查询是否设置资金密码  # noqa: E501

        查询是否设置资金密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_asset_password_has_set_account_id_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: 账户id (required)
        :return: GetAssetPasswordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_asset_password_has_set_account_id_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_asset_password_has_set_account_id_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_asset_password_has_set_account_id_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """查询是否设置资金密码  # noqa: E501

        查询是否设置资金密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_asset_password_has_set_account_id_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: 账户id (required)
        :return: GetAssetPasswordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_asset_password_has_set_account_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `asset_mgmt_asset_password_has_set_account_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/asset-password/has-set/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAssetPasswordResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_asset_password_reset_id_put(self, id, **kwargs):  # noqa: E501
        """重置资金密码  # noqa: E501

        重置资金密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_asset_password_reset_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_asset_password_reset_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_asset_password_reset_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_asset_password_reset_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """重置资金密码  # noqa: E501

        重置资金密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_asset_password_reset_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_asset_password_reset_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_asset_password_reset_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/asset-password/reset/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_assets_id_get(self, id, **kwargs):  # noqa: E501
        """获取账户资产  # noqa: E501

        获取账户资产  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账户id (required)
        :return: GetAssetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_assets_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_assets_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_assets_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取账户资产  # noqa: E501

        获取账户资产  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 账户id (required)
        :return: GetAssetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_assets_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_assets_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/assets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAssetsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_assets_restriction_get(self, withdraw, otc, **kwargs):  # noqa: E501
        """查询资产限制的用户  # noqa: E501

        查询资产限制的用户列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_restriction_get(withdraw, otc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool withdraw: 提币限制 (required)
        :param bool otc: 法币交易限制 (required)
        :param str start_at: 开始创建时间
        :param str end_at: 结束创建时间
        :param str account_id: accountId
        :param int page: 页码
        :return: GetAccountsRestrictionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_assets_restriction_get_with_http_info(withdraw, otc, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_assets_restriction_get_with_http_info(withdraw, otc, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_assets_restriction_get_with_http_info(self, withdraw, otc, **kwargs):  # noqa: E501
        """查询资产限制的用户  # noqa: E501

        查询资产限制的用户列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_restriction_get_with_http_info(withdraw, otc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool withdraw: 提币限制 (required)
        :param bool otc: 法币交易限制 (required)
        :param str start_at: 开始创建时间
        :param str end_at: 结束创建时间
        :param str account_id: accountId
        :param int page: 页码
        :return: GetAccountsRestrictionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['withdraw', 'otc', 'start_at', 'end_at', 'account_id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_assets_restriction_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'withdraw' is set
        if ('withdraw' not in params or
                params['withdraw'] is None):
            raise ValueError("Missing the required parameter `withdraw` when calling `asset_mgmt_assets_restriction_get`")  # noqa: E501
        # verify the required parameter 'otc' is set
        if ('otc' not in params or
                params['otc'] is None):
            raise ValueError("Missing the required parameter `otc` when calling `asset_mgmt_assets_restriction_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'end_at' in params:
            query_params.append(('endAt', params['end_at']))  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'withdraw' in params:
            query_params.append(('withdraw', params['withdraw']))  # noqa: E501
        if 'otc' in params:
            query_params.append(('otc', params['otc']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/assets/restriction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountsRestrictionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_assets_restriction_id_delete(self, id, **kwargs):  # noqa: E501
        """删除用户的资产限制  # noqa: E501

        删除户的资产限制  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_restriction_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户账号Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_assets_restriction_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_assets_restriction_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_assets_restriction_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """删除用户的资产限制  # noqa: E501

        删除户的资产限制  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_restriction_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户账号Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_assets_restriction_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_assets_restriction_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/assets/restriction/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_assets_restriction_id_get(self, id, **kwargs):  # noqa: E501
        """获取用户的资产限制信息  # noqa: E501

        获取用户的资产限制信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_restriction_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户id (required)
        :return: GetAccountRestrictionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_assets_restriction_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_assets_restriction_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_assets_restriction_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取用户的资产限制信息  # noqa: E501

        获取用户的资产限制信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_restriction_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户id (required)
        :return: GetAccountRestrictionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_assets_restriction_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_assets_restriction_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/assets/restriction/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccountRestrictionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_assets_restriction_id_put(self, id, body, **kwargs):  # noqa: E501
        """设置用户的资产限制  # noqa: E501

        设置用户的资产限制  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_restriction_id_put(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户账号Id (required)
        :param PutAccountsRestrictionRequest body: 请求更新管理 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_assets_restriction_id_put_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_assets_restriction_id_put_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_assets_restriction_id_put_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """设置用户的资产限制  # noqa: E501

        设置用户的资产限制  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_restriction_id_put_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 用户账号Id (required)
        :param PutAccountsRestrictionRequest body: 请求更新管理 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_assets_restriction_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_assets_restriction_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_mgmt_assets_restriction_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/assets/restriction/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_assets_withdraw_address_get(self, account_id, **kwargs):  # noqa: E501
        """获取提币地址  # noqa: E501

        获取提币地址  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_withdraw_address_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: 账户id (required)
        :param int page: 页码
        :return: GetWithdrawAddressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_assets_withdraw_address_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_assets_withdraw_address_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_assets_withdraw_address_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """获取提币地址  # noqa: E501

        获取提币地址  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_assets_withdraw_address_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: 账户id (required)
        :param int page: 页码
        :return: GetWithdrawAddressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_assets_withdraw_address_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `asset_mgmt_assets_withdraw_address_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/assets/withdraw-address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWithdrawAddressResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_coins_get(self, **kwargs):  # noqa: E501
        """币种配置列表 - 博洋  # noqa: E501

        币种配置列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str coin_name: 币种标识
        :return: GetSystemCoinListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_coins_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_coins_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_mgmt_coins_get_with_http_info(self, **kwargs):  # noqa: E501
        """币种配置列表 - 博洋  # noqa: E501

        币种配置列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str coin_name: 币种标识
        :return: GetSystemCoinListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'coin_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_coins_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'coin_name' in params:
            query_params.append(('coinName', params['coin_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/coins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSystemCoinListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_coins_id_get(self, id, **kwargs):  # noqa: E501
        """币种配置详情 - 博洋  # noqa: E501

        币种配置详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :return: GetSystemCoinResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_coins_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_coins_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_coins_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """币种配置详情 - 博洋  # noqa: E501

        币种配置详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :return: GetSystemCoinResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_coins_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_coins_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/coins/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSystemCoinResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_coins_id_init_put(self, id, body, **kwargs):  # noqa: E501
        """初始化币种配置 - 博洋  # noqa: E501

        初始化币种配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_init_put(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param PutSystemCoinsInitRequest body: 币种配置 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_coins_id_init_put_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_coins_id_init_put_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_coins_id_init_put_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """初始化币种配置 - 博洋  # noqa: E501

        初始化币种配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_init_put_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param PutSystemCoinsInitRequest body: 币种配置 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_coins_id_init_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_coins_id_init_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_mgmt_coins_id_init_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/coins/{id}/init', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_coins_id_prompt_get(self, id, **kwargs):  # noqa: E501
        """获取提示信息 - 博洋  # noqa: E501

        获取提示信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_prompt_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :return: GetCoinPromptByCoinId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_coins_id_prompt_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_coins_id_prompt_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_coins_id_prompt_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取提示信息 - 博洋  # noqa: E501

        获取提示信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_prompt_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :return: GetCoinPromptByCoinId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_coins_id_prompt_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_coins_id_prompt_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/coins/{id}/prompt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCoinPromptByCoinId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_coins_id_prompt_put(self, id, body, **kwargs):  # noqa: E501
        """编辑提示 - 博洋  # noqa: E501

        编辑提示  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_prompt_put(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param PutCoinPromptByCoinId body: 币种配置 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_coins_id_prompt_put_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_coins_id_prompt_put_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_coins_id_prompt_put_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """编辑提示 - 博洋  # noqa: E501

        编辑提示  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_prompt_put_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param PutCoinPromptByCoinId body: 币种配置 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_coins_id_prompt_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_coins_id_prompt_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_mgmt_coins_id_prompt_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/coins/{id}/prompt', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_coins_id_put(self, id, body, **kwargs):  # noqa: E501
        """修改币种配置 - 博洋  # noqa: E501

        修改币种配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_put(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param PutSystemCoinsRequest body: 币种配置 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_coins_id_put_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_coins_id_put_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_coins_id_put_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """修改币种配置 - 博洋  # noqa: E501

        修改币种配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_put_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param PutSystemCoinsRequest body: 币种配置 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_coins_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_coins_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_mgmt_coins_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/coins/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_coins_id_recharge_put(self, id, rechargeable, **kwargs):  # noqa: E501
        """是否可充币 - 博洋  # noqa: E501

        是否可充币  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_recharge_put(id, rechargeable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param bool rechargeable: 是否可充币 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_coins_id_recharge_put_with_http_info(id, rechargeable, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_coins_id_recharge_put_with_http_info(id, rechargeable, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_coins_id_recharge_put_with_http_info(self, id, rechargeable, **kwargs):  # noqa: E501
        """是否可充币 - 博洋  # noqa: E501

        是否可充币  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_recharge_put_with_http_info(id, rechargeable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param bool rechargeable: 是否可充币 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rechargeable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_coins_id_recharge_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_coins_id_recharge_put`")  # noqa: E501
        # verify the required parameter 'rechargeable' is set
        if ('rechargeable' not in params or
                params['rechargeable'] is None):
            raise ValueError("Missing the required parameter `rechargeable` when calling `asset_mgmt_coins_id_recharge_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rechargeable' in params:
            query_params.append(('rechargeable', params['rechargeable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/coins/{id}/recharge', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_coins_id_withdraw_put(self, id, withdrawable, **kwargs):  # noqa: E501
        """是否可提币 - 博洋  # noqa: E501

        是否可提币  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_withdraw_put(id, withdrawable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param bool withdrawable: 是否可提币 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_coins_id_withdraw_put_with_http_info(id, withdrawable, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_coins_id_withdraw_put_with_http_info(id, withdrawable, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_coins_id_withdraw_put_with_http_info(self, id, withdrawable, **kwargs):  # noqa: E501
        """是否可提币 - 博洋  # noqa: E501

        是否可提币  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_coins_id_withdraw_put_with_http_info(id, withdrawable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种配置id (required)
        :param bool withdrawable: 是否可提币 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'withdrawable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_coins_id_withdraw_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_coins_id_withdraw_put`")  # noqa: E501
        # verify the required parameter 'withdrawable' is set
        if ('withdrawable' not in params or
                params['withdrawable'] is None):
            raise ValueError("Missing the required parameter `withdrawable` when calling `asset_mgmt_coins_id_withdraw_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'withdrawable' in params:
            query_params.append(('withdrawable', params['withdrawable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/coins/{id}/withdraw', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_journals_get(self, **kwargs):  # noqa: E501
        """获取收支记录  # noqa: E501

        获取收支记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_journals_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str start_at: 时间起始
        :param str end_at: 时间结束
        :param str order_id: 订单编号
        :param str account_id: 账户Id
        :param str coin_id: 币种ID
        :param str subject: 科目
        :return: GetJournalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_journals_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_journals_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_mgmt_journals_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取收支记录  # noqa: E501

        获取收支记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_journals_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str start_at: 时间起始
        :param str end_at: 时间结束
        :param str order_id: 订单编号
        :param str account_id: 账户Id
        :param str coin_id: 币种ID
        :param str subject: 科目
        :return: GetJournalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'start_at', 'end_at', 'order_id', 'account_id', 'coin_id', 'subject']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_journals_get" % key
                )
            params[key] = val
        del params['kwargs']

        if ('order_id' in params and
                len(params['order_id']) > 64):
            raise ValueError("Invalid value for parameter `order_id` when calling `asset_mgmt_journals_get`, length must be less than or equal to `64`")  # noqa: E501
        if ('subject' in params and
                len(params['subject']) > 16):
            raise ValueError("Invalid value for parameter `subject` when calling `asset_mgmt_journals_get`, length must be less than or equal to `16`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'start_at' in params:
            query_params.append(('StartAt', params['start_at']))  # noqa: E501
        if 'end_at' in params:
            query_params.append(('EndAt', params['end_at']))  # noqa: E501
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'coin_id' in params:
            query_params.append(('coinId', params['coin_id']))  # noqa: E501
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/journals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetJournalsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_revenue_get(self, **kwargs):  # noqa: E501
        """查询平台收支  # noqa: E501

        查询平台收支  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_revenue_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date created_at: 开始创建时间
        :param int coin_id: 币id
        :param str type: 类型
        :param int page: 页码
        :return: GetRevenueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_revenue_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_revenue_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_mgmt_revenue_get_with_http_info(self, **kwargs):  # noqa: E501
        """查询平台收支  # noqa: E501

        查询平台收支  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_revenue_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date created_at: 开始创建时间
        :param int coin_id: 币id
        :param str type: 类型
        :param int page: 页码
        :return: GetRevenueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['created_at', 'coin_id', 'type', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_revenue_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'created_at' in params:
            query_params.append(('createdAt', params['created_at']))  # noqa: E501
        if 'coin_id' in params:
            query_params.append(('coinId', params['coin_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/revenue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRevenueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_withdraw_id_first_audit_post(self, id, body, **kwargs):  # noqa: E501
        """提币初审  # noqa: E501

        提币初审  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_withdraw_id_first_audit_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 提币记录id (required)
        :param PostWithdrawFirstAuditRequest body: 提币初审 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_withdraw_id_first_audit_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_withdraw_id_first_audit_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_withdraw_id_first_audit_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """提币初审  # noqa: E501

        提币初审  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_withdraw_id_first_audit_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 提币记录id (required)
        :param PostWithdrawFirstAuditRequest body: 提币初审 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_withdraw_id_first_audit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_withdraw_id_first_audit_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_mgmt_withdraw_id_first_audit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/withdraw/{id}/first-audit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_withdraw_id_second_audit_post(self, id, body, **kwargs):  # noqa: E501
        """提币复审  # noqa: E501

        提币复审  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_withdraw_id_second_audit_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 提币记录id (required)
        :param PostWithdrawSecondAuditRequest body: 提币复审 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_withdraw_id_second_audit_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_withdraw_id_second_audit_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_withdraw_id_second_audit_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """提币复审  # noqa: E501

        提币复审  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_withdraw_id_second_audit_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 提币记录id (required)
        :param PostWithdrawSecondAuditRequest body: 提币复审 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_withdraw_id_second_audit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_withdraw_id_second_audit_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_mgmt_withdraw_id_second_audit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/withdraw/{id}/second-audit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_withdraw_patch_id_post(self, id, body, **kwargs):  # noqa: E501
        """提币补单  # noqa: E501

        提币补单  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_withdraw_patch_id_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 提币记录id (required)
        :param PostWithdrawPatch body: 提币补单 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_withdraw_patch_id_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_withdraw_patch_id_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_withdraw_patch_id_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """提币补单  # noqa: E501

        提币补单  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_withdraw_patch_id_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 提币记录id (required)
        :param PostWithdrawPatch body: 提币补单 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_withdraw_patch_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_withdraw_patch_id_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_mgmt_withdraw_patch_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/withdraw/patch/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_mgmt_withdraw_records_id_get(self, id, **kwargs):  # noqa: E501
        """获取提币记录详情  # noqa: E501

        获取提币记录详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_withdraw_records_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 提币记录id (required)
        :return: GetWithdrawByIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_mgmt_withdraw_records_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_mgmt_withdraw_records_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_mgmt_withdraw_records_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取提币记录详情  # noqa: E501

        获取提币记录详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_mgmt_withdraw_records_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 提币记录id (required)
        :return: GetWithdrawByIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_mgmt_withdraw_records_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_mgmt_withdraw_records_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/withdraw-records/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWithdrawByIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recharge_list(self, **kwargs):  # noqa: E501
        """获取充币记录  # noqa: E501

        获取充币记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recharge_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str created_start_at: 时间起始
        :param str created_end_at: 时间结束
        :param str completed_start_at: 时间起始
        :param str completed_end_at: 时间结束
        :param str txid: 交易哈希
        :param str from_address: 来源地址
        :param str order_id: 充币订单编号
        :param str account_id: 账户Id
        :param str coin_id: 币种Id
        :param str status: 充币状态
        :param int items_per_page: 每页条数
        :return: GetRechargeRecordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recharge_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_recharge_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_recharge_list_with_http_info(self, **kwargs):  # noqa: E501
        """获取充币记录  # noqa: E501

        获取充币记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recharge_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str created_start_at: 时间起始
        :param str created_end_at: 时间结束
        :param str completed_start_at: 时间起始
        :param str completed_end_at: 时间结束
        :param str txid: 交易哈希
        :param str from_address: 来源地址
        :param str order_id: 充币订单编号
        :param str account_id: 账户Id
        :param str coin_id: 币种Id
        :param str status: 充币状态
        :param int items_per_page: 每页条数
        :return: GetRechargeRecordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'created_start_at', 'created_end_at', 'completed_start_at', 'completed_end_at', 'txid', 'from_address', 'order_id', 'account_id', 'coin_id', 'status', 'items_per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recharge_list" % key
                )
            params[key] = val
        del params['kwargs']

        if ('order_id' in params and
                len(params['order_id']) > 64):
            raise ValueError("Invalid value for parameter `order_id` when calling `get_recharge_list`, length must be less than or equal to `64`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'created_start_at' in params:
            query_params.append(('createdStartAt', params['created_start_at']))  # noqa: E501
        if 'created_end_at' in params:
            query_params.append(('createdEndAt', params['created_end_at']))  # noqa: E501
        if 'completed_start_at' in params:
            query_params.append(('completedStartAt', params['completed_start_at']))  # noqa: E501
        if 'completed_end_at' in params:
            query_params.append(('completedEndAt', params['completed_end_at']))  # noqa: E501
        if 'txid' in params:
            query_params.append(('txid', params['txid']))  # noqa: E501
        if 'from_address' in params:
            query_params.append(('fromAddress', params['from_address']))  # noqa: E501
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'coin_id' in params:
            query_params.append(('coinId', params['coin_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'items_per_page' in params:
            query_params.append(('itemsPerPage', params['items_per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/recharge-records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRechargeRecordResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_withdraw_list(self, **kwargs):  # noqa: E501
        """获取提币记录  # noqa: E501

        获取提币记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_withdraw_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param int items_per_page: 每页条数
        :param str submitted_start_at: 提交时间起始
        :param str submitted_end_at: 提交时间结束
        :param str completed_start_at: 完成时间起始
        :param str completed_end_at: 完成时间结束
        :param str order_id: 提币订单编号
        :param str to_address: 目标地址
        :param str txid: 交易哈希
        :param str account_id: 账户Id
        :param str status: 提币状态
        :param str coin_id: 币种Id
        :param str type: 类型
        :return: GetWithdrawRecordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_withdraw_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_withdraw_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_withdraw_list_with_http_info(self, **kwargs):  # noqa: E501
        """获取提币记录  # noqa: E501

        获取提币记录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_withdraw_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param int items_per_page: 每页条数
        :param str submitted_start_at: 提交时间起始
        :param str submitted_end_at: 提交时间结束
        :param str completed_start_at: 完成时间起始
        :param str completed_end_at: 完成时间结束
        :param str order_id: 提币订单编号
        :param str to_address: 目标地址
        :param str txid: 交易哈希
        :param str account_id: 账户Id
        :param str status: 提币状态
        :param str coin_id: 币种Id
        :param str type: 类型
        :return: GetWithdrawRecordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'items_per_page', 'submitted_start_at', 'submitted_end_at', 'completed_start_at', 'completed_end_at', 'order_id', 'to_address', 'txid', 'account_id', 'status', 'coin_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_withdraw_list" % key
                )
            params[key] = val
        del params['kwargs']

        if ('order_id' in params and
                len(params['order_id']) > 64):
            raise ValueError("Invalid value for parameter `order_id` when calling `get_withdraw_list`, length must be less than or equal to `64`")  # noqa: E501
        if ('to_address' in params and
                len(params['to_address']) > 64):
            raise ValueError("Invalid value for parameter `to_address` when calling `get_withdraw_list`, length must be less than or equal to `64`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'items_per_page' in params:
            query_params.append(('itemsPerPage', params['items_per_page']))  # noqa: E501
        if 'submitted_start_at' in params:
            query_params.append(('submittedStartAt', params['submitted_start_at']))  # noqa: E501
        if 'submitted_end_at' in params:
            query_params.append(('submittedEndAt', params['submitted_end_at']))  # noqa: E501
        if 'completed_start_at' in params:
            query_params.append(('completedStartAt', params['completed_start_at']))  # noqa: E501
        if 'completed_end_at' in params:
            query_params.append(('completedEndAt', params['completed_end_at']))  # noqa: E501
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'to_address' in params:
            query_params.append(('toAddress', params['to_address']))  # noqa: E501
        if 'txid' in params:
            query_params.append(('txid', params['txid']))  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'coin_id' in params:
            query_params.append(('coinId', params['coin_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/asset-mgmt/withdraw-records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWithdrawRecordResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
