# coding: utf-8

"""
    crush-staff 平台接口（职员管理平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.staff.api_client import ApiClient


class SystemManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def system_app_version_put(self, body, **kwargs):  # noqa: E501
        """编辑app版本 - 博洋  # noqa: E501

        编辑app版本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_app_version_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutAppVersion body: app版本信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_app_version_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.system_app_version_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def system_app_version_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """编辑app版本 - 博洋  # noqa: E501

        编辑app版本  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_app_version_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PutAppVersion body: app版本信息 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_app_version_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `system_app_version_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/app-version', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_failure_reasons_delete(self, ids, **kwargs):  # noqa: E501
        """弃用审核失败原因  # noqa: E501

        弃用审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_delete(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: id数组 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_failure_reasons_delete_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.system_failure_reasons_delete_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def system_failure_reasons_delete_with_http_info(self, ids, **kwargs):  # noqa: E501
        """弃用审核失败原因  # noqa: E501

        弃用审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_delete_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] ids: id数组 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_failure_reasons_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `system_failure_reasons_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ids' in params:
            body_params = params['ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/failure-reasons', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_failure_reasons_get(self, **kwargs):  # noqa: E501
        """审核失败原因  # noqa: E501

        审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str failure_reason: 失败原因
        :param str type: 原因类型
        :return: GetFailureReasonsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_failure_reasons_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_failure_reasons_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_failure_reasons_get_with_http_info(self, **kwargs):  # noqa: E501
        """审核失败原因  # noqa: E501

        审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str failure_reason: 失败原因
        :param str type: 原因类型
        :return: GetFailureReasonsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['failure_reason', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_failure_reasons_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'failure_reason' in params:
            query_params.append(('failureReason', params['failure_reason']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/failure-reasons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetFailureReasonsListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_failure_reasons_post(self, body, **kwargs):  # noqa: E501
        """新增审核失败原因  # noqa: E501

        新增审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostFailureReasonRequest body: 新增审核失败原因 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_failure_reasons_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.system_failure_reasons_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def system_failure_reasons_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """新增审核失败原因  # noqa: E501

        新增审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostFailureReasonRequest body: 新增审核失败原因 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_failure_reasons_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `system_failure_reasons_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/failure-reasons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_failure_reasons_type_get(self, **kwargs):  # noqa: E501
        """根据类型获取失败原因  # noqa: E501

        审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: 原因类型
        :return: GetFailReasonsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_failure_reasons_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_failure_reasons_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_failure_reasons_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """根据类型获取失败原因  # noqa: E501

        审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: 原因类型
        :return: GetFailReasonsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_failure_reasons_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/failure-reasons/type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetFailReasonsListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_failure_reasons_withdraw_get(self, **kwargs):  # noqa: E501
        """提币审核失败原因  # noqa: E501

        审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_withdraw_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetWithdrawFailReasonsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_failure_reasons_withdraw_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_failure_reasons_withdraw_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_failure_reasons_withdraw_get_with_http_info(self, **kwargs):  # noqa: E501
        """提币审核失败原因  # noqa: E501

        审核失败原因  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_failure_reasons_withdraw_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetWithdrawFailReasonsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_failure_reasons_withdraw_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/failure-reasons/withdraw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWithdrawFailReasonsListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_partition_get(self, **kwargs):  # noqa: E501
        """获取分区列表-邹凌威  # noqa: E501

        获取分区列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_partition_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetPartitionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_partition_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_partition_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_partition_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取分区列表-邹凌威  # noqa: E501

        获取分区列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_partition_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetPartitionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_partition_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/partition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPartitionListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_system_config_get(self, **kwargs):  # noqa: E501
        """获取系统配置 - 博洋  # noqa: E501

        系统配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_system_config_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSystemConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_system_config_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_system_config_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_system_config_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取系统配置 - 博洋  # noqa: E501

        系统配置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_system_config_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSystemConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_system_config_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/system-config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSystemConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_system_config_id_put(self, id, body, **kwargs):  # noqa: E501
        """系统配置设置 - 博洋  # noqa: E501

        系统配置设置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_system_config_id_put(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 配置id (required)
        :param PutSystemConfigRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_system_config_id_put_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.system_system_config_id_put_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def system_system_config_id_put_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """系统配置设置 - 博洋  # noqa: E501

        系统配置设置  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_system_config_id_put_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 配置id (required)
        :param PutSystemConfigRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_system_config_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `system_system_config_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `system_system_config_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/system-config/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_trading_pair_get(self, partition_id, **kwargs):  # noqa: E501
        """交易币对配置列表-邹凌威  # noqa: E501

        交易币对配置列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_trading_pair_get(partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int partition_id: 分区Id (required)
        :param str name: 币种名称
        :param int page: 页码
        :return: GetSystemTradingPairListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_trading_pair_get_with_http_info(partition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.system_trading_pair_get_with_http_info(partition_id, **kwargs)  # noqa: E501
            return data

    def system_trading_pair_get_with_http_info(self, partition_id, **kwargs):  # noqa: E501
        """交易币对配置列表-邹凌威  # noqa: E501

        交易币对配置列表-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_trading_pair_get_with_http_info(partition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int partition_id: 分区Id (required)
        :param str name: 币种名称
        :param int page: 页码
        :return: GetSystemTradingPairListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['partition_id', 'name', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_trading_pair_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'partition_id' is set
        if ('partition_id' not in params or
                params['partition_id'] is None):
            raise ValueError("Missing the required parameter `partition_id` when calling `system_trading_pair_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'partition_id' in params:
            query_params.append(('partitionId', params['partition_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/trading-pair', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSystemTradingPairListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_trading_pair_id_put(self, id, body, **kwargs):  # noqa: E501
        """修改交易币对配置-邹凌威  # noqa: E501

        修改交易币对配置-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_trading_pair_id_put(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :param PutSystemTradingPairListResponse body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_trading_pair_id_put_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.system_trading_pair_id_put_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def system_trading_pair_id_put_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """修改交易币对配置-邹凌威  # noqa: E501

        修改交易币对配置-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_trading_pair_id_put_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id (required)
        :param PutSystemTradingPairListResponse body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_trading_pair_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `system_trading_pair_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `system_trading_pair_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/trading-pair/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_trading_pair_update_list_put(self, price, deep_sharing, no_deep_sharing, **kwargs):  # noqa: E501
        """批量修改交易币对单价-邹凌威  # noqa: E501

        批量修改交易币对单价-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_trading_pair_update_list_put(price, deep_sharing, no_deep_sharing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float price: (required)
        :param bool deep_sharing: (required)
        :param bool no_deep_sharing: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_trading_pair_update_list_put_with_http_info(price, deep_sharing, no_deep_sharing, **kwargs)  # noqa: E501
        else:
            (data) = self.system_trading_pair_update_list_put_with_http_info(price, deep_sharing, no_deep_sharing, **kwargs)  # noqa: E501
            return data

    def system_trading_pair_update_list_put_with_http_info(self, price, deep_sharing, no_deep_sharing, **kwargs):  # noqa: E501
        """批量修改交易币对单价-邹凌威  # noqa: E501

        批量修改交易币对单价-邹凌威  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_trading_pair_update_list_put_with_http_info(price, deep_sharing, no_deep_sharing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float price: (required)
        :param bool deep_sharing: (required)
        :param bool no_deep_sharing: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['price', 'deep_sharing', 'no_deep_sharing']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_trading_pair_update_list_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'price' is set
        if ('price' not in params or
                params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `system_trading_pair_update_list_put`")  # noqa: E501
        # verify the required parameter 'deep_sharing' is set
        if ('deep_sharing' not in params or
                params['deep_sharing'] is None):
            raise ValueError("Missing the required parameter `deep_sharing` when calling `system_trading_pair_update_list_put`")  # noqa: E501
        # verify the required parameter 'no_deep_sharing' is set
        if ('no_deep_sharing' not in params or
                params['no_deep_sharing'] is None):
            raise ValueError("Missing the required parameter `no_deep_sharing` when calling `system_trading_pair_update_list_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'price' in params:
            query_params.append(('price', params['price']))  # noqa: E501
        if 'deep_sharing' in params:
            query_params.append(('deepSharing', params['deep_sharing']))  # noqa: E501
        if 'no_deep_sharing' in params:
            query_params.append(('noDeepSharing', params['no_deep_sharing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/system/trading-pair/update-list', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
