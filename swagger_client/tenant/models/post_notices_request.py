# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostNoticesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'content': 'str',
        'language': 'str'
    }

    attribute_map = {
        'title': 'title',
        'content': 'content',
        'language': 'language'
    }

    def __init__(self, title=None, content=None, language=None):  # noqa: E501
        """PostNoticesRequest - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._content = None
        self._language = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if content is not None:
            self.content = content
        if language is not None:
            self.language = language

    @property
    def title(self):
        """Gets the title of this PostNoticesRequest.  # noqa: E501

        标题  # noqa: E501

        :return: The title of this PostNoticesRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PostNoticesRequest.

        标题  # noqa: E501

        :param title: The title of this PostNoticesRequest.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 16:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `16`")  # noqa: E501
        if title is not None and len(title) < 2:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `2`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this PostNoticesRequest.  # noqa: E501

        公告内容  # noqa: E501

        :return: The content of this PostNoticesRequest.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PostNoticesRequest.

        公告内容  # noqa: E501

        :param content: The content of this PostNoticesRequest.  # noqa: E501
        :type: str
        """
        if content is not None and len(content) > 2048:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `2048`")  # noqa: E501

        self._content = content

    @property
    def language(self):
        """Gets the language of this PostNoticesRequest.  # noqa: E501

        语种：中文zh_cn 英文en_us 马来文ms_my 韩文ko_kr 柬埔寨文km_kh  # noqa: E501

        :return: The language of this PostNoticesRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PostNoticesRequest.

        语种：中文zh_cn 英文en_us 马来文ms_my 韩文ko_kr 柬埔寨文km_kh  # noqa: E501

        :param language: The language of this PostNoticesRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["zh_cn", "en_us", "ms_my", "ko_kr", "km_kh"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostNoticesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostNoticesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
