# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetContactProjectsResponseQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'coin_name': 'str'
    }

    attribute_map = {
        'status': 'status',
        'coin_name': 'coinName'
    }

    def __init__(self, status=None, coin_name=None):  # noqa: E501
        """GetContactProjectsResponseQuery - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._coin_name = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if coin_name is not None:
            self.coin_name = coin_name

    @property
    def status(self):
        """Gets the status of this GetContactProjectsResponseQuery.  # noqa: E501

        查询状态  # noqa: E501

        :return: The status of this GetContactProjectsResponseQuery.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetContactProjectsResponseQuery.

        查询状态  # noqa: E501

        :param status: The status of this GetContactProjectsResponseQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["accepted", "rejected", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def coin_name(self):
        """Gets the coin_name of this GetContactProjectsResponseQuery.  # noqa: E501

        币简称  # noqa: E501

        :return: The coin_name of this GetContactProjectsResponseQuery.  # noqa: E501
        :rtype: str
        """
        return self._coin_name

    @coin_name.setter
    def coin_name(self, coin_name):
        """Sets the coin_name of this GetContactProjectsResponseQuery.

        币简称  # noqa: E501

        :param coin_name: The coin_name of this GetContactProjectsResponseQuery.  # noqa: E501
        :type: str
        """

        self._coin_name = coin_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetContactProjectsResponseQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetContactProjectsResponseQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
