# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetFeeHistoryResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'trade_history_id': 'str',
        'uid': 'str',
        'trading_pair': 'str',
        'fee_rate': 'str',
        'trade_type': 'str',
        'fee_amount': 'str',
        'unit': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'trade_history_id': 'tradeHistoryId',
        'uid': 'uid',
        'trading_pair': 'tradingPair',
        'fee_rate': 'feeRate',
        'trade_type': 'tradeType',
        'fee_amount': 'feeAmount',
        'unit': 'unit'
    }

    def __init__(self, created_at=None, trade_history_id=None, uid=None, trading_pair=None, fee_rate=None, trade_type=None, fee_amount=None, unit=None):  # noqa: E501
        """GetFeeHistoryResponseItems - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._trade_history_id = None
        self._uid = None
        self._trading_pair = None
        self._fee_rate = None
        self._trade_type = None
        self._fee_amount = None
        self._unit = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if trade_history_id is not None:
            self.trade_history_id = trade_history_id
        if uid is not None:
            self.uid = uid
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if fee_rate is not None:
            self.fee_rate = fee_rate
        if trade_type is not None:
            self.trade_type = trade_type
        if fee_amount is not None:
            self.fee_amount = fee_amount
        if unit is not None:
            self.unit = unit

    @property
    def created_at(self):
        """Gets the created_at of this GetFeeHistoryResponseItems.  # noqa: E501

        产生时间  # noqa: E501

        :return: The created_at of this GetFeeHistoryResponseItems.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetFeeHistoryResponseItems.

        产生时间  # noqa: E501

        :param created_at: The created_at of this GetFeeHistoryResponseItems.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def trade_history_id(self):
        """Gets the trade_history_id of this GetFeeHistoryResponseItems.  # noqa: E501

        成交记录编号  # noqa: E501

        :return: The trade_history_id of this GetFeeHistoryResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trade_history_id

    @trade_history_id.setter
    def trade_history_id(self, trade_history_id):
        """Sets the trade_history_id of this GetFeeHistoryResponseItems.

        成交记录编号  # noqa: E501

        :param trade_history_id: The trade_history_id of this GetFeeHistoryResponseItems.  # noqa: E501
        :type: str
        """

        self._trade_history_id = trade_history_id

    @property
    def uid(self):
        """Gets the uid of this GetFeeHistoryResponseItems.  # noqa: E501

        用户ID  # noqa: E501

        :return: The uid of this GetFeeHistoryResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetFeeHistoryResponseItems.

        用户ID  # noqa: E501

        :param uid: The uid of this GetFeeHistoryResponseItems.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def trading_pair(self):
        """Gets the trading_pair of this GetFeeHistoryResponseItems.  # noqa: E501

        交易对 市场  # noqa: E501

        :return: The trading_pair of this GetFeeHistoryResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this GetFeeHistoryResponseItems.

        交易对 市场  # noqa: E501

        :param trading_pair: The trading_pair of this GetFeeHistoryResponseItems.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def fee_rate(self):
        """Gets the fee_rate of this GetFeeHistoryResponseItems.  # noqa: E501

        手续费率  # noqa: E501

        :return: The fee_rate of this GetFeeHistoryResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._fee_rate

    @fee_rate.setter
    def fee_rate(self, fee_rate):
        """Sets the fee_rate of this GetFeeHistoryResponseItems.

        手续费率  # noqa: E501

        :param fee_rate: The fee_rate of this GetFeeHistoryResponseItems.  # noqa: E501
        :type: str
        """

        self._fee_rate = fee_rate

    @property
    def trade_type(self):
        """Gets the trade_type of this GetFeeHistoryResponseItems.  # noqa: E501

        手续费类型   buy币币交易买方,  sell币币交易卖方  # noqa: E501

        :return: The trade_type of this GetFeeHistoryResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trade_type

    @trade_type.setter
    def trade_type(self, trade_type):
        """Sets the trade_type of this GetFeeHistoryResponseItems.

        手续费类型   buy币币交易买方,  sell币币交易卖方  # noqa: E501

        :param trade_type: The trade_type of this GetFeeHistoryResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if trade_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trade_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trade_type, allowed_values)
            )

        self._trade_type = trade_type

    @property
    def fee_amount(self):
        """Gets the fee_amount of this GetFeeHistoryResponseItems.  # noqa: E501

        手续费额  # noqa: E501

        :return: The fee_amount of this GetFeeHistoryResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this GetFeeHistoryResponseItems.

        手续费额  # noqa: E501

        :param fee_amount: The fee_amount of this GetFeeHistoryResponseItems.  # noqa: E501
        :type: str
        """

        self._fee_amount = fee_amount

    @property
    def unit(self):
        """Gets the unit of this GetFeeHistoryResponseItems.  # noqa: E501

        手续费币种名  # noqa: E501

        :return: The unit of this GetFeeHistoryResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GetFeeHistoryResponseItems.

        手续费币种名  # noqa: E501

        :param unit: The unit of this GetFeeHistoryResponseItems.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFeeHistoryResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFeeHistoryResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
