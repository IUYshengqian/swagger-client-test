# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetEnterpriseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'social_code': 'str',
        'name': 'str',
        'phone_number': 'str'
    }

    attribute_map = {
        'company_name': 'companyName',
        'social_code': 'socialCode',
        'name': 'name',
        'phone_number': 'phoneNumber'
    }

    def __init__(self, company_name=None, social_code=None, name=None, phone_number=None):  # noqa: E501
        """GetEnterpriseResponse - a model defined in Swagger"""  # noqa: E501

        self._company_name = None
        self._social_code = None
        self._name = None
        self._phone_number = None
        self.discriminator = None

        if company_name is not None:
            self.company_name = company_name
        if social_code is not None:
            self.social_code = social_code
        if name is not None:
            self.name = name
        if phone_number is not None:
            self.phone_number = phone_number

    @property
    def company_name(self):
        """Gets the company_name of this GetEnterpriseResponse.  # noqa: E501

        企业名字  # noqa: E501

        :return: The company_name of this GetEnterpriseResponse.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this GetEnterpriseResponse.

        企业名字  # noqa: E501

        :param company_name: The company_name of this GetEnterpriseResponse.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def social_code(self):
        """Gets the social_code of this GetEnterpriseResponse.  # noqa: E501

        社会统一编号  # noqa: E501

        :return: The social_code of this GetEnterpriseResponse.  # noqa: E501
        :rtype: str
        """
        return self._social_code

    @social_code.setter
    def social_code(self, social_code):
        """Sets the social_code of this GetEnterpriseResponse.

        社会统一编号  # noqa: E501

        :param social_code: The social_code of this GetEnterpriseResponse.  # noqa: E501
        :type: str
        """

        self._social_code = social_code

    @property
    def name(self):
        """Gets the name of this GetEnterpriseResponse.  # noqa: E501

        联系人  # noqa: E501

        :return: The name of this GetEnterpriseResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetEnterpriseResponse.

        联系人  # noqa: E501

        :param name: The name of this GetEnterpriseResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this GetEnterpriseResponse.  # noqa: E501

        联系电话  # noqa: E501

        :return: The phone_number of this GetEnterpriseResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetEnterpriseResponse.

        联系电话  # noqa: E501

        :param phone_number: The phone_number of this GetEnterpriseResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEnterpriseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEnterpriseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
