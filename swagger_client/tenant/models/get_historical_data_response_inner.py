# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetHistoricalDataResponseInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'highest_price': 'str',
        'open_price': 'str',
        'lowest_price': 'str',
        'close_price': 'str',
        'volume': 'str',
        'time': 'float'
    }

    attribute_map = {
        'highest_price': 'highestPrice',
        'open_price': 'openPrice',
        'lowest_price': 'lowestPrice',
        'close_price': 'closePrice',
        'volume': 'volume',
        'time': 'time'
    }

    def __init__(self, highest_price=None, open_price=None, lowest_price=None, close_price=None, volume=None, time=None):  # noqa: E501
        """GetHistoricalDataResponseInner - a model defined in Swagger"""  # noqa: E501

        self._highest_price = None
        self._open_price = None
        self._lowest_price = None
        self._close_price = None
        self._volume = None
        self._time = None
        self.discriminator = None

        if highest_price is not None:
            self.highest_price = highest_price
        if open_price is not None:
            self.open_price = open_price
        if lowest_price is not None:
            self.lowest_price = lowest_price
        if close_price is not None:
            self.close_price = close_price
        if volume is not None:
            self.volume = volume
        if time is not None:
            self.time = time

    @property
    def highest_price(self):
        """Gets the highest_price of this GetHistoricalDataResponseInner.  # noqa: E501

        最高成交价(USD)  # noqa: E501

        :return: The highest_price of this GetHistoricalDataResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._highest_price

    @highest_price.setter
    def highest_price(self, highest_price):
        """Sets the highest_price of this GetHistoricalDataResponseInner.

        最高成交价(USD)  # noqa: E501

        :param highest_price: The highest_price of this GetHistoricalDataResponseInner.  # noqa: E501
        :type: str
        """

        self._highest_price = highest_price

    @property
    def open_price(self):
        """Gets the open_price of this GetHistoricalDataResponseInner.  # noqa: E501

        开盘价(USD)  # noqa: E501

        :return: The open_price of this GetHistoricalDataResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._open_price

    @open_price.setter
    def open_price(self, open_price):
        """Sets the open_price of this GetHistoricalDataResponseInner.

        开盘价(USD)  # noqa: E501

        :param open_price: The open_price of this GetHistoricalDataResponseInner.  # noqa: E501
        :type: str
        """

        self._open_price = open_price

    @property
    def lowest_price(self):
        """Gets the lowest_price of this GetHistoricalDataResponseInner.  # noqa: E501

        最低成交价(USD)  # noqa: E501

        :return: The lowest_price of this GetHistoricalDataResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._lowest_price

    @lowest_price.setter
    def lowest_price(self, lowest_price):
        """Sets the lowest_price of this GetHistoricalDataResponseInner.

        最低成交价(USD)  # noqa: E501

        :param lowest_price: The lowest_price of this GetHistoricalDataResponseInner.  # noqa: E501
        :type: str
        """

        self._lowest_price = lowest_price

    @property
    def close_price(self):
        """Gets the close_price of this GetHistoricalDataResponseInner.  # noqa: E501

        收盘价(USD)  # noqa: E501

        :return: The close_price of this GetHistoricalDataResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._close_price

    @close_price.setter
    def close_price(self, close_price):
        """Sets the close_price of this GetHistoricalDataResponseInner.

        收盘价(USD)  # noqa: E501

        :param close_price: The close_price of this GetHistoricalDataResponseInner.  # noqa: E501
        :type: str
        """

        self._close_price = close_price

    @property
    def volume(self):
        """Gets the volume of this GetHistoricalDataResponseInner.  # noqa: E501

        成交量  # noqa: E501

        :return: The volume of this GetHistoricalDataResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetHistoricalDataResponseInner.

        成交量  # noqa: E501

        :param volume: The volume of this GetHistoricalDataResponseInner.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def time(self):
        """Gets the time of this GetHistoricalDataResponseInner.  # noqa: E501

        时间戳（毫秒值）  # noqa: E501

        :return: The time of this GetHistoricalDataResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this GetHistoricalDataResponseInner.

        时间戳（毫秒值）  # noqa: E501

        :param time: The time of this GetHistoricalDataResponseInner.  # noqa: E501
        :type: float
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetHistoricalDataResponseInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetHistoricalDataResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
