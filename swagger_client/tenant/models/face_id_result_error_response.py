# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FaceIdResultErrorResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_message': 'str',
        'request_id': 'str'
    }

    attribute_map = {
        'error_message': 'error_message',
        'request_id': 'request_id'
    }

    def __init__(self, error_message=None, request_id=None):  # noqa: E501
        """FaceIdResultErrorResponse - a model defined in Swagger"""  # noqa: E501

        self._error_message = None
        self._request_id = None
        self.discriminator = None

        if error_message is not None:
            self.error_message = error_message
        if request_id is not None:
            self.request_id = request_id

    @property
    def error_message(self):
        """Gets the error_message of this FaceIdResultErrorResponse.  # noqa: E501

        错误消息:   * `RESULT_NOT_FOUND` - 400, 传入的业务编号错误。   * `MISSING_ARGUMENTS: <key>` - 400, 缺少某个必选参数。   * `MISSING_ARGUMENTS: <key>` - 400, 某个参数解析出错（比如必须是数字，但是输入的是非数字字符串; 或者长度过长，etc.）。   * `AUTHENTICATION_ERROR` - 403, api_key和api_secret不匹配。   * `AUTHENTICATION_ERROR:Denied` - 403, api_key被停用、调用次数超限、没有调用此API的权限，或者没有以当前方式调用此API的权限。   * `CONCURRENCY_LIMIT_EXCEEDED` - 403, 并发数超过限制。   * `API_NOT_FOUND` - 404, 所调用的API不存在。   * `INTERNAL_ERROR` - 500,  服务器内部错误，当此类错误发生时请再次请求，如果持续出现此类错误，请及时联系FaceID客服或商务。   # noqa: E501

        :return: The error_message of this FaceIdResultErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this FaceIdResultErrorResponse.

        错误消息:   * `RESULT_NOT_FOUND` - 400, 传入的业务编号错误。   * `MISSING_ARGUMENTS: <key>` - 400, 缺少某个必选参数。   * `MISSING_ARGUMENTS: <key>` - 400, 某个参数解析出错（比如必须是数字，但是输入的是非数字字符串; 或者长度过长，etc.）。   * `AUTHENTICATION_ERROR` - 403, api_key和api_secret不匹配。   * `AUTHENTICATION_ERROR:Denied` - 403, api_key被停用、调用次数超限、没有调用此API的权限，或者没有以当前方式调用此API的权限。   * `CONCURRENCY_LIMIT_EXCEEDED` - 403, 并发数超过限制。   * `API_NOT_FOUND` - 404, 所调用的API不存在。   * `INTERNAL_ERROR` - 500,  服务器内部错误，当此类错误发生时请再次请求，如果持续出现此类错误，请及时联系FaceID客服或商务。   # noqa: E501

        :param error_message: The error_message of this FaceIdResultErrorResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def request_id(self):
        """Gets the request_id of this FaceIdResultErrorResponse.  # noqa: E501

        request id  # noqa: E501

        :return: The request_id of this FaceIdResultErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this FaceIdResultErrorResponse.

        request id  # noqa: E501

        :param request_id: The request_id of this FaceIdResultErrorResponse.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FaceIdResultErrorResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceIdResultErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
