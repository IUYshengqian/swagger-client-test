# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FaceIdResultResponseImages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_idcard_back': 'str',
        'image_idcard_front': 'str',
        'image_best': 'str'
    }

    attribute_map = {
        'image_idcard_back': 'image_idcard_back',
        'image_idcard_front': 'image_idcard_front',
        'image_best': 'image_best'
    }

    def __init__(self, image_idcard_back=None, image_idcard_front=None, image_best=None):  # noqa: E501
        """FaceIdResultResponseImages - a model defined in Swagger"""  # noqa: E501

        self._image_idcard_back = None
        self._image_idcard_front = None
        self._image_best = None
        self.discriminator = None

        if image_idcard_back is not None:
            self.image_idcard_back = image_idcard_back
        if image_idcard_front is not None:
            self.image_idcard_front = image_idcard_front
        if image_best is not None:
            self.image_best = image_best

    @property
    def image_idcard_back(self):
        """Gets the image_idcard_back of this FaceIdResultResponseImages.  # noqa: E501


        :return: The image_idcard_back of this FaceIdResultResponseImages.  # noqa: E501
        :rtype: str
        """
        return self._image_idcard_back

    @image_idcard_back.setter
    def image_idcard_back(self, image_idcard_back):
        """Sets the image_idcard_back of this FaceIdResultResponseImages.


        :param image_idcard_back: The image_idcard_back of this FaceIdResultResponseImages.  # noqa: E501
        :type: str
        """

        self._image_idcard_back = image_idcard_back

    @property
    def image_idcard_front(self):
        """Gets the image_idcard_front of this FaceIdResultResponseImages.  # noqa: E501


        :return: The image_idcard_front of this FaceIdResultResponseImages.  # noqa: E501
        :rtype: str
        """
        return self._image_idcard_front

    @image_idcard_front.setter
    def image_idcard_front(self, image_idcard_front):
        """Sets the image_idcard_front of this FaceIdResultResponseImages.


        :param image_idcard_front: The image_idcard_front of this FaceIdResultResponseImages.  # noqa: E501
        :type: str
        """

        self._image_idcard_front = image_idcard_front

    @property
    def image_best(self):
        """Gets the image_best of this FaceIdResultResponseImages.  # noqa: E501


        :return: The image_best of this FaceIdResultResponseImages.  # noqa: E501
        :rtype: str
        """
        return self._image_best

    @image_best.setter
    def image_best(self, image_best):
        """Sets the image_best of this FaceIdResultResponseImages.


        :param image_best: The image_best of this FaceIdResultResponseImages.  # noqa: E501
        :type: str
        """

        self._image_best = image_best

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FaceIdResultResponseImages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceIdResultResponseImages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
