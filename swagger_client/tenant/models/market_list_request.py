# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MarketListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'created_at_sort': 'str',
        'disabled_at_sort': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'created_at_sort': 'createdAtSort',
        'disabled_at_sort': 'disabledAtSort'
    }

    def __init__(self, symbol=None, created_at_sort=None, disabled_at_sort=None):  # noqa: E501
        """MarketListRequest - a model defined in Swagger"""  # noqa: E501

        self._symbol = None
        self._created_at_sort = None
        self._disabled_at_sort = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if created_at_sort is not None:
            self.created_at_sort = created_at_sort
        if disabled_at_sort is not None:
            self.disabled_at_sort = disabled_at_sort

    @property
    def symbol(self):
        """Gets the symbol of this MarketListRequest.  # noqa: E501

        市场标识  # noqa: E501

        :return: The symbol of this MarketListRequest.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this MarketListRequest.

        市场标识  # noqa: E501

        :param symbol: The symbol of this MarketListRequest.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def created_at_sort(self):
        """Gets the created_at_sort of this MarketListRequest.  # noqa: E501

        创建时间排序类型  # noqa: E501

        :return: The created_at_sort of this MarketListRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_at_sort

    @created_at_sort.setter
    def created_at_sort(self, created_at_sort):
        """Sets the created_at_sort of this MarketListRequest.

        创建时间排序类型  # noqa: E501

        :param created_at_sort: The created_at_sort of this MarketListRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if created_at_sort not in allowed_values:
            raise ValueError(
                "Invalid value for `created_at_sort` ({0}), must be one of {1}"  # noqa: E501
                .format(created_at_sort, allowed_values)
            )

        self._created_at_sort = created_at_sort

    @property
    def disabled_at_sort(self):
        """Gets the disabled_at_sort of this MarketListRequest.  # noqa: E501

        失效时间排序类型  # noqa: E501

        :return: The disabled_at_sort of this MarketListRequest.  # noqa: E501
        :rtype: str
        """
        return self._disabled_at_sort

    @disabled_at_sort.setter
    def disabled_at_sort(self, disabled_at_sort):
        """Sets the disabled_at_sort of this MarketListRequest.

        失效时间排序类型  # noqa: E501

        :param disabled_at_sort: The disabled_at_sort of this MarketListRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if disabled_at_sort not in allowed_values:
            raise ValueError(
                "Invalid value for `disabled_at_sort` ({0}), must be one of {1}"  # noqa: E501
                .format(disabled_at_sort, allowed_values)
            )

        self._disabled_at_sort = disabled_at_sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketListRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
