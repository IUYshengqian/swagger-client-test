# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExchangeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'nationality': 'str',
        'logo_key': 'str',
        'logo_url': 'str',
        'tags': 'str',
        'email': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'name': 'name',
        'nationality': 'nationality',
        'logo_key': 'logoKey',
        'logo_url': 'logoUrl',
        'tags': 'tags',
        'email': 'email',
        'phone': 'phone'
    }

    def __init__(self, name=None, nationality=None, logo_key=None, logo_url=None, tags=None, email=None, phone=None):  # noqa: E501
        """ExchangeRequest - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._nationality = None
        self._logo_key = None
        self._logo_url = None
        self._tags = None
        self._email = None
        self._phone = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if nationality is not None:
            self.nationality = nationality
        if logo_key is not None:
            self.logo_key = logo_key
        if logo_url is not None:
            self.logo_url = logo_url
        if tags is not None:
            self.tags = tags
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone

    @property
    def name(self):
        """Gets the name of this ExchangeRequest.  # noqa: E501

        交易所名字  # noqa: E501

        :return: The name of this ExchangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExchangeRequest.

        交易所名字  # noqa: E501

        :param name: The name of this ExchangeRequest.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 16:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `16`")  # noqa: E501
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `2`")  # noqa: E501

        self._name = name

    @property
    def nationality(self):
        """Gets the nationality of this ExchangeRequest.  # noqa: E501

        交易所国家  # noqa: E501

        :return: The nationality of this ExchangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this ExchangeRequest.

        交易所国家  # noqa: E501

        :param nationality: The nationality of this ExchangeRequest.  # noqa: E501
        :type: str
        """
        if nationality is not None and len(nationality) > 5:
            raise ValueError("Invalid value for `nationality`, length must be less than or equal to `5`")  # noqa: E501
        if nationality is not None and len(nationality) < 2:
            raise ValueError("Invalid value for `nationality`, length must be greater than or equal to `2`")  # noqa: E501

        self._nationality = nationality

    @property
    def logo_key(self):
        """Gets the logo_key of this ExchangeRequest.  # noqa: E501

        交易所logoKey  # noqa: E501

        :return: The logo_key of this ExchangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._logo_key

    @logo_key.setter
    def logo_key(self, logo_key):
        """Sets the logo_key of this ExchangeRequest.

        交易所logoKey  # noqa: E501

        :param logo_key: The logo_key of this ExchangeRequest.  # noqa: E501
        :type: str
        """

        self._logo_key = logo_key

    @property
    def logo_url(self):
        """Gets the logo_url of this ExchangeRequest.  # noqa: E501

        交易所logoUrl  # noqa: E501

        :return: The logo_url of this ExchangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this ExchangeRequest.

        交易所logoUrl  # noqa: E501

        :param logo_url: The logo_url of this ExchangeRequest.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def tags(self):
        """Gets the tags of this ExchangeRequest.  # noqa: E501

        交易所标签  # noqa: E501

        :return: The tags of this ExchangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ExchangeRequest.

        交易所标签  # noqa: E501

        :param tags: The tags of this ExchangeRequest.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def email(self):
        """Gets the email of this ExchangeRequest.  # noqa: E501

        电子邮箱  # noqa: E501

        :return: The email of this ExchangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ExchangeRequest.

        电子邮箱  # noqa: E501

        :param email: The email of this ExchangeRequest.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 64:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `64`")  # noqa: E501
        if email is not None and len(email) < 6:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `6`")  # noqa: E501

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this ExchangeRequest.  # noqa: E501

        电话对象没有字段为空  # noqa: E501

        :return: The phone of this ExchangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ExchangeRequest.

        电话对象没有字段为空  # noqa: E501

        :param phone: The phone of this ExchangeRequest.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExchangeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
