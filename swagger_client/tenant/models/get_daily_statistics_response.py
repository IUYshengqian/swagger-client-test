# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.tenant.models.get_daily_statistics_response_today import GetDailyStatisticsResponseToday  # noqa: F401,E501
from swagger_client.tenant.models.get_daily_statistics_response_yesterday import GetDailyStatisticsResponseYesterday  # noqa: F401,E501


class GetDailyStatisticsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day': 'datetime',
        'today': 'GetDailyStatisticsResponseToday',
        'yesterday': 'GetDailyStatisticsResponseYesterday'
    }

    attribute_map = {
        'day': 'day',
        'today': 'today',
        'yesterday': 'yesterday'
    }

    def __init__(self, day=None, today=None, yesterday=None):  # noqa: E501
        """GetDailyStatisticsResponse - a model defined in Swagger"""  # noqa: E501

        self._day = None
        self._today = None
        self._yesterday = None
        self.discriminator = None

        if day is not None:
            self.day = day
        if today is not None:
            self.today = today
        if yesterday is not None:
            self.yesterday = yesterday

    @property
    def day(self):
        """Gets the day of this GetDailyStatisticsResponse.  # noqa: E501

        当日日期  # noqa: E501

        :return: The day of this GetDailyStatisticsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this GetDailyStatisticsResponse.

        当日日期  # noqa: E501

        :param day: The day of this GetDailyStatisticsResponse.  # noqa: E501
        :type: datetime
        """

        self._day = day

    @property
    def today(self):
        """Gets the today of this GetDailyStatisticsResponse.  # noqa: E501


        :return: The today of this GetDailyStatisticsResponse.  # noqa: E501
        :rtype: GetDailyStatisticsResponseToday
        """
        return self._today

    @today.setter
    def today(self, today):
        """Sets the today of this GetDailyStatisticsResponse.


        :param today: The today of this GetDailyStatisticsResponse.  # noqa: E501
        :type: GetDailyStatisticsResponseToday
        """

        self._today = today

    @property
    def yesterday(self):
        """Gets the yesterday of this GetDailyStatisticsResponse.  # noqa: E501


        :return: The yesterday of this GetDailyStatisticsResponse.  # noqa: E501
        :rtype: GetDailyStatisticsResponseYesterday
        """
        return self._yesterday

    @yesterday.setter
    def yesterday(self, yesterday):
        """Sets the yesterday of this GetDailyStatisticsResponse.


        :param yesterday: The yesterday of this GetDailyStatisticsResponse.  # noqa: E501
        :type: GetDailyStatisticsResponseYesterday
        """

        self._yesterday = yesterday

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDailyStatisticsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDailyStatisticsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
