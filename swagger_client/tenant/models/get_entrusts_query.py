# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetEntrustsQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exchange_id': 'str',
        'trading_pair': 'str',
        'trade_type': 'str',
        'status': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'exchange_id': 'exchangeId',
        'trading_pair': 'tradingPair',
        'trade_type': 'tradeType',
        'status': 'status',
        'uid': 'uid'
    }

    def __init__(self, exchange_id=None, trading_pair=None, trade_type=None, status=None, uid=None):  # noqa: E501
        """GetEntrustsQuery - a model defined in Swagger"""  # noqa: E501

        self._exchange_id = None
        self._trading_pair = None
        self._trade_type = None
        self._status = None
        self._uid = None
        self.discriminator = None

        if exchange_id is not None:
            self.exchange_id = exchange_id
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if trade_type is not None:
            self.trade_type = trade_type
        if status is not None:
            self.status = status
        if uid is not None:
            self.uid = uid

    @property
    def exchange_id(self):
        """Gets the exchange_id of this GetEntrustsQuery.  # noqa: E501

        交易所id  # noqa: E501

        :return: The exchange_id of this GetEntrustsQuery.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this GetEntrustsQuery.

        交易所id  # noqa: E501

        :param exchange_id: The exchange_id of this GetEntrustsQuery.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def trading_pair(self):
        """Gets the trading_pair of this GetEntrustsQuery.  # noqa: E501

        市场  # noqa: E501

        :return: The trading_pair of this GetEntrustsQuery.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this GetEntrustsQuery.

        市场  # noqa: E501

        :param trading_pair: The trading_pair of this GetEntrustsQuery.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def trade_type(self):
        """Gets the trade_type of this GetEntrustsQuery.  # noqa: E501

        交易类型 both 全部   buy 买入   sell 买出  # noqa: E501

        :return: The trade_type of this GetEntrustsQuery.  # noqa: E501
        :rtype: str
        """
        return self._trade_type

    @trade_type.setter
    def trade_type(self, trade_type):
        """Sets the trade_type of this GetEntrustsQuery.

        交易类型 both 全部   buy 买入   sell 买出  # noqa: E501

        :param trade_type: The trade_type of this GetEntrustsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["both", "buy", "sell"]  # noqa: E501
        if trade_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trade_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trade_type, allowed_values)
            )

        self._trade_type = trade_type

    @property
    def status(self):
        """Gets the status of this GetEntrustsQuery.  # noqa: E501

        委托单状态  # noqa: E501

        :return: The status of this GetEntrustsQuery.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetEntrustsQuery.

        委托单状态  # noqa: E501

        :param status: The status of this GetEntrustsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["entrusting", "cancelled", "done", "triggering"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def uid(self):
        """Gets the uid of this GetEntrustsQuery.  # noqa: E501

        用户id  # noqa: E501

        :return: The uid of this GetEntrustsQuery.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetEntrustsQuery.

        用户id  # noqa: E501

        :param uid: The uid of this GetEntrustsQuery.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEntrustsQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEntrustsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
