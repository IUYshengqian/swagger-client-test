# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.tenant.api_client import ApiClient


class DashboardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dashboard_daily_statistics_get(self, **kwargs):  # noqa: E501
        """获取dashboard当日统计数-邹凌威  # noqa: E501

        获取dashboard当日统计数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_daily_statistics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetDailyStatisticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_daily_statistics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_daily_statistics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_daily_statistics_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取dashboard当日统计数-邹凌威  # noqa: E501

        获取dashboard当日统计数  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_daily_statistics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetDailyStatisticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_daily_statistics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/daily-statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDailyStatisticsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_quotation_historical_data_post(self, body, **kwargs):  # noqa: E501
        """获取历史数据  # noqa: E501

        用于K线  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_quotation_historical_data_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetDashboardHistoricalDataRequest body: 获取dashboard成交量 (required)
        :return: GetDashboardHistoricalDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_quotation_historical_data_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_quotation_historical_data_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def dashboard_quotation_historical_data_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """获取历史数据  # noqa: E501

        用于K线  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_quotation_historical_data_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetDashboardHistoricalDataRequest body: 获取dashboard成交量 (required)
        :return: GetDashboardHistoricalDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_quotation_historical_data_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `dashboard_quotation_historical_data_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/quotation/historical-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDashboardHistoricalDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_quotations_summary_get(self, page_no, page_size, **kwargs):  # noqa: E501
        """获取行情列表  # noqa: E501

        获取行情列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_quotations_summary_get(page_no, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_no: 页码 (required)
        :param int page_size: 条数 (required)
        :param str seller_coin: 卖方币种
        :return: GetQuotationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_quotations_summary_get_with_http_info(page_no, page_size, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_quotations_summary_get_with_http_info(page_no, page_size, **kwargs)  # noqa: E501
            return data

    def dashboard_quotations_summary_get_with_http_info(self, page_no, page_size, **kwargs):  # noqa: E501
        """获取行情列表  # noqa: E501

        获取行情列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_quotations_summary_get_with_http_info(page_no, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_no: 页码 (required)
        :param int page_size: 条数 (required)
        :param str seller_coin: 卖方币种
        :return: GetQuotationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_no', 'page_size', 'seller_coin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_quotations_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_no' is set
        if ('page_no' not in params or
                params['page_no'] is None):
            raise ValueError("Missing the required parameter `page_no` when calling `dashboard_quotations_summary_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `dashboard_quotations_summary_get`")  # noqa: E501

        if ('seller_coin' in params and
                len(params['seller_coin']) > 10):
            raise ValueError("Invalid value for parameter `seller_coin` when calling `dashboard_quotations_summary_get`, length must be less than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'seller_coin' in params:
            query_params.append(('sellerCoin', params['seller_coin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/dashboard/quotations/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetQuotationListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
