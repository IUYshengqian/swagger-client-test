# coding: utf-8

"""
    crush-tenant 平台接口(租户平台)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.tenant.api_client import ApiClient


class MarketManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def markets_close_post(self, body, **kwargs):  # noqa: E501
        """关闭市场(待确认关闭原因是否是枚举)-邹凌威  # noqa: E501

        关闭市场  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_close_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMarketCloseRequest body: 请求新建交易对市场 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_close_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_close_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def markets_close_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """关闭市场(待确认关闭原因是否是枚举)-邹凌威  # noqa: E501

        关闭市场  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_close_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostMarketCloseRequest body: 请求新建交易对市场 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_close_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `markets_close_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets/close', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_deep_sharing_verify_get(self, buyer_coin_id, seller_coin_id, **kwargs):  # noqa: E501
        """验证交易对市场是否是深度共享-邹凌威  # noqa: E501

        验证交易对市场是否深度共享  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_deep_sharing_verify_get(buyer_coin_id, seller_coin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str buyer_coin_id: 买方币种ID (required)
        :param str seller_coin_id: 卖方币种ID (required)
        :return: VerifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_deep_sharing_verify_get_with_http_info(buyer_coin_id, seller_coin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_deep_sharing_verify_get_with_http_info(buyer_coin_id, seller_coin_id, **kwargs)  # noqa: E501
            return data

    def markets_deep_sharing_verify_get_with_http_info(self, buyer_coin_id, seller_coin_id, **kwargs):  # noqa: E501
        """验证交易对市场是否是深度共享-邹凌威  # noqa: E501

        验证交易对市场是否深度共享  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_deep_sharing_verify_get_with_http_info(buyer_coin_id, seller_coin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str buyer_coin_id: 买方币种ID (required)
        :param str seller_coin_id: 卖方币种ID (required)
        :return: VerifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['buyer_coin_id', 'seller_coin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_deep_sharing_verify_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'buyer_coin_id' is set
        if ('buyer_coin_id' not in params or
                params['buyer_coin_id'] is None):
            raise ValueError("Missing the required parameter `buyer_coin_id` when calling `markets_deep_sharing_verify_get`")  # noqa: E501
        # verify the required parameter 'seller_coin_id' is set
        if ('seller_coin_id' not in params or
                params['seller_coin_id'] is None):
            raise ValueError("Missing the required parameter `seller_coin_id` when calling `markets_deep_sharing_verify_get`")  # noqa: E501

        if ('buyer_coin_id' in params and
                len(params['buyer_coin_id']) > 32):
            raise ValueError("Invalid value for parameter `buyer_coin_id` when calling `markets_deep_sharing_verify_get`, length must be less than or equal to `32`")  # noqa: E501
        if ('buyer_coin_id' in params and
                len(params['buyer_coin_id']) < 1):
            raise ValueError("Invalid value for parameter `buyer_coin_id` when calling `markets_deep_sharing_verify_get`, length must be greater than or equal to `1`")  # noqa: E501
        if ('seller_coin_id' in params and
                len(params['seller_coin_id']) > 32):
            raise ValueError("Invalid value for parameter `seller_coin_id` when calling `markets_deep_sharing_verify_get`, length must be less than or equal to `32`")  # noqa: E501
        if ('seller_coin_id' in params and
                len(params['seller_coin_id']) < 1):
            raise ValueError("Invalid value for parameter `seller_coin_id` when calling `markets_deep_sharing_verify_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'buyer_coin_id' in params:
            query_params.append(('buyerCoinId', params['buyer_coin_id']))  # noqa: E501
        if 'seller_coin_id' in params:
            query_params.append(('sellerCoinId', params['seller_coin_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/markets/deep-sharing-verify', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VerifyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_get(self, **kwargs):  # noqa: E501
        """获取交易对市场列表-邹凌威  # noqa: E501

        获取交易对市场列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str symbol: 市场标识
        :param str created_at_sort: 创建时间排序类型
        :param str disabled_at_sort: 失效时间排序类型
        :param str status: 状态
        :return: GetMarketListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.markets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def markets_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取交易对市场列表-邹凌威  # noqa: E501

        获取交易对市场列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: 页码
        :param str symbol: 市场标识
        :param str created_at_sort: 创建时间排序类型
        :param str disabled_at_sort: 失效时间排序类型
        :param str status: 状态
        :return: GetMarketListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'symbol', 'created_at_sort', 'disabled_at_sort', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'created_at_sort' in params:
            query_params.append(('createdAtSort', params['created_at_sort']))  # noqa: E501
        if 'disabled_at_sort' in params:
            query_params.append(('disabledAtSort', params['disabled_at_sort']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMarketListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_id_get(self, id, **kwargs):  # noqa: E501
        """获取市场详情-邹凌威  # noqa: E501

        获取市场详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :return: GetMarketResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def markets_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取市场详情-邹凌威  # noqa: E501

        获取市场详情  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :return: GetMarketResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `markets_id_get`")  # noqa: E501

        if ('id' in params and
                len(params['id']) > 32):
            raise ValueError("Invalid value for parameter `id` when calling `markets_id_get`, length must be less than or equal to `32`")  # noqa: E501
        if ('id' in params and
                len(params['id']) < 1):
            raise ValueError("Invalid value for parameter `id` when calling `markets_id_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMarketResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_id_open_put(self, id, **kwargs):  # noqa: E501
        """开启市场(更新状态)-邹凌威  # noqa: E501

        开启市场(更新状态)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_open_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_id_open_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_id_open_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def markets_id_open_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """开启市场(更新状态)-邹凌威  # noqa: E501

        开启市场(更新状态)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_open_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_id_open_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `markets_id_open_put`")  # noqa: E501

        if ('id' in params and
                len(params['id']) > 32):
            raise ValueError("Invalid value for parameter `id` when calling `markets_id_open_put`, length must be less than or equal to `32`")  # noqa: E501
        if ('id' in params and
                len(params['id']) < 1):
            raise ValueError("Invalid value for parameter `id` when calling `markets_id_open_put`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets/{id}/open', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_id_put(self, id, fee_rate, **kwargs):  # noqa: E501
        """修改市场信息-邹凌威  # noqa: E501

        修改市场信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_put(id, fee_rate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :param str fee_rate: 手续费率 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_id_put_with_http_info(id, fee_rate, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_id_put_with_http_info(id, fee_rate, **kwargs)  # noqa: E501
            return data

    def markets_id_put_with_http_info(self, id, fee_rate, **kwargs):  # noqa: E501
        """修改市场信息-邹凌威  # noqa: E501

        修改市场信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_id_put_with_http_info(id, fee_rate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 市场ID (required)
        :param str fee_rate: 手续费率 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fee_rate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `markets_id_put`")  # noqa: E501
        # verify the required parameter 'fee_rate' is set
        if ('fee_rate' not in params or
                params['fee_rate'] is None):
            raise ValueError("Missing the required parameter `fee_rate` when calling `markets_id_put`")  # noqa: E501

        if ('id' in params and
                len(params['id']) > 32):
            raise ValueError("Invalid value for parameter `id` when calling `markets_id_put`, length must be less than or equal to `32`")  # noqa: E501
        if ('id' in params and
                len(params['id']) < 1):
            raise ValueError("Invalid value for parameter `id` when calling `markets_id_put`, length must be greater than or equal to `1`")  # noqa: E501
        if ('fee_rate' in params and
                len(params['fee_rate']) > 16):
            raise ValueError("Invalid value for parameter `fee_rate` when calling `markets_id_put`, length must be less than or equal to `16`")  # noqa: E501
        if ('fee_rate' in params and
                len(params['fee_rate']) < 1):
            raise ValueError("Invalid value for parameter `fee_rate` when calling `markets_id_put`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fee_rate' in params:
            query_params.append(('feeRate', params['fee_rate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_price_get(self, buyer_coin_id, seller_coin_id, **kwargs):  # noqa: E501
        """获取交易对市场单价-邹凌威  # noqa: E501

        获取交易对市场单价  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_price_get(buyer_coin_id, seller_coin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str buyer_coin_id: 买方币种ID (required)
        :param str seller_coin_id: 卖方币种ID (required)
        :return: MarketPrice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_price_get_with_http_info(buyer_coin_id, seller_coin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_price_get_with_http_info(buyer_coin_id, seller_coin_id, **kwargs)  # noqa: E501
            return data

    def markets_price_get_with_http_info(self, buyer_coin_id, seller_coin_id, **kwargs):  # noqa: E501
        """获取交易对市场单价-邹凌威  # noqa: E501

        获取交易对市场单价  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_price_get_with_http_info(buyer_coin_id, seller_coin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str buyer_coin_id: 买方币种ID (required)
        :param str seller_coin_id: 卖方币种ID (required)
        :return: MarketPrice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['buyer_coin_id', 'seller_coin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_price_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'buyer_coin_id' is set
        if ('buyer_coin_id' not in params or
                params['buyer_coin_id'] is None):
            raise ValueError("Missing the required parameter `buyer_coin_id` when calling `markets_price_get`")  # noqa: E501
        # verify the required parameter 'seller_coin_id' is set
        if ('seller_coin_id' not in params or
                params['seller_coin_id'] is None):
            raise ValueError("Missing the required parameter `seller_coin_id` when calling `markets_price_get`")  # noqa: E501

        if ('buyer_coin_id' in params and
                len(params['buyer_coin_id']) > 32):
            raise ValueError("Invalid value for parameter `buyer_coin_id` when calling `markets_price_get`, length must be less than or equal to `32`")  # noqa: E501
        if ('buyer_coin_id' in params and
                len(params['buyer_coin_id']) < 1):
            raise ValueError("Invalid value for parameter `buyer_coin_id` when calling `markets_price_get`, length must be greater than or equal to `1`")  # noqa: E501
        if ('seller_coin_id' in params and
                len(params['seller_coin_id']) > 32):
            raise ValueError("Invalid value for parameter `seller_coin_id` when calling `markets_price_get`, length must be less than or equal to `32`")  # noqa: E501
        if ('seller_coin_id' in params and
                len(params['seller_coin_id']) < 1):
            raise ValueError("Invalid value for parameter `seller_coin_id` when calling `markets_price_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'buyer_coin_id' in params:
            query_params.append(('buyerCoinId', params['buyer_coin_id']))  # noqa: E501
        if 'seller_coin_id' in params:
            query_params.append(('sellerCoinId', params['seller_coin_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets/price', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketPrice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_trading_coins_get(self, **kwargs):  # noqa: E501
        """获取交易币种-邹凌威  # noqa: E501

        获取交易币种  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_trading_coins_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TradingCoins
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_trading_coins_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.markets_trading_coins_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def markets_trading_coins_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取交易币种-邹凌威  # noqa: E501

        获取交易币种  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_trading_coins_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TradingCoins
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_trading_coins_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/markets/trading-coins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TradingCoins',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets_trading_coins_verify_get(self, buyer_coin_id, seller_coin_id, **kwargs):  # noqa: E501
        """验证交易对市场是否存在-邹凌威  # noqa: E501

        验证交易对市场是否存在  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_trading_coins_verify_get(buyer_coin_id, seller_coin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str buyer_coin_id: 买方币种ID (required)
        :param str seller_coin_id: 卖方币种ID (required)
        :return: VerifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_trading_coins_verify_get_with_http_info(buyer_coin_id, seller_coin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.markets_trading_coins_verify_get_with_http_info(buyer_coin_id, seller_coin_id, **kwargs)  # noqa: E501
            return data

    def markets_trading_coins_verify_get_with_http_info(self, buyer_coin_id, seller_coin_id, **kwargs):  # noqa: E501
        """验证交易对市场是否存在-邹凌威  # noqa: E501

        验证交易对市场是否存在  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_trading_coins_verify_get_with_http_info(buyer_coin_id, seller_coin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str buyer_coin_id: 买方币种ID (required)
        :param str seller_coin_id: 卖方币种ID (required)
        :return: VerifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['buyer_coin_id', 'seller_coin_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets_trading_coins_verify_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'buyer_coin_id' is set
        if ('buyer_coin_id' not in params or
                params['buyer_coin_id'] is None):
            raise ValueError("Missing the required parameter `buyer_coin_id` when calling `markets_trading_coins_verify_get`")  # noqa: E501
        # verify the required parameter 'seller_coin_id' is set
        if ('seller_coin_id' not in params or
                params['seller_coin_id'] is None):
            raise ValueError("Missing the required parameter `seller_coin_id` when calling `markets_trading_coins_verify_get`")  # noqa: E501

        if ('buyer_coin_id' in params and
                len(params['buyer_coin_id']) > 32):
            raise ValueError("Invalid value for parameter `buyer_coin_id` when calling `markets_trading_coins_verify_get`, length must be less than or equal to `32`")  # noqa: E501
        if ('buyer_coin_id' in params and
                len(params['buyer_coin_id']) < 1):
            raise ValueError("Invalid value for parameter `buyer_coin_id` when calling `markets_trading_coins_verify_get`, length must be greater than or equal to `1`")  # noqa: E501
        if ('seller_coin_id' in params and
                len(params['seller_coin_id']) > 32):
            raise ValueError("Invalid value for parameter `seller_coin_id` when calling `markets_trading_coins_verify_get`, length must be less than or equal to `32`")  # noqa: E501
        if ('seller_coin_id' in params and
                len(params['seller_coin_id']) < 1):
            raise ValueError("Invalid value for parameter `seller_coin_id` when calling `markets_trading_coins_verify_get`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'buyer_coin_id' in params:
            query_params.append(('buyerCoinId', params['buyer_coin_id']))  # noqa: E501
        if 'seller_coin_id' in params:
            query_params.append(('sellerCoinId', params['seller_coin_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/markets/trading-coins-verify', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VerifyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_rate_get(self, **kwargs):  # noqa: E501
        """获取交易服务费率-邹凌威  # noqa: E501

        获取交易服务费率  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_rate_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ServiceRate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_rate_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.service_rate_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def service_rate_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取交易服务费率-邹凌威  # noqa: E501

        获取交易服务费率  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_rate_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ServiceRate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_rate_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/service-rate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceRate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
