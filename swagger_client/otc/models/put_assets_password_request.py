# coding: utf-8

"""
    crush-otc 平台接口（法币交易）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PutAssetsPasswordRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'str',
        'tra_password': 'str',
        'base_token': 'str'
    }

    attribute_map = {
        'password': 'password',
        'tra_password': 'traPassword',
        'base_token': 'baseToken'
    }

    def __init__(self, password=None, tra_password=None, base_token=None):  # noqa: E501
        """PutAssetsPasswordRequest - a model defined in Swagger"""  # noqa: E501

        self._password = None
        self._tra_password = None
        self._base_token = None
        self.discriminator = None

        if password is not None:
            self.password = password
        if tra_password is not None:
            self.tra_password = tra_password
        if base_token is not None:
            self.base_token = base_token

    @property
    def password(self):
        """Gets the password of this PutAssetsPasswordRequest.  # noqa: E501

        登录密码  # noqa: E501

        :return: The password of this PutAssetsPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PutAssetsPasswordRequest.

        登录密码  # noqa: E501

        :param password: The password of this PutAssetsPasswordRequest.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 16:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `16`")  # noqa: E501
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")  # noqa: E501

        self._password = password

    @property
    def tra_password(self):
        """Gets the tra_password of this PutAssetsPasswordRequest.  # noqa: E501

        新密码  # noqa: E501

        :return: The tra_password of this PutAssetsPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._tra_password

    @tra_password.setter
    def tra_password(self, tra_password):
        """Sets the tra_password of this PutAssetsPasswordRequest.

        新密码  # noqa: E501

        :param tra_password: The tra_password of this PutAssetsPasswordRequest.  # noqa: E501
        :type: str
        """
        if tra_password is not None and len(tra_password) > 16:
            raise ValueError("Invalid value for `tra_password`, length must be less than or equal to `16`")  # noqa: E501
        if tra_password is not None and len(tra_password) < 8:
            raise ValueError("Invalid value for `tra_password`, length must be greater than or equal to `8`")  # noqa: E501

        self._tra_password = tra_password

    @property
    def base_token(self):
        """Gets the base_token of this PutAssetsPasswordRequest.  # noqa: E501

        baseToken  # noqa: E501

        :return: The base_token of this PutAssetsPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._base_token

    @base_token.setter
    def base_token(self, base_token):
        """Sets the base_token of this PutAssetsPasswordRequest.

        baseToken  # noqa: E501

        :param base_token: The base_token of this PutAssetsPasswordRequest.  # noqa: E501
        :type: str
        """
        if base_token is not None and len(base_token) > 200:
            raise ValueError("Invalid value for `base_token`, length must be less than or equal to `200`")  # noqa: E501

        self._base_token = base_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutAssetsPasswordRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutAssetsPasswordRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
