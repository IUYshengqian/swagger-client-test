# coding: utf-8

"""
    crush-otc 平台接口（法币交易）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostBindPhoneRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_number': 'str',
        'verification_code': 'str',
        'area_code': 'str',
        'token': 'str'
    }

    attribute_map = {
        'phone_number': 'phoneNumber',
        'verification_code': 'verificationCode',
        'area_code': 'areaCode',
        'token': 'token'
    }

    def __init__(self, phone_number=None, verification_code=None, area_code=None, token=None):  # noqa: E501
        """PostBindPhoneRequest - a model defined in Swagger"""  # noqa: E501

        self._phone_number = None
        self._verification_code = None
        self._area_code = None
        self._token = None
        self.discriminator = None

        self.phone_number = phone_number
        self.verification_code = verification_code
        self.area_code = area_code
        if token is not None:
            self.token = token

    @property
    def phone_number(self):
        """Gets the phone_number of this PostBindPhoneRequest.  # noqa: E501

        手机号  # noqa: E501

        :return: The phone_number of this PostBindPhoneRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PostBindPhoneRequest.

        手机号  # noqa: E501

        :param phone_number: The phone_number of this PostBindPhoneRequest.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501
        if phone_number is not None and len(phone_number) > 16:
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `16`")  # noqa: E501
        if phone_number is not None and len(phone_number) < 8:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `8`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def verification_code(self):
        """Gets the verification_code of this PostBindPhoneRequest.  # noqa: E501

        验证码  # noqa: E501

        :return: The verification_code of this PostBindPhoneRequest.  # noqa: E501
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this PostBindPhoneRequest.

        验证码  # noqa: E501

        :param verification_code: The verification_code of this PostBindPhoneRequest.  # noqa: E501
        :type: str
        """
        if verification_code is None:
            raise ValueError("Invalid value for `verification_code`, must not be `None`")  # noqa: E501
        if verification_code is not None and len(verification_code) > 6:
            raise ValueError("Invalid value for `verification_code`, length must be less than or equal to `6`")  # noqa: E501
        if verification_code is not None and len(verification_code) < 6:
            raise ValueError("Invalid value for `verification_code`, length must be greater than or equal to `6`")  # noqa: E501

        self._verification_code = verification_code

    @property
    def area_code(self):
        """Gets the area_code of this PostBindPhoneRequest.  # noqa: E501

        地区  # noqa: E501

        :return: The area_code of this PostBindPhoneRequest.  # noqa: E501
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this PostBindPhoneRequest.

        地区  # noqa: E501

        :param area_code: The area_code of this PostBindPhoneRequest.  # noqa: E501
        :type: str
        """
        if area_code is None:
            raise ValueError("Invalid value for `area_code`, must not be `None`")  # noqa: E501
        if area_code is not None and len(area_code) > 128:
            raise ValueError("Invalid value for `area_code`, length must be less than or equal to `128`")  # noqa: E501
        if area_code is not None and len(area_code) < 2:
            raise ValueError("Invalid value for `area_code`, length must be greater than or equal to `2`")  # noqa: E501

        self._area_code = area_code

    @property
    def token(self):
        """Gets the token of this PostBindPhoneRequest.  # noqa: E501

        二次验证token  # noqa: E501

        :return: The token of this PostBindPhoneRequest.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PostBindPhoneRequest.

        二次验证token  # noqa: E501

        :param token: The token of this PostBindPhoneRequest.  # noqa: E501
        :type: str
        """
        if token is not None and len(token) > 256:
            raise ValueError("Invalid value for `token`, length must be less than or equal to `256`")  # noqa: E501
        if token is not None and len(token) < 10:
            raise ValueError("Invalid value for `token`, length must be greater than or equal to `10`")  # noqa: E501

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostBindPhoneRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostBindPhoneRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
