# coding: utf-8

"""
    crush-otc 平台接口（法币交易）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateAdvertisementRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_id': 'str',
        'price': 'str',
        'min_limit': 'str',
        'max_limit': 'str',
        'remark': 'str',
        'paymode_list': 'str',
        'asset_password': 'str'
    }

    attribute_map = {
        'ad_id': 'adId',
        'price': 'price',
        'min_limit': 'minLimit',
        'max_limit': 'maxLimit',
        'remark': 'remark',
        'paymode_list': 'paymodeList',
        'asset_password': 'assetPassword'
    }

    def __init__(self, ad_id=None, price=None, min_limit=None, max_limit=None, remark=None, paymode_list=None, asset_password=None):  # noqa: E501
        """UpdateAdvertisementRequest - a model defined in Swagger"""  # noqa: E501

        self._ad_id = None
        self._price = None
        self._min_limit = None
        self._max_limit = None
        self._remark = None
        self._paymode_list = None
        self._asset_password = None
        self.discriminator = None

        if ad_id is not None:
            self.ad_id = ad_id
        if price is not None:
            self.price = price
        if min_limit is not None:
            self.min_limit = min_limit
        if max_limit is not None:
            self.max_limit = max_limit
        if remark is not None:
            self.remark = remark
        if paymode_list is not None:
            self.paymode_list = paymode_list
        if asset_password is not None:
            self.asset_password = asset_password

    @property
    def ad_id(self):
        """Gets the ad_id of this UpdateAdvertisementRequest.  # noqa: E501

        广告id  # noqa: E501

        :return: The ad_id of this UpdateAdvertisementRequest.  # noqa: E501
        :rtype: str
        """
        return self._ad_id

    @ad_id.setter
    def ad_id(self, ad_id):
        """Sets the ad_id of this UpdateAdvertisementRequest.

        广告id  # noqa: E501

        :param ad_id: The ad_id of this UpdateAdvertisementRequest.  # noqa: E501
        :type: str
        """

        self._ad_id = ad_id

    @property
    def price(self):
        """Gets the price of this UpdateAdvertisementRequest.  # noqa: E501

        价格  # noqa: E501

        :return: The price of this UpdateAdvertisementRequest.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this UpdateAdvertisementRequest.

        价格  # noqa: E501

        :param price: The price of this UpdateAdvertisementRequest.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def min_limit(self):
        """Gets the min_limit of this UpdateAdvertisementRequest.  # noqa: E501

        最小交易额度  # noqa: E501

        :return: The min_limit of this UpdateAdvertisementRequest.  # noqa: E501
        :rtype: str
        """
        return self._min_limit

    @min_limit.setter
    def min_limit(self, min_limit):
        """Sets the min_limit of this UpdateAdvertisementRequest.

        最小交易额度  # noqa: E501

        :param min_limit: The min_limit of this UpdateAdvertisementRequest.  # noqa: E501
        :type: str
        """

        self._min_limit = min_limit

    @property
    def max_limit(self):
        """Gets the max_limit of this UpdateAdvertisementRequest.  # noqa: E501

        最大交易额度  # noqa: E501

        :return: The max_limit of this UpdateAdvertisementRequest.  # noqa: E501
        :rtype: str
        """
        return self._max_limit

    @max_limit.setter
    def max_limit(self, max_limit):
        """Sets the max_limit of this UpdateAdvertisementRequest.

        最大交易额度  # noqa: E501

        :param max_limit: The max_limit of this UpdateAdvertisementRequest.  # noqa: E501
        :type: str
        """

        self._max_limit = max_limit

    @property
    def remark(self):
        """Gets the remark of this UpdateAdvertisementRequest.  # noqa: E501

        交易备注  # noqa: E501

        :return: The remark of this UpdateAdvertisementRequest.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this UpdateAdvertisementRequest.

        交易备注  # noqa: E501

        :param remark: The remark of this UpdateAdvertisementRequest.  # noqa: E501
        :type: str
        """
        if remark is not None and len(remark) > 200:
            raise ValueError("Invalid value for `remark`, length must be less than or equal to `200`")  # noqa: E501
        if remark is not None and len(remark) < 0:
            raise ValueError("Invalid value for `remark`, length must be greater than or equal to `0`")  # noqa: E501

        self._remark = remark

    @property
    def paymode_list(self):
        """Gets the paymode_list of this UpdateAdvertisementRequest.  # noqa: E501

        支付方式列表 以逗号分割的id字符串 如11,22,33  # noqa: E501

        :return: The paymode_list of this UpdateAdvertisementRequest.  # noqa: E501
        :rtype: str
        """
        return self._paymode_list

    @paymode_list.setter
    def paymode_list(self, paymode_list):
        """Sets the paymode_list of this UpdateAdvertisementRequest.

        支付方式列表 以逗号分割的id字符串 如11,22,33  # noqa: E501

        :param paymode_list: The paymode_list of this UpdateAdvertisementRequest.  # noqa: E501
        :type: str
        """

        self._paymode_list = paymode_list

    @property
    def asset_password(self):
        """Gets the asset_password of this UpdateAdvertisementRequest.  # noqa: E501

        资金密码  # noqa: E501

        :return: The asset_password of this UpdateAdvertisementRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_password

    @asset_password.setter
    def asset_password(self, asset_password):
        """Sets the asset_password of this UpdateAdvertisementRequest.

        资金密码  # noqa: E501

        :param asset_password: The asset_password of this UpdateAdvertisementRequest.  # noqa: E501
        :type: str
        """

        self._asset_password = asset_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAdvertisementRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAdvertisementRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
