# coding: utf-8

"""
    crush-otc 平台接口（法币交易）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostPaymodeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'int',
        'account': 'str',
        'qrcode': 'str',
        'bank_name': 'str',
        'branch_name': 'str',
        'asset_password': 'str'
    }

    attribute_map = {
        'type': 'type',
        'account': 'account',
        'qrcode': 'qrcode',
        'bank_name': 'bankName',
        'branch_name': 'branchName',
        'asset_password': 'assetPassword'
    }

    def __init__(self, type=None, account=None, qrcode=None, bank_name=None, branch_name=None, asset_password=None):  # noqa: E501
        """PostPaymodeRequest - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._account = None
        self._qrcode = None
        self._bank_name = None
        self._branch_name = None
        self._asset_password = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if account is not None:
            self.account = account
        if qrcode is not None:
            self.qrcode = qrcode
        if bank_name is not None:
            self.bank_name = bank_name
        if branch_name is not None:
            self.branch_name = branch_name
        if asset_password is not None:
            self.asset_password = asset_password

    @property
    def type(self):
        """Gets the type of this PostPaymodeRequest.  # noqa: E501

        支付类型 1 微信  2 支付宝 3 银行  # noqa: E501

        :return: The type of this PostPaymodeRequest.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostPaymodeRequest.

        支付类型 1 微信  2 支付宝 3 银行  # noqa: E501

        :param type: The type of this PostPaymodeRequest.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def account(self):
        """Gets the account of this PostPaymodeRequest.  # noqa: E501

        账号 微信支付宝或者银行卡号  # noqa: E501

        :return: The account of this PostPaymodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this PostPaymodeRequest.

        账号 微信支付宝或者银行卡号  # noqa: E501

        :param account: The account of this PostPaymodeRequest.  # noqa: E501
        :type: str
        """
        if account is not None and len(account) > 50:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `50`")  # noqa: E501
        if account is not None and len(account) < 0:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `0`")  # noqa: E501

        self._account = account

    @property
    def qrcode(self):
        """Gets the qrcode of this PostPaymodeRequest.  # noqa: E501

        二维码地址  # noqa: E501

        :return: The qrcode of this PostPaymodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._qrcode

    @qrcode.setter
    def qrcode(self, qrcode):
        """Sets the qrcode of this PostPaymodeRequest.

        二维码地址  # noqa: E501

        :param qrcode: The qrcode of this PostPaymodeRequest.  # noqa: E501
        :type: str
        """
        if qrcode is not None and len(qrcode) > 200:
            raise ValueError("Invalid value for `qrcode`, length must be less than or equal to `200`")  # noqa: E501
        if qrcode is not None and len(qrcode) < 0:
            raise ValueError("Invalid value for `qrcode`, length must be greater than or equal to `0`")  # noqa: E501

        self._qrcode = qrcode

    @property
    def bank_name(self):
        """Gets the bank_name of this PostPaymodeRequest.  # noqa: E501

        银行名字  # noqa: E501

        :return: The bank_name of this PostPaymodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this PostPaymodeRequest.

        银行名字  # noqa: E501

        :param bank_name: The bank_name of this PostPaymodeRequest.  # noqa: E501
        :type: str
        """
        if bank_name is not None and len(bank_name) > 50:
            raise ValueError("Invalid value for `bank_name`, length must be less than or equal to `50`")  # noqa: E501
        if bank_name is not None and len(bank_name) < 0:
            raise ValueError("Invalid value for `bank_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._bank_name = bank_name

    @property
    def branch_name(self):
        """Gets the branch_name of this PostPaymodeRequest.  # noqa: E501

        支行名字  # noqa: E501

        :return: The branch_name of this PostPaymodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this PostPaymodeRequest.

        支行名字  # noqa: E501

        :param branch_name: The branch_name of this PostPaymodeRequest.  # noqa: E501
        :type: str
        """
        if branch_name is not None and len(branch_name) > 50:
            raise ValueError("Invalid value for `branch_name`, length must be less than or equal to `50`")  # noqa: E501
        if branch_name is not None and len(branch_name) < 0:
            raise ValueError("Invalid value for `branch_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._branch_name = branch_name

    @property
    def asset_password(self):
        """Gets the asset_password of this PostPaymodeRequest.  # noqa: E501

        资金密码  # noqa: E501

        :return: The asset_password of this PostPaymodeRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_password

    @asset_password.setter
    def asset_password(self, asset_password):
        """Sets the asset_password of this PostPaymodeRequest.

        资金密码  # noqa: E501

        :param asset_password: The asset_password of this PostPaymodeRequest.  # noqa: E501
        :type: str
        """

        self._asset_password = asset_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostPaymodeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostPaymodeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
