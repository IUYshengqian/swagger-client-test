# coding: utf-8

"""
    crush-otc 平台接口（法币交易）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'type': 'int',
        'amount': 'str',
        'currency_id': 'str',
        'currency_code': 'str',
        'price': 'str',
        'total': 'str',
        'status': 'int',
        'pay_note': 'str',
        'pay_left_time': 'int',
        'update_time': 'str',
        'paymode_id': 'str',
        'paid_time': 'str',
        'partner_id': 'str',
        'partner_nick_name': 'str',
        'parter_real_name': 'str',
        'parter_color': 'str'
    }

    attribute_map = {
        'order_id': 'orderId',
        'type': 'type',
        'amount': 'amount',
        'currency_id': 'currencyId',
        'currency_code': 'currencyCode',
        'price': 'price',
        'total': 'total',
        'status': 'status',
        'pay_note': 'payNote',
        'pay_left_time': 'payLeftTime',
        'update_time': 'updateTime',
        'paymode_id': 'paymodeId',
        'paid_time': 'paidTime',
        'partner_id': 'partnerId',
        'partner_nick_name': 'partnerNickName',
        'parter_real_name': 'parterRealName',
        'parter_color': 'parterColor'
    }

    def __init__(self, order_id=None, type=None, amount=None, currency_id=None, currency_code=None, price=None, total=None, status=None, pay_note=None, pay_left_time=None, update_time=None, paymode_id=None, paid_time=None, partner_id=None, partner_nick_name=None, parter_real_name=None, parter_color=None):  # noqa: E501
        """OrderInfo - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._type = None
        self._amount = None
        self._currency_id = None
        self._currency_code = None
        self._price = None
        self._total = None
        self._status = None
        self._pay_note = None
        self._pay_left_time = None
        self._update_time = None
        self._paymode_id = None
        self._paid_time = None
        self._partner_id = None
        self._partner_nick_name = None
        self._parter_real_name = None
        self._parter_color = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if type is not None:
            self.type = type
        if amount is not None:
            self.amount = amount
        if currency_id is not None:
            self.currency_id = currency_id
        if currency_code is not None:
            self.currency_code = currency_code
        if price is not None:
            self.price = price
        if total is not None:
            self.total = total
        if status is not None:
            self.status = status
        if pay_note is not None:
            self.pay_note = pay_note
        if pay_left_time is not None:
            self.pay_left_time = pay_left_time
        if update_time is not None:
            self.update_time = update_time
        if paymode_id is not None:
            self.paymode_id = paymode_id
        if paid_time is not None:
            self.paid_time = paid_time
        if partner_id is not None:
            self.partner_id = partner_id
        if partner_nick_name is not None:
            self.partner_nick_name = partner_nick_name
        if parter_real_name is not None:
            self.parter_real_name = parter_real_name
        if parter_color is not None:
            self.parter_color = parter_color

    @property
    def order_id(self):
        """Gets the order_id of this OrderInfo.  # noqa: E501

        订单Id  # noqa: E501

        :return: The order_id of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderInfo.

        订单Id  # noqa: E501

        :param order_id: The order_id of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def type(self):
        """Gets the type of this OrderInfo.  # noqa: E501

        交易类型 1 购买 2 出售  # noqa: E501

        :return: The type of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderInfo.

        交易类型 1 购买 2 出售  # noqa: E501

        :param type: The type of this OrderInfo.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this OrderInfo.  # noqa: E501

        数量  # noqa: E501

        :return: The amount of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderInfo.

        数量  # noqa: E501

        :param amount: The amount of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency_id(self):
        """Gets the currency_id of this OrderInfo.  # noqa: E501

        币种id  # noqa: E501

        :return: The currency_id of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this OrderInfo.

        币种id  # noqa: E501

        :param currency_id: The currency_id of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def currency_code(self):
        """Gets the currency_code of this OrderInfo.  # noqa: E501

        币种代码  # noqa: E501

        :return: The currency_code of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this OrderInfo.

        币种代码  # noqa: E501

        :param currency_code: The currency_code of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def price(self):
        """Gets the price of this OrderInfo.  # noqa: E501

        价格  # noqa: E501

        :return: The price of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderInfo.

        价格  # noqa: E501

        :param price: The price of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def total(self):
        """Gets the total of this OrderInfo.  # noqa: E501

        总价  # noqa: E501

        :return: The total of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderInfo.

        总价  # noqa: E501

        :param total: The total of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def status(self):
        """Gets the status of this OrderInfo.  # noqa: E501

        订单状态 0 初始值 10 等待支付 20 买家已付款 25 申诉中 30 已完成 35已强制完成 -1 已删除 -2 已取消 -3 已被强制取消  # noqa: E501

        :return: The status of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderInfo.

        订单状态 0 初始值 10 等待支付 20 买家已付款 25 申诉中 30 已完成 35已强制完成 -1 已删除 -2 已取消 -3 已被强制取消  # noqa: E501

        :param status: The status of this OrderInfo.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def pay_note(self):
        """Gets the pay_note of this OrderInfo.  # noqa: E501

        付款备注码  # noqa: E501

        :return: The pay_note of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._pay_note

    @pay_note.setter
    def pay_note(self, pay_note):
        """Sets the pay_note of this OrderInfo.

        付款备注码  # noqa: E501

        :param pay_note: The pay_note of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._pay_note = pay_note

    @property
    def pay_left_time(self):
        """Gets the pay_left_time of this OrderInfo.  # noqa: E501

        剩余支付秒数  # noqa: E501

        :return: The pay_left_time of this OrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._pay_left_time

    @pay_left_time.setter
    def pay_left_time(self, pay_left_time):
        """Sets the pay_left_time of this OrderInfo.

        剩余支付秒数  # noqa: E501

        :param pay_left_time: The pay_left_time of this OrderInfo.  # noqa: E501
        :type: int
        """

        self._pay_left_time = pay_left_time

    @property
    def update_time(self):
        """Gets the update_time of this OrderInfo.  # noqa: E501

        订单更新时间 国际时间表示  # noqa: E501

        :return: The update_time of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this OrderInfo.

        订单更新时间 国际时间表示  # noqa: E501

        :param update_time: The update_time of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def paymode_id(self):
        """Gets the paymode_id of this OrderInfo.  # noqa: E501

        买家选择的支付方式  # noqa: E501

        :return: The paymode_id of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._paymode_id

    @paymode_id.setter
    def paymode_id(self, paymode_id):
        """Sets the paymode_id of this OrderInfo.

        买家选择的支付方式  # noqa: E501

        :param paymode_id: The paymode_id of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._paymode_id = paymode_id

    @property
    def paid_time(self):
        """Gets the paid_time of this OrderInfo.  # noqa: E501

        买家支付时间  # noqa: E501

        :return: The paid_time of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._paid_time

    @paid_time.setter
    def paid_time(self, paid_time):
        """Sets the paid_time of this OrderInfo.

        买家支付时间  # noqa: E501

        :param paid_time: The paid_time of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._paid_time = paid_time

    @property
    def partner_id(self):
        """Gets the partner_id of this OrderInfo.  # noqa: E501

        交易对象id  # noqa: E501

        :return: The partner_id of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this OrderInfo.

        交易对象id  # noqa: E501

        :param partner_id: The partner_id of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def partner_nick_name(self):
        """Gets the partner_nick_name of this OrderInfo.  # noqa: E501

        交易对象昵称  # noqa: E501

        :return: The partner_nick_name of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._partner_nick_name

    @partner_nick_name.setter
    def partner_nick_name(self, partner_nick_name):
        """Sets the partner_nick_name of this OrderInfo.

        交易对象昵称  # noqa: E501

        :param partner_nick_name: The partner_nick_name of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._partner_nick_name = partner_nick_name

    @property
    def parter_real_name(self):
        """Gets the parter_real_name of this OrderInfo.  # noqa: E501

        交易对象实名  # noqa: E501

        :return: The parter_real_name of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._parter_real_name

    @parter_real_name.setter
    def parter_real_name(self, parter_real_name):
        """Sets the parter_real_name of this OrderInfo.

        交易对象实名  # noqa: E501

        :param parter_real_name: The parter_real_name of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._parter_real_name = parter_real_name

    @property
    def parter_color(self):
        """Gets the parter_color of this OrderInfo.  # noqa: E501

        图标颜色  # noqa: E501

        :return: The parter_color of this OrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._parter_color

    @parter_color.setter
    def parter_color(self, parter_color):
        """Sets the parter_color of this OrderInfo.

        图标颜色  # noqa: E501

        :param parter_color: The parter_color of this OrderInfo.  # noqa: E501
        :type: str
        """

        self._parter_color = parter_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
