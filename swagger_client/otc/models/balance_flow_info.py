# coding: utf-8

"""
    crush-otc 平台接口（法币交易）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BalanceFlowInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'operation': 'int',
        'currency_id': 'str',
        'currency_code': 'str',
        'amount': 'str',
        'create_time': 'str',
        'event': 'int',
        'trace_id': 'str'
    }

    attribute_map = {
        'user_id': 'userId',
        'operation': 'operation',
        'currency_id': 'currencyId',
        'currency_code': 'currencyCode',
        'amount': 'amount',
        'create_time': 'createTime',
        'event': 'event',
        'trace_id': 'traceId'
    }

    def __init__(self, user_id=None, operation=None, currency_id=None, currency_code=None, amount=None, create_time=None, event=None, trace_id=None):  # noqa: E501
        """BalanceFlowInfo - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._operation = None
        self._currency_id = None
        self._currency_code = None
        self._amount = None
        self._create_time = None
        self._event = None
        self._trace_id = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if operation is not None:
            self.operation = operation
        if currency_id is not None:
            self.currency_id = currency_id
        if currency_code is not None:
            self.currency_code = currency_code
        if amount is not None:
            self.amount = amount
        if create_time is not None:
            self.create_time = create_time
        if event is not None:
            self.event = event
        if trace_id is not None:
            self.trace_id = trace_id

    @property
    def user_id(self):
        """Gets the user_id of this BalanceFlowInfo.  # noqa: E501

        用户Id  # noqa: E501

        :return: The user_id of this BalanceFlowInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BalanceFlowInfo.

        用户Id  # noqa: E501

        :param user_id: The user_id of this BalanceFlowInfo.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def operation(self):
        """Gets the operation of this BalanceFlowInfo.  # noqa: E501

        交易动作 1 冻结 2 解冻 3 买入 4 卖出 5 转入 6 转出  # noqa: E501

        :return: The operation of this BalanceFlowInfo.  # noqa: E501
        :rtype: int
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this BalanceFlowInfo.

        交易动作 1 冻结 2 解冻 3 买入 4 卖出 5 转入 6 转出  # noqa: E501

        :param operation: The operation of this BalanceFlowInfo.  # noqa: E501
        :type: int
        """

        self._operation = operation

    @property
    def currency_id(self):
        """Gets the currency_id of this BalanceFlowInfo.  # noqa: E501

        数字币id  # noqa: E501

        :return: The currency_id of this BalanceFlowInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this BalanceFlowInfo.

        数字币id  # noqa: E501

        :param currency_id: The currency_id of this BalanceFlowInfo.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def currency_code(self):
        """Gets the currency_code of this BalanceFlowInfo.  # noqa: E501

        数字币code  # noqa: E501

        :return: The currency_code of this BalanceFlowInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BalanceFlowInfo.

        数字币code  # noqa: E501

        :param currency_code: The currency_code of this BalanceFlowInfo.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def amount(self):
        """Gets the amount of this BalanceFlowInfo.  # noqa: E501

        数量  # noqa: E501

        :return: The amount of this BalanceFlowInfo.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BalanceFlowInfo.

        数量  # noqa: E501

        :param amount: The amount of this BalanceFlowInfo.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def create_time(self):
        """Gets the create_time of this BalanceFlowInfo.  # noqa: E501

        记录时间  # noqa: E501

        :return: The create_time of this BalanceFlowInfo.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BalanceFlowInfo.

        记录时间  # noqa: E501

        :param create_time: The create_time of this BalanceFlowInfo.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def event(self):
        """Gets the event of this BalanceFlowInfo.  # noqa: E501

        事件类型  # noqa: E501

        :return: The event of this BalanceFlowInfo.  # noqa: E501
        :rtype: int
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this BalanceFlowInfo.

        事件类型  # noqa: E501

        :param event: The event of this BalanceFlowInfo.  # noqa: E501
        :type: int
        """

        self._event = event

    @property
    def trace_id(self):
        """Gets the trace_id of this BalanceFlowInfo.  # noqa: E501

        相关业务id  # noqa: E501

        :return: The trace_id of this BalanceFlowInfo.  # noqa: E501
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this BalanceFlowInfo.

        相关业务id  # noqa: E501

        :param trace_id: The trace_id of this BalanceFlowInfo.  # noqa: E501
        :type: str
        """

        self._trace_id = trace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceFlowInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceFlowInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
