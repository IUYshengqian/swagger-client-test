# coding: utf-8

"""
    crush-otc 平台接口（法币交易）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostIndividualCertificationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nationality_code': 'str',
        'name': 'str',
        'type': 'str',
        'number': 'str',
        'front_photo': 'str',
        'back_photo': 'str',
        'handheld_photo': 'str'
    }

    attribute_map = {
        'nationality_code': 'nationalityCode',
        'name': 'name',
        'type': 'type',
        'number': 'number',
        'front_photo': 'frontPhoto',
        'back_photo': 'backPhoto',
        'handheld_photo': 'handheldPhoto'
    }

    def __init__(self, nationality_code=None, name=None, type=None, number=None, front_photo=None, back_photo=None, handheld_photo=None):  # noqa: E501
        """PostIndividualCertificationRequest - a model defined in Swagger"""  # noqa: E501

        self._nationality_code = None
        self._name = None
        self._type = None
        self._number = None
        self._front_photo = None
        self._back_photo = None
        self._handheld_photo = None
        self.discriminator = None

        self.nationality_code = nationality_code
        self.name = name
        self.type = type
        self.number = number
        self.front_photo = front_photo
        self.back_photo = back_photo
        self.handheld_photo = handheld_photo

    @property
    def nationality_code(self):
        """Gets the nationality_code of this PostIndividualCertificationRequest.  # noqa: E501

        国籍（证件所在区域）  # noqa: E501

        :return: The nationality_code of this PostIndividualCertificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._nationality_code

    @nationality_code.setter
    def nationality_code(self, nationality_code):
        """Sets the nationality_code of this PostIndividualCertificationRequest.

        国籍（证件所在区域）  # noqa: E501

        :param nationality_code: The nationality_code of this PostIndividualCertificationRequest.  # noqa: E501
        :type: str
        """
        if nationality_code is None:
            raise ValueError("Invalid value for `nationality_code`, must not be `None`")  # noqa: E501
        if nationality_code is not None and len(nationality_code) > 128:
            raise ValueError("Invalid value for `nationality_code`, length must be less than or equal to `128`")  # noqa: E501
        if nationality_code is not None and len(nationality_code) < 2:
            raise ValueError("Invalid value for `nationality_code`, length must be greater than or equal to `2`")  # noqa: E501

        self._nationality_code = nationality_code

    @property
    def name(self):
        """Gets the name of this PostIndividualCertificationRequest.  # noqa: E501

        姓名  # noqa: E501

        :return: The name of this PostIndividualCertificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostIndividualCertificationRequest.

        姓名  # noqa: E501

        :param name: The name of this PostIndividualCertificationRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 20:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `20`")  # noqa: E501
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `2`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this PostIndividualCertificationRequest.  # noqa: E501

        证件类型：identityCard-身份证；passport-护照  # noqa: E501

        :return: The type of this PostIndividualCertificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostIndividualCertificationRequest.

        证件类型：identityCard-身份证；passport-护照  # noqa: E501

        :param type: The type of this PostIndividualCertificationRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["identityCard", "passport"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def number(self):
        """Gets the number of this PostIndividualCertificationRequest.  # noqa: E501

        证件号码  # noqa: E501

        :return: The number of this PostIndividualCertificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PostIndividualCertificationRequest.

        证件号码  # noqa: E501

        :param number: The number of this PostIndividualCertificationRequest.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        if number is not None and len(number) > 20:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `20`")  # noqa: E501
        if number is not None and len(number) < 8:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `8`")  # noqa: E501

        self._number = number

    @property
    def front_photo(self):
        """Gets the front_photo of this PostIndividualCertificationRequest.  # noqa: E501

        证件正面照  # noqa: E501

        :return: The front_photo of this PostIndividualCertificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._front_photo

    @front_photo.setter
    def front_photo(self, front_photo):
        """Sets the front_photo of this PostIndividualCertificationRequest.

        证件正面照  # noqa: E501

        :param front_photo: The front_photo of this PostIndividualCertificationRequest.  # noqa: E501
        :type: str
        """
        if front_photo is None:
            raise ValueError("Invalid value for `front_photo`, must not be `None`")  # noqa: E501

        self._front_photo = front_photo

    @property
    def back_photo(self):
        """Gets the back_photo of this PostIndividualCertificationRequest.  # noqa: E501

        证件反面照  # noqa: E501

        :return: The back_photo of this PostIndividualCertificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._back_photo

    @back_photo.setter
    def back_photo(self, back_photo):
        """Sets the back_photo of this PostIndividualCertificationRequest.

        证件反面照  # noqa: E501

        :param back_photo: The back_photo of this PostIndividualCertificationRequest.  # noqa: E501
        :type: str
        """
        if back_photo is None:
            raise ValueError("Invalid value for `back_photo`, must not be `None`")  # noqa: E501

        self._back_photo = back_photo

    @property
    def handheld_photo(self):
        """Gets the handheld_photo of this PostIndividualCertificationRequest.  # noqa: E501

        手持证件照  # noqa: E501

        :return: The handheld_photo of this PostIndividualCertificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._handheld_photo

    @handheld_photo.setter
    def handheld_photo(self, handheld_photo):
        """Sets the handheld_photo of this PostIndividualCertificationRequest.

        手持证件照  # noqa: E501

        :param handheld_photo: The handheld_photo of this PostIndividualCertificationRequest.  # noqa: E501
        :type: str
        """
        if handheld_photo is None:
            raise ValueError("Invalid value for `handheld_photo`, must not be `None`")  # noqa: E501

        self._handheld_photo = handheld_photo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostIndividualCertificationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostIndividualCertificationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
