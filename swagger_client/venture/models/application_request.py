# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_name': 'str',
        'description': 'str',
        'official_website': 'str',
        'white_paper_key': 'str',
        'area_code': 'str',
        'project_poster_key': 'str',
        'cellphone': 'str',
        'telephone': 'str',
        'email': 'str',
        'full_name': 'str',
        'short_name': 'str',
        'issue_price': 'str',
        'issued_volume': 'str',
        'circulation_volume': 'str',
        'issued_date': 'date',
        'coin_logo_key': 'str',
        'blockchain_type': 'str',
        'data_link': 'str',
        'block_browser': 'str'
    }

    attribute_map = {
        'project_name': 'projectName',
        'description': 'description',
        'official_website': 'officialWebsite',
        'white_paper_key': 'whitePaperKey',
        'area_code': 'areaCode',
        'project_poster_key': 'projectPosterKey',
        'cellphone': 'cellphone',
        'telephone': 'telephone',
        'email': 'email',
        'full_name': 'fullName',
        'short_name': 'shortName',
        'issue_price': 'issuePrice',
        'issued_volume': 'issuedVolume',
        'circulation_volume': 'circulationVolume',
        'issued_date': 'issuedDate',
        'coin_logo_key': 'coinLogoKey',
        'blockchain_type': 'blockchainType',
        'data_link': 'dataLink',
        'block_browser': 'blockBrowser'
    }

    def __init__(self, project_name=None, description=None, official_website=None, white_paper_key=None, area_code=None, project_poster_key=None, cellphone=None, telephone=None, email=None, full_name=None, short_name=None, issue_price=None, issued_volume=None, circulation_volume=None, issued_date=None, coin_logo_key=None, blockchain_type=None, data_link=None, block_browser=None):  # noqa: E501
        """ApplicationRequest - a model defined in Swagger"""  # noqa: E501

        self._project_name = None
        self._description = None
        self._official_website = None
        self._white_paper_key = None
        self._area_code = None
        self._project_poster_key = None
        self._cellphone = None
        self._telephone = None
        self._email = None
        self._full_name = None
        self._short_name = None
        self._issue_price = None
        self._issued_volume = None
        self._circulation_volume = None
        self._issued_date = None
        self._coin_logo_key = None
        self._blockchain_type = None
        self._data_link = None
        self._block_browser = None
        self.discriminator = None

        if project_name is not None:
            self.project_name = project_name
        if description is not None:
            self.description = description
        if official_website is not None:
            self.official_website = official_website
        if white_paper_key is not None:
            self.white_paper_key = white_paper_key
        if area_code is not None:
            self.area_code = area_code
        if project_poster_key is not None:
            self.project_poster_key = project_poster_key
        if cellphone is not None:
            self.cellphone = cellphone
        if telephone is not None:
            self.telephone = telephone
        if email is not None:
            self.email = email
        if full_name is not None:
            self.full_name = full_name
        if short_name is not None:
            self.short_name = short_name
        if issue_price is not None:
            self.issue_price = issue_price
        if issued_volume is not None:
            self.issued_volume = issued_volume
        if circulation_volume is not None:
            self.circulation_volume = circulation_volume
        if issued_date is not None:
            self.issued_date = issued_date
        if coin_logo_key is not None:
            self.coin_logo_key = coin_logo_key
        if blockchain_type is not None:
            self.blockchain_type = blockchain_type
        if data_link is not None:
            self.data_link = data_link
        if block_browser is not None:
            self.block_browser = block_browser

    @property
    def project_name(self):
        """Gets the project_name of this ApplicationRequest.  # noqa: E501

        项目名  # noqa: E501

        :return: The project_name of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ApplicationRequest.

        项目名  # noqa: E501

        :param project_name: The project_name of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if project_name is not None and len(project_name) > 16:
            raise ValueError("Invalid value for `project_name`, length must be less than or equal to `16`")  # noqa: E501
        if project_name is not None and len(project_name) < 2:
            raise ValueError("Invalid value for `project_name`, length must be greater than or equal to `2`")  # noqa: E501

        self._project_name = project_name

    @property
    def description(self):
        """Gets the description of this ApplicationRequest.  # noqa: E501

        项目简介  # noqa: E501

        :return: The description of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationRequest.

        项目简介  # noqa: E501

        :param description: The description of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def official_website(self):
        """Gets the official_website of this ApplicationRequest.  # noqa: E501

        官方网站  # noqa: E501

        :return: The official_website of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._official_website

    @official_website.setter
    def official_website(self, official_website):
        """Sets the official_website of this ApplicationRequest.

        官方网站  # noqa: E501

        :param official_website: The official_website of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if official_website is not None and len(official_website) > 2048:
            raise ValueError("Invalid value for `official_website`, length must be less than or equal to `2048`")  # noqa: E501
        if official_website is not None and len(official_website) < 5:
            raise ValueError("Invalid value for `official_website`, length must be greater than or equal to `5`")  # noqa: E501

        self._official_website = official_website

    @property
    def white_paper_key(self):
        """Gets the white_paper_key of this ApplicationRequest.  # noqa: E501

        白皮书PDF  # noqa: E501

        :return: The white_paper_key of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._white_paper_key

    @white_paper_key.setter
    def white_paper_key(self, white_paper_key):
        """Sets the white_paper_key of this ApplicationRequest.

        白皮书PDF  # noqa: E501

        :param white_paper_key: The white_paper_key of this ApplicationRequest.  # noqa: E501
        :type: str
        """

        self._white_paper_key = white_paper_key

    @property
    def area_code(self):
        """Gets the area_code of this ApplicationRequest.  # noqa: E501

        电话区号  # noqa: E501

        :return: The area_code of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this ApplicationRequest.

        电话区号  # noqa: E501

        :param area_code: The area_code of this ApplicationRequest.  # noqa: E501
        :type: str
        """

        self._area_code = area_code

    @property
    def project_poster_key(self):
        """Gets the project_poster_key of this ApplicationRequest.  # noqa: E501

        项目广告图KEY  # noqa: E501

        :return: The project_poster_key of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_poster_key

    @project_poster_key.setter
    def project_poster_key(self, project_poster_key):
        """Sets the project_poster_key of this ApplicationRequest.

        项目广告图KEY  # noqa: E501

        :param project_poster_key: The project_poster_key of this ApplicationRequest.  # noqa: E501
        :type: str
        """

        self._project_poster_key = project_poster_key

    @property
    def cellphone(self):
        """Gets the cellphone of this ApplicationRequest.  # noqa: E501

        手机号  # noqa: E501

        :return: The cellphone of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._cellphone

    @cellphone.setter
    def cellphone(self, cellphone):
        """Sets the cellphone of this ApplicationRequest.

        手机号  # noqa: E501

        :param cellphone: The cellphone of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if cellphone is not None and len(cellphone) > 16:
            raise ValueError("Invalid value for `cellphone`, length must be less than or equal to `16`")  # noqa: E501
        if cellphone is not None and len(cellphone) < 8:
            raise ValueError("Invalid value for `cellphone`, length must be greater than or equal to `8`")  # noqa: E501

        self._cellphone = cellphone

    @property
    def telephone(self):
        """Gets the telephone of this ApplicationRequest.  # noqa: E501

        固定电话号  # noqa: E501

        :return: The telephone of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this ApplicationRequest.

        固定电话号  # noqa: E501

        :param telephone: The telephone of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if telephone is not None and len(telephone) > 16:
            raise ValueError("Invalid value for `telephone`, length must be less than or equal to `16`")  # noqa: E501
        if telephone is not None and len(telephone) < 8:
            raise ValueError("Invalid value for `telephone`, length must be greater than or equal to `8`")  # noqa: E501

        self._telephone = telephone

    @property
    def email(self):
        """Gets the email of this ApplicationRequest.  # noqa: E501

        电子邮箱  # noqa: E501

        :return: The email of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ApplicationRequest.

        电子邮箱  # noqa: E501

        :param email: The email of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 64:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `64`")  # noqa: E501
        if email is not None and len(email) < 6:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `6`")  # noqa: E501

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this ApplicationRequest.  # noqa: E501

        币全称  # noqa: E501

        :return: The full_name of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ApplicationRequest.

        币全称  # noqa: E501

        :param full_name: The full_name of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if full_name is not None and len(full_name) > 16:
            raise ValueError("Invalid value for `full_name`, length must be less than or equal to `16`")  # noqa: E501
        if full_name is not None and len(full_name) < 2:
            raise ValueError("Invalid value for `full_name`, length must be greater than or equal to `2`")  # noqa: E501

        self._full_name = full_name

    @property
    def short_name(self):
        """Gets the short_name of this ApplicationRequest.  # noqa: E501

        币简称  # noqa: E501

        :return: The short_name of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this ApplicationRequest.

        币简称  # noqa: E501

        :param short_name: The short_name of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if short_name is not None and len(short_name) > 6:
            raise ValueError("Invalid value for `short_name`, length must be less than or equal to `6`")  # noqa: E501
        if short_name is not None and len(short_name) < 2:
            raise ValueError("Invalid value for `short_name`, length must be greater than or equal to `2`")  # noqa: E501

        self._short_name = short_name

    @property
    def issue_price(self):
        """Gets the issue_price of this ApplicationRequest.  # noqa: E501

        发行价  # noqa: E501

        :return: The issue_price of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._issue_price

    @issue_price.setter
    def issue_price(self, issue_price):
        """Sets the issue_price of this ApplicationRequest.

        发行价  # noqa: E501

        :param issue_price: The issue_price of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if issue_price is not None and len(issue_price) > 14:
            raise ValueError("Invalid value for `issue_price`, length must be less than or equal to `14`")  # noqa: E501
        if issue_price is not None and len(issue_price) < 1:
            raise ValueError("Invalid value for `issue_price`, length must be greater than or equal to `1`")  # noqa: E501

        self._issue_price = issue_price

    @property
    def issued_volume(self):
        """Gets the issued_volume of this ApplicationRequest.  # noqa: E501

        发行量  # noqa: E501

        :return: The issued_volume of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._issued_volume

    @issued_volume.setter
    def issued_volume(self, issued_volume):
        """Sets the issued_volume of this ApplicationRequest.

        发行量  # noqa: E501

        :param issued_volume: The issued_volume of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if issued_volume is not None and len(issued_volume) > 16:
            raise ValueError("Invalid value for `issued_volume`, length must be less than or equal to `16`")  # noqa: E501
        if issued_volume is not None and len(issued_volume) < 1:
            raise ValueError("Invalid value for `issued_volume`, length must be greater than or equal to `1`")  # noqa: E501

        self._issued_volume = issued_volume

    @property
    def circulation_volume(self):
        """Gets the circulation_volume of this ApplicationRequest.  # noqa: E501

        流通量  # noqa: E501

        :return: The circulation_volume of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._circulation_volume

    @circulation_volume.setter
    def circulation_volume(self, circulation_volume):
        """Sets the circulation_volume of this ApplicationRequest.

        流通量  # noqa: E501

        :param circulation_volume: The circulation_volume of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if circulation_volume is not None and len(circulation_volume) > 16:
            raise ValueError("Invalid value for `circulation_volume`, length must be less than or equal to `16`")  # noqa: E501
        if circulation_volume is not None and len(circulation_volume) < 1:
            raise ValueError("Invalid value for `circulation_volume`, length must be greater than or equal to `1`")  # noqa: E501

        self._circulation_volume = circulation_volume

    @property
    def issued_date(self):
        """Gets the issued_date of this ApplicationRequest.  # noqa: E501

        发行时间  # noqa: E501

        :return: The issued_date of this ApplicationRequest.  # noqa: E501
        :rtype: date
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this ApplicationRequest.

        发行时间  # noqa: E501

        :param issued_date: The issued_date of this ApplicationRequest.  # noqa: E501
        :type: date
        """

        self._issued_date = issued_date

    @property
    def coin_logo_key(self):
        """Gets the coin_logo_key of this ApplicationRequest.  # noqa: E501

        币图标KEY  # noqa: E501

        :return: The coin_logo_key of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._coin_logo_key

    @coin_logo_key.setter
    def coin_logo_key(self, coin_logo_key):
        """Sets the coin_logo_key of this ApplicationRequest.

        币图标KEY  # noqa: E501

        :param coin_logo_key: The coin_logo_key of this ApplicationRequest.  # noqa: E501
        :type: str
        """

        self._coin_logo_key = coin_logo_key

    @property
    def blockchain_type(self):
        """Gets the blockchain_type of this ApplicationRequest.  # noqa: E501

        区块链类型  # noqa: E501

        :return: The blockchain_type of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._blockchain_type

    @blockchain_type.setter
    def blockchain_type(self, blockchain_type):
        """Sets the blockchain_type of this ApplicationRequest.

        区块链类型  # noqa: E501

        :param blockchain_type: The blockchain_type of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["public_chain", "private_chain", "smart_contract"]  # noqa: E501
        if blockchain_type not in allowed_values:
            raise ValueError(
                "Invalid value for `blockchain_type` ({0}), must be one of {1}"  # noqa: E501
                .format(blockchain_type, allowed_values)
            )

        self._blockchain_type = blockchain_type

    @property
    def data_link(self):
        """Gets the data_link of this ApplicationRequest.  # noqa: E501

        资料链接  # noqa: E501

        :return: The data_link of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_link

    @data_link.setter
    def data_link(self, data_link):
        """Sets the data_link of this ApplicationRequest.

        资料链接  # noqa: E501

        :param data_link: The data_link of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if data_link is not None and len(data_link) > 2048:
            raise ValueError("Invalid value for `data_link`, length must be less than or equal to `2048`")  # noqa: E501
        if data_link is not None and len(data_link) < 5:
            raise ValueError("Invalid value for `data_link`, length must be greater than or equal to `5`")  # noqa: E501

        self._data_link = data_link

    @property
    def block_browser(self):
        """Gets the block_browser of this ApplicationRequest.  # noqa: E501

        区块浏览器  # noqa: E501

        :return: The block_browser of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._block_browser

    @block_browser.setter
    def block_browser(self, block_browser):
        """Sets the block_browser of this ApplicationRequest.

        区块浏览器  # noqa: E501

        :param block_browser: The block_browser of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if block_browser is not None and len(block_browser) > 2048:
            raise ValueError("Invalid value for `block_browser`, length must be less than or equal to `2048`")  # noqa: E501
        if block_browser is not None and len(block_browser) < 5:
            raise ValueError("Invalid value for `block_browser`, length must be greater than or equal to `5`")  # noqa: E501

        self._block_browser = block_browser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
