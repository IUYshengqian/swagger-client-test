# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetExchangesResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exchange_id': 'str',
        'exchange_name': 'str',
        'logo': 'str',
        'nationality': 'str',
        'currency_quantity': 'str',
        'trading_pair_quantity': 'str',
        'volume24_h': 'str',
        'status': 'bool'
    }

    attribute_map = {
        'exchange_id': 'exchangeId',
        'exchange_name': 'exchangeName',
        'logo': 'logo',
        'nationality': 'nationality',
        'currency_quantity': 'currencyQuantity',
        'trading_pair_quantity': 'tradingPairQuantity',
        'volume24_h': 'volume24H',
        'status': 'status'
    }

    def __init__(self, exchange_id=None, exchange_name=None, logo=None, nationality=None, currency_quantity=None, trading_pair_quantity=None, volume24_h=None, status=None):  # noqa: E501
        """GetExchangesResponseItems - a model defined in Swagger"""  # noqa: E501

        self._exchange_id = None
        self._exchange_name = None
        self._logo = None
        self._nationality = None
        self._currency_quantity = None
        self._trading_pair_quantity = None
        self._volume24_h = None
        self._status = None
        self.discriminator = None

        if exchange_id is not None:
            self.exchange_id = exchange_id
        if exchange_name is not None:
            self.exchange_name = exchange_name
        if logo is not None:
            self.logo = logo
        if nationality is not None:
            self.nationality = nationality
        if currency_quantity is not None:
            self.currency_quantity = currency_quantity
        if trading_pair_quantity is not None:
            self.trading_pair_quantity = trading_pair_quantity
        if volume24_h is not None:
            self.volume24_h = volume24_h
        if status is not None:
            self.status = status

    @property
    def exchange_id(self):
        """Gets the exchange_id of this GetExchangesResponseItems.  # noqa: E501

        交易所ID  # noqa: E501

        :return: The exchange_id of this GetExchangesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this GetExchangesResponseItems.

        交易所ID  # noqa: E501

        :param exchange_id: The exchange_id of this GetExchangesResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def exchange_name(self):
        """Gets the exchange_name of this GetExchangesResponseItems.  # noqa: E501

        交易所名称  # noqa: E501

        :return: The exchange_name of this GetExchangesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange_name

    @exchange_name.setter
    def exchange_name(self, exchange_name):
        """Sets the exchange_name of this GetExchangesResponseItems.

        交易所名称  # noqa: E501

        :param exchange_name: The exchange_name of this GetExchangesResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange_name = exchange_name

    @property
    def logo(self):
        """Gets the logo of this GetExchangesResponseItems.  # noqa: E501

        交易所图标  # noqa: E501

        :return: The logo of this GetExchangesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this GetExchangesResponseItems.

        交易所图标  # noqa: E501

        :param logo: The logo of this GetExchangesResponseItems.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def nationality(self):
        """Gets the nationality of this GetExchangesResponseItems.  # noqa: E501

        国家地区  # noqa: E501

        :return: The nationality of this GetExchangesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this GetExchangesResponseItems.

        国家地区  # noqa: E501

        :param nationality: The nationality of this GetExchangesResponseItems.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def currency_quantity(self):
        """Gets the currency_quantity of this GetExchangesResponseItems.  # noqa: E501

        币种数量  # noqa: E501

        :return: The currency_quantity of this GetExchangesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._currency_quantity

    @currency_quantity.setter
    def currency_quantity(self, currency_quantity):
        """Sets the currency_quantity of this GetExchangesResponseItems.

        币种数量  # noqa: E501

        :param currency_quantity: The currency_quantity of this GetExchangesResponseItems.  # noqa: E501
        :type: str
        """

        self._currency_quantity = currency_quantity

    @property
    def trading_pair_quantity(self):
        """Gets the trading_pair_quantity of this GetExchangesResponseItems.  # noqa: E501

        币对数量  # noqa: E501

        :return: The trading_pair_quantity of this GetExchangesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair_quantity

    @trading_pair_quantity.setter
    def trading_pair_quantity(self, trading_pair_quantity):
        """Sets the trading_pair_quantity of this GetExchangesResponseItems.

        币对数量  # noqa: E501

        :param trading_pair_quantity: The trading_pair_quantity of this GetExchangesResponseItems.  # noqa: E501
        :type: str
        """

        self._trading_pair_quantity = trading_pair_quantity

    @property
    def volume24_h(self):
        """Gets the volume24_h of this GetExchangesResponseItems.  # noqa: E501

        24H交易量  # noqa: E501

        :return: The volume24_h of this GetExchangesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._volume24_h

    @volume24_h.setter
    def volume24_h(self, volume24_h):
        """Sets the volume24_h of this GetExchangesResponseItems.

        24H交易量  # noqa: E501

        :param volume24_h: The volume24_h of this GetExchangesResponseItems.  # noqa: E501
        :type: str
        """

        self._volume24_h = volume24_h

    @property
    def status(self):
        """Gets the status of this GetExchangesResponseItems.  # noqa: E501

        是否对接  # noqa: E501

        :return: The status of this GetExchangesResponseItems.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetExchangesResponseItems.

        是否对接  # noqa: E501

        :param status: The status of this GetExchangesResponseItems.  # noqa: E501
        :type: bool
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetExchangesResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetExchangesResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
