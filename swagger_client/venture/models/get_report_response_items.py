# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetReportResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'type': 'str',
        'created_at': 'datetime',
        'url_key': 'str',
        'url_value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'type': 'type',
        'created_at': 'createdAt',
        'url_key': 'urlKey',
        'url_value': 'urlValue'
    }

    def __init__(self, id=None, title=None, type=None, created_at=None, url_key=None, url_value=None):  # noqa: E501
        """GetReportResponseItems - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._type = None
        self._created_at = None
        self._url_key = None
        self._url_value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if url_key is not None:
            self.url_key = url_key
        if url_value is not None:
            self.url_value = url_value

    @property
    def id(self):
        """Gets the id of this GetReportResponseItems.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this GetReportResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetReportResponseItems.

        ID  # noqa: E501

        :param id: The id of this GetReportResponseItems.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this GetReportResponseItems.  # noqa: E501

        标题  # noqa: E501

        :return: The title of this GetReportResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetReportResponseItems.

        标题  # noqa: E501

        :param title: The title of this GetReportResponseItems.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this GetReportResponseItems.  # noqa: E501

        报告类型(日报、周报、月报、年报、其他)  # noqa: E501

        :return: The type of this GetReportResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetReportResponseItems.

        报告类型(日报、周报、月报、年报、其他)  # noqa: E501

        :param type: The type of this GetReportResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["daily", "weekly", "monthly", "annual", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this GetReportResponseItems.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetReportResponseItems.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetReportResponseItems.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetReportResponseItems.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def url_key(self):
        """Gets the url_key of this GetReportResponseItems.  # noqa: E501

        报告上传路劲Key  # noqa: E501

        :return: The url_key of this GetReportResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._url_key

    @url_key.setter
    def url_key(self, url_key):
        """Sets the url_key of this GetReportResponseItems.

        报告上传路劲Key  # noqa: E501

        :param url_key: The url_key of this GetReportResponseItems.  # noqa: E501
        :type: str
        """

        self._url_key = url_key

    @property
    def url_value(self):
        """Gets the url_value of this GetReportResponseItems.  # noqa: E501

        报告上传路劲value  # noqa: E501

        :return: The url_value of this GetReportResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._url_value

    @url_value.setter
    def url_value(self, url_value):
        """Sets the url_value of this GetReportResponseItems.

        报告上传路劲value  # noqa: E501

        :param url_value: The url_value of this GetReportResponseItems.  # noqa: E501
        :type: str
        """

        self._url_value = url_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetReportResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetReportResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
