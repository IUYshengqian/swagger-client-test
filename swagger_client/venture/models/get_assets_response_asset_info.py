# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetAssetsResponseAssetInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coin_id': 'str',
        'warning': 'str',
        'short_name': 'str',
        'full_name': 'str',
        'logo': 'str',
        'is_allow_recharge': 'bool',
        'is_allow_withdraw': 'bool',
        'total': 'str',
        'balance': 'str',
        'frozen': 'str',
        'lock': 'str'
    }

    attribute_map = {
        'coin_id': 'coinId',
        'warning': 'warning',
        'short_name': 'shortName',
        'full_name': 'fullName',
        'logo': 'logo',
        'is_allow_recharge': 'isAllowRecharge',
        'is_allow_withdraw': 'isAllowWithdraw',
        'total': 'total',
        'balance': 'balance',
        'frozen': 'frozen',
        'lock': 'lock'
    }

    def __init__(self, coin_id=None, warning=None, short_name=None, full_name=None, logo=None, is_allow_recharge=None, is_allow_withdraw=None, total=None, balance=None, frozen=None, lock=None):  # noqa: E501
        """GetAssetsResponseAssetInfo - a model defined in Swagger"""  # noqa: E501

        self._coin_id = None
        self._warning = None
        self._short_name = None
        self._full_name = None
        self._logo = None
        self._is_allow_recharge = None
        self._is_allow_withdraw = None
        self._total = None
        self._balance = None
        self._frozen = None
        self._lock = None
        self.discriminator = None

        if coin_id is not None:
            self.coin_id = coin_id
        if warning is not None:
            self.warning = warning
        if short_name is not None:
            self.short_name = short_name
        if full_name is not None:
            self.full_name = full_name
        if logo is not None:
            self.logo = logo
        if is_allow_recharge is not None:
            self.is_allow_recharge = is_allow_recharge
        if is_allow_withdraw is not None:
            self.is_allow_withdraw = is_allow_withdraw
        if total is not None:
            self.total = total
        if balance is not None:
            self.balance = balance
        if frozen is not None:
            self.frozen = frozen
        if lock is not None:
            self.lock = lock

    @property
    def coin_id(self):
        """Gets the coin_id of this GetAssetsResponseAssetInfo.  # noqa: E501

        币ID  # noqa: E501

        :return: The coin_id of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._coin_id

    @coin_id.setter
    def coin_id(self, coin_id):
        """Sets the coin_id of this GetAssetsResponseAssetInfo.

        币ID  # noqa: E501

        :param coin_id: The coin_id of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._coin_id = coin_id

    @property
    def warning(self):
        """Gets the warning of this GetAssetsResponseAssetInfo.  # noqa: E501

        警示信息  # noqa: E501

        :return: The warning of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this GetAssetsResponseAssetInfo.

        警示信息  # noqa: E501

        :param warning: The warning of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._warning = warning

    @property
    def short_name(self):
        """Gets the short_name of this GetAssetsResponseAssetInfo.  # noqa: E501

        币简称  # noqa: E501

        :return: The short_name of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this GetAssetsResponseAssetInfo.

        币简称  # noqa: E501

        :param short_name: The short_name of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def full_name(self):
        """Gets the full_name of this GetAssetsResponseAssetInfo.  # noqa: E501

        币简称  # noqa: E501

        :return: The full_name of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this GetAssetsResponseAssetInfo.

        币简称  # noqa: E501

        :param full_name: The full_name of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def logo(self):
        """Gets the logo of this GetAssetsResponseAssetInfo.  # noqa: E501

        logo  # noqa: E501

        :return: The logo of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this GetAssetsResponseAssetInfo.

        logo  # noqa: E501

        :param logo: The logo of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def is_allow_recharge(self):
        """Gets the is_allow_recharge of this GetAssetsResponseAssetInfo.  # noqa: E501

        是否允许充值  # noqa: E501

        :return: The is_allow_recharge of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_recharge

    @is_allow_recharge.setter
    def is_allow_recharge(self, is_allow_recharge):
        """Sets the is_allow_recharge of this GetAssetsResponseAssetInfo.

        是否允许充值  # noqa: E501

        :param is_allow_recharge: The is_allow_recharge of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: bool
        """

        self._is_allow_recharge = is_allow_recharge

    @property
    def is_allow_withdraw(self):
        """Gets the is_allow_withdraw of this GetAssetsResponseAssetInfo.  # noqa: E501

        是否允许提币  # noqa: E501

        :return: The is_allow_withdraw of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_withdraw

    @is_allow_withdraw.setter
    def is_allow_withdraw(self, is_allow_withdraw):
        """Sets the is_allow_withdraw of this GetAssetsResponseAssetInfo.

        是否允许提币  # noqa: E501

        :param is_allow_withdraw: The is_allow_withdraw of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: bool
        """

        self._is_allow_withdraw = is_allow_withdraw

    @property
    def total(self):
        """Gets the total of this GetAssetsResponseAssetInfo.  # noqa: E501

        总计  # noqa: E501

        :return: The total of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetAssetsResponseAssetInfo.

        总计  # noqa: E501

        :param total: The total of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def balance(self):
        """Gets the balance of this GetAssetsResponseAssetInfo.  # noqa: E501

        可用金额  # noqa: E501

        :return: The balance of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this GetAssetsResponseAssetInfo.

        可用金额  # noqa: E501

        :param balance: The balance of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def frozen(self):
        """Gets the frozen of this GetAssetsResponseAssetInfo.  # noqa: E501

        冻结金额  # noqa: E501

        :return: The frozen of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._frozen

    @frozen.setter
    def frozen(self, frozen):
        """Sets the frozen of this GetAssetsResponseAssetInfo.

        冻结金额  # noqa: E501

        :param frozen: The frozen of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._frozen = frozen

    @property
    def lock(self):
        """Gets the lock of this GetAssetsResponseAssetInfo.  # noqa: E501

        锁定金额  # noqa: E501

        :return: The lock of this GetAssetsResponseAssetInfo.  # noqa: E501
        :rtype: str
        """
        return self._lock

    @lock.setter
    def lock(self, lock):
        """Sets the lock of this GetAssetsResponseAssetInfo.

        锁定金额  # noqa: E501

        :param lock: The lock of this GetAssetsResponseAssetInfo.  # noqa: E501
        :type: str
        """

        self._lock = lock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAssetsResponseAssetInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAssetsResponseAssetInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
