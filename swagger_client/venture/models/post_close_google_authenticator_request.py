# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostCloseGoogleAuthenticatorRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'verification_code': 'str',
        'google_code': 'str'
    }

    attribute_map = {
        'account': 'account',
        'verification_code': 'verificationCode',
        'google_code': 'googleCode'
    }

    def __init__(self, account=None, verification_code=None, google_code=None):  # noqa: E501
        """PostCloseGoogleAuthenticatorRequest - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._verification_code = None
        self._google_code = None
        self.discriminator = None

        self.account = account
        self.verification_code = verification_code
        self.google_code = google_code

    @property
    def account(self):
        """Gets the account of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501

        邮箱或者手机号：mailto:1009820785@qq.com or number:+861864550202  # noqa: E501

        :return: The account of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this PostCloseGoogleAuthenticatorRequest.

        邮箱或者手机号：mailto:1009820785@qq.com or number:+861864550202  # noqa: E501

        :param account: The account of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def verification_code(self):
        """Gets the verification_code of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501

        邮箱或者电话号验证码  # noqa: E501

        :return: The verification_code of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this PostCloseGoogleAuthenticatorRequest.

        邮箱或者电话号验证码  # noqa: E501

        :param verification_code: The verification_code of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501
        :type: str
        """
        if verification_code is None:
            raise ValueError("Invalid value for `verification_code`, must not be `None`")  # noqa: E501
        if verification_code is not None and len(verification_code) > 6:
            raise ValueError("Invalid value for `verification_code`, length must be less than or equal to `6`")  # noqa: E501
        if verification_code is not None and len(verification_code) < 6:
            raise ValueError("Invalid value for `verification_code`, length must be greater than or equal to `6`")  # noqa: E501

        self._verification_code = verification_code

    @property
    def google_code(self):
        """Gets the google_code of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501

        谷歌验证码  # noqa: E501

        :return: The google_code of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501
        :rtype: str
        """
        return self._google_code

    @google_code.setter
    def google_code(self, google_code):
        """Sets the google_code of this PostCloseGoogleAuthenticatorRequest.

        谷歌验证码  # noqa: E501

        :param google_code: The google_code of this PostCloseGoogleAuthenticatorRequest.  # noqa: E501
        :type: str
        """
        if google_code is None:
            raise ValueError("Invalid value for `google_code`, must not be `None`")  # noqa: E501
        if google_code is not None and len(google_code) > 6:
            raise ValueError("Invalid value for `google_code`, length must be less than or equal to `6`")  # noqa: E501
        if google_code is not None and len(google_code) < 6:
            raise ValueError("Invalid value for `google_code`, length must be greater than or equal to `6`")  # noqa: E501

        self._google_code = google_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostCloseGoogleAuthenticatorRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostCloseGoogleAuthenticatorRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
