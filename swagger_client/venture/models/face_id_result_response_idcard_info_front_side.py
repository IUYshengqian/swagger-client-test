# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.venture.models.face_id_result_response_idcard_info_front_side_ocr_result import FaceIdResultResponseIdcardInfoFrontSideOcrResult  # noqa: F401,E501


class FaceIdResultResponseIdcardInfoFrontSide(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ocr_result': 'FaceIdResultResponseIdcardInfoFrontSideOcrResult',
        'upload_times': 'float'
    }

    attribute_map = {
        'ocr_result': 'ocr_result',
        'upload_times': 'upload_times'
    }

    def __init__(self, ocr_result=None, upload_times=None):  # noqa: E501
        """FaceIdResultResponseIdcardInfoFrontSide - a model defined in Swagger"""  # noqa: E501

        self._ocr_result = None
        self._upload_times = None
        self.discriminator = None

        if ocr_result is not None:
            self.ocr_result = ocr_result
        if upload_times is not None:
            self.upload_times = upload_times

    @property
    def ocr_result(self):
        """Gets the ocr_result of this FaceIdResultResponseIdcardInfoFrontSide.  # noqa: E501


        :return: The ocr_result of this FaceIdResultResponseIdcardInfoFrontSide.  # noqa: E501
        :rtype: FaceIdResultResponseIdcardInfoFrontSideOcrResult
        """
        return self._ocr_result

    @ocr_result.setter
    def ocr_result(self, ocr_result):
        """Sets the ocr_result of this FaceIdResultResponseIdcardInfoFrontSide.


        :param ocr_result: The ocr_result of this FaceIdResultResponseIdcardInfoFrontSide.  # noqa: E501
        :type: FaceIdResultResponseIdcardInfoFrontSideOcrResult
        """

        self._ocr_result = ocr_result

    @property
    def upload_times(self):
        """Gets the upload_times of this FaceIdResultResponseIdcardInfoFrontSide.  # noqa: E501


        :return: The upload_times of this FaceIdResultResponseIdcardInfoFrontSide.  # noqa: E501
        :rtype: float
        """
        return self._upload_times

    @upload_times.setter
    def upload_times(self, upload_times):
        """Sets the upload_times of this FaceIdResultResponseIdcardInfoFrontSide.


        :param upload_times: The upload_times of this FaceIdResultResponseIdcardInfoFrontSide.  # noqa: E501
        :type: float
        """

        self._upload_times = upload_times

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FaceIdResultResponseIdcardInfoFrontSide, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceIdResultResponseIdcardInfoFrontSide):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
