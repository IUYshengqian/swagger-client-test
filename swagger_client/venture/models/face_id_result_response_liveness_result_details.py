# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FaceIdResultResponseLivenessResultDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_times': 'float',
        'face_not_found': 'float',
        'low_face_quality': 'float',
        'invalid_video_duration': 'float',
        'sr_error': 'float',
        'not_synchronized': 'float',
        'vidoe_format_unsupported': 'float',
        'no_audio': 'float'
    }

    attribute_map = {
        'upload_times': 'UPLOAD_TIMES',
        'face_not_found': 'FACE_NOT_FOUND',
        'low_face_quality': 'LOW_FACE_QUALITY',
        'invalid_video_duration': 'INVALID_VIDEO_DURATION',
        'sr_error': 'SR_ERROR',
        'not_synchronized': 'NOT_SYNCHRONIZED',
        'vidoe_format_unsupported': 'VIDOE_FORMAT_UNSUPPORTED',
        'no_audio': 'NO_AUDIO'
    }

    def __init__(self, upload_times=None, face_not_found=None, low_face_quality=None, invalid_video_duration=None, sr_error=None, not_synchronized=None, vidoe_format_unsupported=None, no_audio=None):  # noqa: E501
        """FaceIdResultResponseLivenessResultDetails - a model defined in Swagger"""  # noqa: E501

        self._upload_times = None
        self._face_not_found = None
        self._low_face_quality = None
        self._invalid_video_duration = None
        self._sr_error = None
        self._not_synchronized = None
        self._vidoe_format_unsupported = None
        self._no_audio = None
        self.discriminator = None

        if upload_times is not None:
            self.upload_times = upload_times
        if face_not_found is not None:
            self.face_not_found = face_not_found
        if low_face_quality is not None:
            self.low_face_quality = low_face_quality
        if invalid_video_duration is not None:
            self.invalid_video_duration = invalid_video_duration
        if sr_error is not None:
            self.sr_error = sr_error
        if not_synchronized is not None:
            self.not_synchronized = not_synchronized
        if vidoe_format_unsupported is not None:
            self.vidoe_format_unsupported = vidoe_format_unsupported
        if no_audio is not None:
            self.no_audio = no_audio

    @property
    def upload_times(self):
        """Gets the upload_times of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501


        :return: The upload_times of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :rtype: float
        """
        return self._upload_times

    @upload_times.setter
    def upload_times(self, upload_times):
        """Sets the upload_times of this FaceIdResultResponseLivenessResultDetails.


        :param upload_times: The upload_times of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :type: float
        """

        self._upload_times = upload_times

    @property
    def face_not_found(self):
        """Gets the face_not_found of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501


        :return: The face_not_found of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :rtype: float
        """
        return self._face_not_found

    @face_not_found.setter
    def face_not_found(self, face_not_found):
        """Sets the face_not_found of this FaceIdResultResponseLivenessResultDetails.


        :param face_not_found: The face_not_found of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :type: float
        """

        self._face_not_found = face_not_found

    @property
    def low_face_quality(self):
        """Gets the low_face_quality of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501


        :return: The low_face_quality of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :rtype: float
        """
        return self._low_face_quality

    @low_face_quality.setter
    def low_face_quality(self, low_face_quality):
        """Sets the low_face_quality of this FaceIdResultResponseLivenessResultDetails.


        :param low_face_quality: The low_face_quality of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :type: float
        """

        self._low_face_quality = low_face_quality

    @property
    def invalid_video_duration(self):
        """Gets the invalid_video_duration of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501


        :return: The invalid_video_duration of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :rtype: float
        """
        return self._invalid_video_duration

    @invalid_video_duration.setter
    def invalid_video_duration(self, invalid_video_duration):
        """Sets the invalid_video_duration of this FaceIdResultResponseLivenessResultDetails.


        :param invalid_video_duration: The invalid_video_duration of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :type: float
        """

        self._invalid_video_duration = invalid_video_duration

    @property
    def sr_error(self):
        """Gets the sr_error of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501


        :return: The sr_error of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :rtype: float
        """
        return self._sr_error

    @sr_error.setter
    def sr_error(self, sr_error):
        """Sets the sr_error of this FaceIdResultResponseLivenessResultDetails.


        :param sr_error: The sr_error of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :type: float
        """

        self._sr_error = sr_error

    @property
    def not_synchronized(self):
        """Gets the not_synchronized of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501


        :return: The not_synchronized of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :rtype: float
        """
        return self._not_synchronized

    @not_synchronized.setter
    def not_synchronized(self, not_synchronized):
        """Sets the not_synchronized of this FaceIdResultResponseLivenessResultDetails.


        :param not_synchronized: The not_synchronized of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :type: float
        """

        self._not_synchronized = not_synchronized

    @property
    def vidoe_format_unsupported(self):
        """Gets the vidoe_format_unsupported of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501


        :return: The vidoe_format_unsupported of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :rtype: float
        """
        return self._vidoe_format_unsupported

    @vidoe_format_unsupported.setter
    def vidoe_format_unsupported(self, vidoe_format_unsupported):
        """Sets the vidoe_format_unsupported of this FaceIdResultResponseLivenessResultDetails.


        :param vidoe_format_unsupported: The vidoe_format_unsupported of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :type: float
        """

        self._vidoe_format_unsupported = vidoe_format_unsupported

    @property
    def no_audio(self):
        """Gets the no_audio of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501


        :return: The no_audio of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :rtype: float
        """
        return self._no_audio

    @no_audio.setter
    def no_audio(self, no_audio):
        """Sets the no_audio of this FaceIdResultResponseLivenessResultDetails.


        :param no_audio: The no_audio of this FaceIdResultResponseLivenessResultDetails.  # noqa: E501
        :type: float
        """

        self._no_audio = no_audio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FaceIdResultResponseLivenessResultDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceIdResultResponseLivenessResultDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
