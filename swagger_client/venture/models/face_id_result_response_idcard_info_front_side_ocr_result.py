# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.venture.models.face_id_result_response_idcard_info_front_side_ocr_result_birthday import FaceIdResultResponseIdcardInfoFrontSideOcrResultBirthday  # noqa: F401,E501
from swagger_client.venture.models.face_id_result_response_idcard_info_front_side_ocr_result_legality import FaceIdResultResponseIdcardInfoFrontSideOcrResultLegality  # noqa: F401,E501


class FaceIdResultResponseIdcardInfoFrontSideOcrResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'birthday': 'FaceIdResultResponseIdcardInfoFrontSideOcrResultBirthday',
        'gender': 'str',
        'id_card_number': 'str',
        'name': 'str',
        'race': 'str',
        'legality': 'FaceIdResultResponseIdcardInfoFrontSideOcrResultLegality'
    }

    attribute_map = {
        'address': 'address',
        'birthday': 'birthday',
        'gender': 'gender',
        'id_card_number': 'id_card_number',
        'name': 'name',
        'race': 'race',
        'legality': 'legality'
    }

    def __init__(self, address=None, birthday=None, gender=None, id_card_number=None, name=None, race=None, legality=None):  # noqa: E501
        """FaceIdResultResponseIdcardInfoFrontSideOcrResult - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._birthday = None
        self._gender = None
        self._id_card_number = None
        self._name = None
        self._race = None
        self._legality = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if birthday is not None:
            self.birthday = birthday
        if gender is not None:
            self.gender = gender
        if id_card_number is not None:
            self.id_card_number = id_card_number
        if name is not None:
            self.name = name
        if race is not None:
            self.race = race
        if legality is not None:
            self.legality = legality

    @property
    def address(self):
        """Gets the address of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501


        :return: The address of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.


        :param address: The address of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def birthday(self):
        """Gets the birthday of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501


        :return: The birthday of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :rtype: FaceIdResultResponseIdcardInfoFrontSideOcrResultBirthday
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.


        :param birthday: The birthday of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :type: FaceIdResultResponseIdcardInfoFrontSideOcrResultBirthday
        """

        self._birthday = birthday

    @property
    def gender(self):
        """Gets the gender of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501


        :return: The gender of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.


        :param gender: The gender of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def id_card_number(self):
        """Gets the id_card_number of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501


        :return: The id_card_number of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :rtype: str
        """
        return self._id_card_number

    @id_card_number.setter
    def id_card_number(self, id_card_number):
        """Sets the id_card_number of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.


        :param id_card_number: The id_card_number of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :type: str
        """

        self._id_card_number = id_card_number

    @property
    def name(self):
        """Gets the name of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501


        :return: The name of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.


        :param name: The name of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def race(self):
        """Gets the race of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501


        :return: The race of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.


        :param race: The race of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :type: str
        """

        self._race = race

    @property
    def legality(self):
        """Gets the legality of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501


        :return: The legality of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :rtype: FaceIdResultResponseIdcardInfoFrontSideOcrResultLegality
        """
        return self._legality

    @legality.setter
    def legality(self, legality):
        """Sets the legality of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.


        :param legality: The legality of this FaceIdResultResponseIdcardInfoFrontSideOcrResult.  # noqa: E501
        :type: FaceIdResultResponseIdcardInfoFrontSideOcrResultLegality
        """

        self._legality = legality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FaceIdResultResponseIdcardInfoFrontSideOcrResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceIdResultResponseIdcardInfoFrontSideOcrResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
