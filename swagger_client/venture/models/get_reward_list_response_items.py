# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetRewardListResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'reward': 'str',
        'exchang': 'str',
        'reward_type': 'str',
        'trade_at': 'str'
    }

    attribute_map = {
        'account': 'account',
        'reward': 'reward',
        'exchang': 'exchang',
        'reward_type': 'rewardType',
        'trade_at': 'tradeAt'
    }

    def __init__(self, account=None, reward=None, exchang=None, reward_type=None, trade_at=None):  # noqa: E501
        """GetRewardListResponseItems - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._reward = None
        self._exchang = None
        self._reward_type = None
        self._trade_at = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if reward is not None:
            self.reward = reward
        if exchang is not None:
            self.exchang = exchang
        if reward_type is not None:
            self.reward_type = reward_type
        if trade_at is not None:
            self.trade_at = trade_at

    @property
    def account(self):
        """Gets the account of this GetRewardListResponseItems.  # noqa: E501

        账户名  # noqa: E501

        :return: The account of this GetRewardListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this GetRewardListResponseItems.

        账户名  # noqa: E501

        :param account: The account of this GetRewardListResponseItems.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def reward(self):
        """Gets the reward of this GetRewardListResponseItems.  # noqa: E501

        奖励金额  # noqa: E501

        :return: The reward of this GetRewardListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this GetRewardListResponseItems.

        奖励金额  # noqa: E501

        :param reward: The reward of this GetRewardListResponseItems.  # noqa: E501
        :type: str
        """

        self._reward = reward

    @property
    def exchang(self):
        """Gets the exchang of this GetRewardListResponseItems.  # noqa: E501

        交易所  # noqa: E501

        :return: The exchang of this GetRewardListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchang

    @exchang.setter
    def exchang(self, exchang):
        """Sets the exchang of this GetRewardListResponseItems.

        交易所  # noqa: E501

        :param exchang: The exchang of this GetRewardListResponseItems.  # noqa: E501
        :type: str
        """

        self._exchang = exchang

    @property
    def reward_type(self):
        """Gets the reward_type of this GetRewardListResponseItems.  # noqa: E501

        奖励类型  # noqa: E501

        :return: The reward_type of this GetRewardListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._reward_type

    @reward_type.setter
    def reward_type(self, reward_type):
        """Sets the reward_type of this GetRewardListResponseItems.

        奖励类型  # noqa: E501

        :param reward_type: The reward_type of this GetRewardListResponseItems.  # noqa: E501
        :type: str
        """

        self._reward_type = reward_type

    @property
    def trade_at(self):
        """Gets the trade_at of this GetRewardListResponseItems.  # noqa: E501

        交易时间  # noqa: E501

        :return: The trade_at of this GetRewardListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trade_at

    @trade_at.setter
    def trade_at(self, trade_at):
        """Sets the trade_at of this GetRewardListResponseItems.

        交易时间  # noqa: E501

        :param trade_at: The trade_at of this GetRewardListResponseItems.  # noqa: E501
        :type: str
        """

        self._trade_at = trade_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetRewardListResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRewardListResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
