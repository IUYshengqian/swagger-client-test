# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetMarketsResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exchange_id': 'str',
        'exchange': 'str',
        'logo': 'str',
        'trading_pair': 'str',
        'market_id': 'str',
        'listed_at': 'str'
    }

    attribute_map = {
        'exchange_id': 'exchangeId',
        'exchange': 'exchange',
        'logo': 'logo',
        'trading_pair': 'tradingPair',
        'market_id': 'marketId',
        'listed_at': 'listedAt'
    }

    def __init__(self, exchange_id=None, exchange=None, logo=None, trading_pair=None, market_id=None, listed_at=None):  # noqa: E501
        """GetMarketsResponseItems - a model defined in Swagger"""  # noqa: E501

        self._exchange_id = None
        self._exchange = None
        self._logo = None
        self._trading_pair = None
        self._market_id = None
        self._listed_at = None
        self.discriminator = None

        if exchange_id is not None:
            self.exchange_id = exchange_id
        if exchange is not None:
            self.exchange = exchange
        if logo is not None:
            self.logo = logo
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if market_id is not None:
            self.market_id = market_id
        if listed_at is not None:
            self.listed_at = listed_at

    @property
    def exchange_id(self):
        """Gets the exchange_id of this GetMarketsResponseItems.  # noqa: E501

        交易所ID  # noqa: E501

        :return: The exchange_id of this GetMarketsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this GetMarketsResponseItems.

        交易所ID  # noqa: E501

        :param exchange_id: The exchange_id of this GetMarketsResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange_id = exchange_id

    @property
    def exchange(self):
        """Gets the exchange of this GetMarketsResponseItems.  # noqa: E501

        交易所名称  # noqa: E501

        :return: The exchange of this GetMarketsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this GetMarketsResponseItems.

        交易所名称  # noqa: E501

        :param exchange: The exchange of this GetMarketsResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def logo(self):
        """Gets the logo of this GetMarketsResponseItems.  # noqa: E501

        交易所图标  # noqa: E501

        :return: The logo of this GetMarketsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this GetMarketsResponseItems.

        交易所图标  # noqa: E501

        :param logo: The logo of this GetMarketsResponseItems.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def trading_pair(self):
        """Gets the trading_pair of this GetMarketsResponseItems.  # noqa: E501

        交易对  # noqa: E501

        :return: The trading_pair of this GetMarketsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this GetMarketsResponseItems.

        交易对  # noqa: E501

        :param trading_pair: The trading_pair of this GetMarketsResponseItems.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def market_id(self):
        """Gets the market_id of this GetMarketsResponseItems.  # noqa: E501

        市场ID  # noqa: E501

        :return: The market_id of this GetMarketsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._market_id

    @market_id.setter
    def market_id(self, market_id):
        """Sets the market_id of this GetMarketsResponseItems.

        市场ID  # noqa: E501

        :param market_id: The market_id of this GetMarketsResponseItems.  # noqa: E501
        :type: str
        """

        self._market_id = market_id

    @property
    def listed_at(self):
        """Gets the listed_at of this GetMarketsResponseItems.  # noqa: E501

        上币时间  # noqa: E501

        :return: The listed_at of this GetMarketsResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._listed_at

    @listed_at.setter
    def listed_at(self, listed_at):
        """Sets the listed_at of this GetMarketsResponseItems.

        上币时间  # noqa: E501

        :param listed_at: The listed_at of this GetMarketsResponseItems.  # noqa: E501
        :type: str
        """

        self._listed_at = listed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetMarketsResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMarketsResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
