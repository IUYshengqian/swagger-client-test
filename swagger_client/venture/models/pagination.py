# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.venture.models.pagination_links import PaginationLinks  # noqa: F401,E501


class Pagination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requested_page': 'int',
        'page': 'int',
        'total_page': 'int',
        'items_per_page': 'int',
        'total_count': 'int',
        'links': 'list[PaginationLinks]'
    }

    attribute_map = {
        'requested_page': 'requestedPage',
        'page': 'page',
        'total_page': 'totalPage',
        'items_per_page': 'itemsPerPage',
        'total_count': 'totalCount',
        'links': 'links'
    }

    def __init__(self, requested_page=None, page=None, total_page=None, items_per_page=None, total_count=None, links=None):  # noqa: E501
        """Pagination - a model defined in Swagger"""  # noqa: E501

        self._requested_page = None
        self._page = None
        self._total_page = None
        self._items_per_page = None
        self._total_count = None
        self._links = None
        self.discriminator = None

        if requested_page is not None:
            self.requested_page = requested_page
        if page is not None:
            self.page = page
        if total_page is not None:
            self.total_page = total_page
        if items_per_page is not None:
            self.items_per_page = items_per_page
        if total_count is not None:
            self.total_count = total_count
        if links is not None:
            self.links = links

    @property
    def requested_page(self):
        """Gets the requested_page of this Pagination.  # noqa: E501

        请求的页码  # noqa: E501

        :return: The requested_page of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._requested_page

    @requested_page.setter
    def requested_page(self, requested_page):
        """Sets the requested_page of this Pagination.

        请求的页码  # noqa: E501

        :param requested_page: The requested_page of this Pagination.  # noqa: E501
        :type: int
        """

        self._requested_page = requested_page

    @property
    def page(self):
        """Gets the page of this Pagination.  # noqa: E501

        实际的页码  # noqa: E501

        :return: The page of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Pagination.

        实际的页码  # noqa: E501

        :param page: The page of this Pagination.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def total_page(self):
        """Gets the total_page of this Pagination.  # noqa: E501

        总页码数  # noqa: E501

        :return: The total_page of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._total_page

    @total_page.setter
    def total_page(self, total_page):
        """Sets the total_page of this Pagination.

        总页码数  # noqa: E501

        :param total_page: The total_page of this Pagination.  # noqa: E501
        :type: int
        """

        self._total_page = total_page

    @property
    def items_per_page(self):
        """Gets the items_per_page of this Pagination.  # noqa: E501

        每页条目数  # noqa: E501

        :return: The items_per_page of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this Pagination.

        每页条目数  # noqa: E501

        :param items_per_page: The items_per_page of this Pagination.  # noqa: E501
        :type: int
        """

        self._items_per_page = items_per_page

    @property
    def total_count(self):
        """Gets the total_count of this Pagination.  # noqa: E501

        总条数  # noqa: E501

        :return: The total_count of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Pagination.

        总条数  # noqa: E501

        :param total_count: The total_count of this Pagination.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def links(self):
        """Gets the links of this Pagination.  # noqa: E501

        相关链接  # noqa: E501

        :return: The links of this Pagination.  # noqa: E501
        :rtype: list[PaginationLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Pagination.

        相关链接  # noqa: E501

        :param links: The links of this Pagination.  # noqa: E501
        :type: list[PaginationLinks]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pagination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pagination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
