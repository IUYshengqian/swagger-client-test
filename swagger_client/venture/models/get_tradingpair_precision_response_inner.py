# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetTradingpairPrecisionResponseInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trading_pair': 'str',
        'seller_coin_id': 'str',
        'buyer_coin_id': 'str',
        'number_places': 'int',
        'price_places': 'int'
    }

    attribute_map = {
        'trading_pair': 'tradingPair',
        'seller_coin_id': 'sellerCoinId',
        'buyer_coin_id': 'buyerCoinId',
        'number_places': 'numberPlaces',
        'price_places': 'pricePlaces'
    }

    def __init__(self, trading_pair=None, seller_coin_id=None, buyer_coin_id=None, number_places=None, price_places=None):  # noqa: E501
        """GetTradingpairPrecisionResponseInner - a model defined in Swagger"""  # noqa: E501

        self._trading_pair = None
        self._seller_coin_id = None
        self._buyer_coin_id = None
        self._number_places = None
        self._price_places = None
        self.discriminator = None

        if trading_pair is not None:
            self.trading_pair = trading_pair
        if seller_coin_id is not None:
            self.seller_coin_id = seller_coin_id
        if buyer_coin_id is not None:
            self.buyer_coin_id = buyer_coin_id
        if number_places is not None:
            self.number_places = number_places
        if price_places is not None:
            self.price_places = price_places

    @property
    def trading_pair(self):
        """Gets the trading_pair of this GetTradingpairPrecisionResponseInner.  # noqa: E501

        交易对  # noqa: E501

        :return: The trading_pair of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this GetTradingpairPrecisionResponseInner.

        交易对  # noqa: E501

        :param trading_pair: The trading_pair of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def seller_coin_id(self):
        """Gets the seller_coin_id of this GetTradingpairPrecisionResponseInner.  # noqa: E501

        卖方币种id  # noqa: E501

        :return: The seller_coin_id of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._seller_coin_id

    @seller_coin_id.setter
    def seller_coin_id(self, seller_coin_id):
        """Sets the seller_coin_id of this GetTradingpairPrecisionResponseInner.

        卖方币种id  # noqa: E501

        :param seller_coin_id: The seller_coin_id of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :type: str
        """

        self._seller_coin_id = seller_coin_id

    @property
    def buyer_coin_id(self):
        """Gets the buyer_coin_id of this GetTradingpairPrecisionResponseInner.  # noqa: E501

        买方币种id  # noqa: E501

        :return: The buyer_coin_id of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._buyer_coin_id

    @buyer_coin_id.setter
    def buyer_coin_id(self, buyer_coin_id):
        """Sets the buyer_coin_id of this GetTradingpairPrecisionResponseInner.

        买方币种id  # noqa: E501

        :param buyer_coin_id: The buyer_coin_id of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :type: str
        """

        self._buyer_coin_id = buyer_coin_id

    @property
    def number_places(self):
        """Gets the number_places of this GetTradingpairPrecisionResponseInner.  # noqa: E501

        数量小数位数  # noqa: E501

        :return: The number_places of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :rtype: int
        """
        return self._number_places

    @number_places.setter
    def number_places(self, number_places):
        """Sets the number_places of this GetTradingpairPrecisionResponseInner.

        数量小数位数  # noqa: E501

        :param number_places: The number_places of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :type: int
        """

        self._number_places = number_places

    @property
    def price_places(self):
        """Gets the price_places of this GetTradingpairPrecisionResponseInner.  # noqa: E501

        价格小数位数  # noqa: E501

        :return: The price_places of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :rtype: int
        """
        return self._price_places

    @price_places.setter
    def price_places(self, price_places):
        """Sets the price_places of this GetTradingpairPrecisionResponseInner.

        价格小数位数  # noqa: E501

        :param price_places: The price_places of this GetTradingpairPrecisionResponseInner.  # noqa: E501
        :type: int
        """

        self._price_places = price_places

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTradingpairPrecisionResponseInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTradingpairPrecisionResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
