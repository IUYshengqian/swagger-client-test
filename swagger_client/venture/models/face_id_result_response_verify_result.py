# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.venture.models.face_id_result_response_verify_result_id_exceptions import FaceIdResultResponseVerifyResultIdExceptions  # noqa: F401,E501
from swagger_client.venture.models.face_id_result_response_verify_result_result_faceid import FaceIdResultResponseVerifyResultResultFaceid  # noqa: F401,E501


class FaceIdResultResponseVerifyResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result_faceid': 'FaceIdResultResponseVerifyResultResultFaceid',
        'result_ref1': 'FaceIdResultResponseVerifyResultResultFaceid',
        'result_idcard_photo': 'FaceIdResultResponseVerifyResultResultFaceid',
        'result_idcard_datasource': 'FaceIdResultResponseVerifyResultResultFaceid',
        'id_exceptions': 'FaceIdResultResponseVerifyResultIdExceptions'
    }

    attribute_map = {
        'result_faceid': 'result_faceid',
        'result_ref1': 'result_ref1',
        'result_idcard_photo': 'result_idcard_photo',
        'result_idcard_datasource': 'result_idcard_datasource',
        'id_exceptions': 'id_exceptions'
    }

    def __init__(self, result_faceid=None, result_ref1=None, result_idcard_photo=None, result_idcard_datasource=None, id_exceptions=None):  # noqa: E501
        """FaceIdResultResponseVerifyResult - a model defined in Swagger"""  # noqa: E501

        self._result_faceid = None
        self._result_ref1 = None
        self._result_idcard_photo = None
        self._result_idcard_datasource = None
        self._id_exceptions = None
        self.discriminator = None

        if result_faceid is not None:
            self.result_faceid = result_faceid
        if result_ref1 is not None:
            self.result_ref1 = result_ref1
        if result_idcard_photo is not None:
            self.result_idcard_photo = result_idcard_photo
        if result_idcard_datasource is not None:
            self.result_idcard_datasource = result_idcard_datasource
        if id_exceptions is not None:
            self.id_exceptions = id_exceptions

    @property
    def result_faceid(self):
        """Gets the result_faceid of this FaceIdResultResponseVerifyResult.  # noqa: E501


        :return: The result_faceid of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :rtype: FaceIdResultResponseVerifyResultResultFaceid
        """
        return self._result_faceid

    @result_faceid.setter
    def result_faceid(self, result_faceid):
        """Sets the result_faceid of this FaceIdResultResponseVerifyResult.


        :param result_faceid: The result_faceid of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :type: FaceIdResultResponseVerifyResultResultFaceid
        """

        self._result_faceid = result_faceid

    @property
    def result_ref1(self):
        """Gets the result_ref1 of this FaceIdResultResponseVerifyResult.  # noqa: E501


        :return: The result_ref1 of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :rtype: FaceIdResultResponseVerifyResultResultFaceid
        """
        return self._result_ref1

    @result_ref1.setter
    def result_ref1(self, result_ref1):
        """Sets the result_ref1 of this FaceIdResultResponseVerifyResult.


        :param result_ref1: The result_ref1 of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :type: FaceIdResultResponseVerifyResultResultFaceid
        """

        self._result_ref1 = result_ref1

    @property
    def result_idcard_photo(self):
        """Gets the result_idcard_photo of this FaceIdResultResponseVerifyResult.  # noqa: E501


        :return: The result_idcard_photo of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :rtype: FaceIdResultResponseVerifyResultResultFaceid
        """
        return self._result_idcard_photo

    @result_idcard_photo.setter
    def result_idcard_photo(self, result_idcard_photo):
        """Sets the result_idcard_photo of this FaceIdResultResponseVerifyResult.


        :param result_idcard_photo: The result_idcard_photo of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :type: FaceIdResultResponseVerifyResultResultFaceid
        """

        self._result_idcard_photo = result_idcard_photo

    @property
    def result_idcard_datasource(self):
        """Gets the result_idcard_datasource of this FaceIdResultResponseVerifyResult.  # noqa: E501


        :return: The result_idcard_datasource of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :rtype: FaceIdResultResponseVerifyResultResultFaceid
        """
        return self._result_idcard_datasource

    @result_idcard_datasource.setter
    def result_idcard_datasource(self, result_idcard_datasource):
        """Sets the result_idcard_datasource of this FaceIdResultResponseVerifyResult.


        :param result_idcard_datasource: The result_idcard_datasource of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :type: FaceIdResultResponseVerifyResultResultFaceid
        """

        self._result_idcard_datasource = result_idcard_datasource

    @property
    def id_exceptions(self):
        """Gets the id_exceptions of this FaceIdResultResponseVerifyResult.  # noqa: E501


        :return: The id_exceptions of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :rtype: FaceIdResultResponseVerifyResultIdExceptions
        """
        return self._id_exceptions

    @id_exceptions.setter
    def id_exceptions(self, id_exceptions):
        """Sets the id_exceptions of this FaceIdResultResponseVerifyResult.


        :param id_exceptions: The id_exceptions of this FaceIdResultResponseVerifyResult.  # noqa: E501
        :type: FaceIdResultResponseVerifyResultIdExceptions
        """

        self._id_exceptions = id_exceptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FaceIdResultResponseVerifyResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceIdResultResponseVerifyResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
