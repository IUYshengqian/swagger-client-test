# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.venture.models.face_id_result_response_idcard_info_back_side import FaceIdResultResponseIdcardInfoBackSide  # noqa: F401,E501
from swagger_client.venture.models.face_id_result_response_idcard_info_front_side import FaceIdResultResponseIdcardInfoFrontSide  # noqa: F401,E501


class FaceIdResultResponseIdcardInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idcard_mode': 'str',
        'idcard_uneditable_feild': 'str',
        'idcard_number': 'str',
        'idcard_name': 'str',
        'idcard_issued_by': 'str',
        'front_side': 'FaceIdResultResponseIdcardInfoFrontSide',
        'back_side': 'FaceIdResultResponseIdcardInfoBackSide'
    }

    attribute_map = {
        'idcard_mode': 'idcard_mode',
        'idcard_uneditable_feild': 'idcard_uneditable_feild',
        'idcard_number': 'idcard_number',
        'idcard_name': 'idcard_name',
        'idcard_issued_by': 'idcard_issued_by',
        'front_side': 'front_side',
        'back_side': 'back_side'
    }

    def __init__(self, idcard_mode=None, idcard_uneditable_feild=None, idcard_number=None, idcard_name=None, idcard_issued_by=None, front_side=None, back_side=None):  # noqa: E501
        """FaceIdResultResponseIdcardInfo - a model defined in Swagger"""  # noqa: E501

        self._idcard_mode = None
        self._idcard_uneditable_feild = None
        self._idcard_number = None
        self._idcard_name = None
        self._idcard_issued_by = None
        self._front_side = None
        self._back_side = None
        self.discriminator = None

        if idcard_mode is not None:
            self.idcard_mode = idcard_mode
        if idcard_uneditable_feild is not None:
            self.idcard_uneditable_feild = idcard_uneditable_feild
        if idcard_number is not None:
            self.idcard_number = idcard_number
        if idcard_name is not None:
            self.idcard_name = idcard_name
        if idcard_issued_by is not None:
            self.idcard_issued_by = idcard_issued_by
        if front_side is not None:
            self.front_side = front_side
        if back_side is not None:
            self.back_side = back_side

    @property
    def idcard_mode(self):
        """Gets the idcard_mode of this FaceIdResultResponseIdcardInfo.  # noqa: E501


        :return: The idcard_mode of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :rtype: str
        """
        return self._idcard_mode

    @idcard_mode.setter
    def idcard_mode(self, idcard_mode):
        """Sets the idcard_mode of this FaceIdResultResponseIdcardInfo.


        :param idcard_mode: The idcard_mode of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :type: str
        """

        self._idcard_mode = idcard_mode

    @property
    def idcard_uneditable_feild(self):
        """Gets the idcard_uneditable_feild of this FaceIdResultResponseIdcardInfo.  # noqa: E501


        :return: The idcard_uneditable_feild of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :rtype: str
        """
        return self._idcard_uneditable_feild

    @idcard_uneditable_feild.setter
    def idcard_uneditable_feild(self, idcard_uneditable_feild):
        """Sets the idcard_uneditable_feild of this FaceIdResultResponseIdcardInfo.


        :param idcard_uneditable_feild: The idcard_uneditable_feild of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :type: str
        """

        self._idcard_uneditable_feild = idcard_uneditable_feild

    @property
    def idcard_number(self):
        """Gets the idcard_number of this FaceIdResultResponseIdcardInfo.  # noqa: E501


        :return: The idcard_number of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :rtype: str
        """
        return self._idcard_number

    @idcard_number.setter
    def idcard_number(self, idcard_number):
        """Sets the idcard_number of this FaceIdResultResponseIdcardInfo.


        :param idcard_number: The idcard_number of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :type: str
        """

        self._idcard_number = idcard_number

    @property
    def idcard_name(self):
        """Gets the idcard_name of this FaceIdResultResponseIdcardInfo.  # noqa: E501


        :return: The idcard_name of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :rtype: str
        """
        return self._idcard_name

    @idcard_name.setter
    def idcard_name(self, idcard_name):
        """Sets the idcard_name of this FaceIdResultResponseIdcardInfo.


        :param idcard_name: The idcard_name of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :type: str
        """

        self._idcard_name = idcard_name

    @property
    def idcard_issued_by(self):
        """Gets the idcard_issued_by of this FaceIdResultResponseIdcardInfo.  # noqa: E501


        :return: The idcard_issued_by of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :rtype: str
        """
        return self._idcard_issued_by

    @idcard_issued_by.setter
    def idcard_issued_by(self, idcard_issued_by):
        """Sets the idcard_issued_by of this FaceIdResultResponseIdcardInfo.


        :param idcard_issued_by: The idcard_issued_by of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :type: str
        """

        self._idcard_issued_by = idcard_issued_by

    @property
    def front_side(self):
        """Gets the front_side of this FaceIdResultResponseIdcardInfo.  # noqa: E501


        :return: The front_side of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :rtype: FaceIdResultResponseIdcardInfoFrontSide
        """
        return self._front_side

    @front_side.setter
    def front_side(self, front_side):
        """Sets the front_side of this FaceIdResultResponseIdcardInfo.


        :param front_side: The front_side of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :type: FaceIdResultResponseIdcardInfoFrontSide
        """

        self._front_side = front_side

    @property
    def back_side(self):
        """Gets the back_side of this FaceIdResultResponseIdcardInfo.  # noqa: E501


        :return: The back_side of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :rtype: FaceIdResultResponseIdcardInfoBackSide
        """
        return self._back_side

    @back_side.setter
    def back_side(self, back_side):
        """Sets the back_side of this FaceIdResultResponseIdcardInfo.


        :param back_side: The back_side of this FaceIdResultResponseIdcardInfo.  # noqa: E501
        :type: FaceIdResultResponseIdcardInfoBackSide
        """

        self._back_side = back_side

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FaceIdResultResponseIdcardInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceIdResultResponseIdcardInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
