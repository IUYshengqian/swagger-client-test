# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostWithdrawRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tra_password': 'str',
        'base_token': 'str',
        'coin_id': 'str',
        'amount': 'str',
        'address_tag': 'str',
        'remark': 'str',
        'address': 'str',
        'is_save_address': 'bool'
    }

    attribute_map = {
        'tra_password': 'traPassword',
        'base_token': 'baseToken',
        'coin_id': 'coinId',
        'amount': 'amount',
        'address_tag': 'addressTag',
        'remark': 'remark',
        'address': 'address',
        'is_save_address': 'isSaveAddress'
    }

    def __init__(self, tra_password=None, base_token=None, coin_id=None, amount=None, address_tag=None, remark=None, address=None, is_save_address=None):  # noqa: E501
        """PostWithdrawRequest - a model defined in Swagger"""  # noqa: E501

        self._tra_password = None
        self._base_token = None
        self._coin_id = None
        self._amount = None
        self._address_tag = None
        self._remark = None
        self._address = None
        self._is_save_address = None
        self.discriminator = None

        if tra_password is not None:
            self.tra_password = tra_password
        if base_token is not None:
            self.base_token = base_token
        if coin_id is not None:
            self.coin_id = coin_id
        if amount is not None:
            self.amount = amount
        if address_tag is not None:
            self.address_tag = address_tag
        if remark is not None:
            self.remark = remark
        if address is not None:
            self.address = address
        if is_save_address is not None:
            self.is_save_address = is_save_address

    @property
    def tra_password(self):
        """Gets the tra_password of this PostWithdrawRequest.  # noqa: E501

        资金密码  # noqa: E501

        :return: The tra_password of this PostWithdrawRequest.  # noqa: E501
        :rtype: str
        """
        return self._tra_password

    @tra_password.setter
    def tra_password(self, tra_password):
        """Sets the tra_password of this PostWithdrawRequest.

        资金密码  # noqa: E501

        :param tra_password: The tra_password of this PostWithdrawRequest.  # noqa: E501
        :type: str
        """
        if tra_password is not None and len(tra_password) > 16:
            raise ValueError("Invalid value for `tra_password`, length must be less than or equal to `16`")  # noqa: E501
        if tra_password is not None and len(tra_password) < 8:
            raise ValueError("Invalid value for `tra_password`, length must be greater than or equal to `8`")  # noqa: E501

        self._tra_password = tra_password

    @property
    def base_token(self):
        """Gets the base_token of this PostWithdrawRequest.  # noqa: E501

        baseToken  # noqa: E501

        :return: The base_token of this PostWithdrawRequest.  # noqa: E501
        :rtype: str
        """
        return self._base_token

    @base_token.setter
    def base_token(self, base_token):
        """Sets the base_token of this PostWithdrawRequest.

        baseToken  # noqa: E501

        :param base_token: The base_token of this PostWithdrawRequest.  # noqa: E501
        :type: str
        """

        self._base_token = base_token

    @property
    def coin_id(self):
        """Gets the coin_id of this PostWithdrawRequest.  # noqa: E501

        币种id  # noqa: E501

        :return: The coin_id of this PostWithdrawRequest.  # noqa: E501
        :rtype: str
        """
        return self._coin_id

    @coin_id.setter
    def coin_id(self, coin_id):
        """Sets the coin_id of this PostWithdrawRequest.

        币种id  # noqa: E501

        :param coin_id: The coin_id of this PostWithdrawRequest.  # noqa: E501
        :type: str
        """

        self._coin_id = coin_id

    @property
    def amount(self):
        """Gets the amount of this PostWithdrawRequest.  # noqa: E501

        数量  # noqa: E501

        :return: The amount of this PostWithdrawRequest.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PostWithdrawRequest.

        数量  # noqa: E501

        :param amount: The amount of this PostWithdrawRequest.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def address_tag(self):
        """Gets the address_tag of this PostWithdrawRequest.  # noqa: E501

        地址标签  # noqa: E501

        :return: The address_tag of this PostWithdrawRequest.  # noqa: E501
        :rtype: str
        """
        return self._address_tag

    @address_tag.setter
    def address_tag(self, address_tag):
        """Sets the address_tag of this PostWithdrawRequest.

        地址标签  # noqa: E501

        :param address_tag: The address_tag of this PostWithdrawRequest.  # noqa: E501
        :type: str
        """
        if address_tag is not None and len(address_tag) > 128:
            raise ValueError("Invalid value for `address_tag`, length must be less than or equal to `128`")  # noqa: E501

        self._address_tag = address_tag

    @property
    def remark(self):
        """Gets the remark of this PostWithdrawRequest.  # noqa: E501

        地址备注  # noqa: E501

        :return: The remark of this PostWithdrawRequest.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this PostWithdrawRequest.

        地址备注  # noqa: E501

        :param remark: The remark of this PostWithdrawRequest.  # noqa: E501
        :type: str
        """
        if remark is not None and len(remark) > 128:
            raise ValueError("Invalid value for `remark`, length must be less than or equal to `128`")  # noqa: E501

        self._remark = remark

    @property
    def address(self):
        """Gets the address of this PostWithdrawRequest.  # noqa: E501

        提币地址  # noqa: E501

        :return: The address of this PostWithdrawRequest.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PostWithdrawRequest.

        提币地址  # noqa: E501

        :param address: The address of this PostWithdrawRequest.  # noqa: E501
        :type: str
        """
        if address is not None and len(address) > 128:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `128`")  # noqa: E501

        self._address = address

    @property
    def is_save_address(self):
        """Gets the is_save_address of this PostWithdrawRequest.  # noqa: E501


        :return: The is_save_address of this PostWithdrawRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_save_address

    @is_save_address.setter
    def is_save_address(self, is_save_address):
        """Sets the is_save_address of this PostWithdrawRequest.


        :param is_save_address: The is_save_address of this PostWithdrawRequest.  # noqa: E501
        :type: bool
        """

        self._is_save_address = is_save_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostWithdrawRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostWithdrawRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
