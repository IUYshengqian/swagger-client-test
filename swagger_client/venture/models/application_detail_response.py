# coding: utf-8

"""
    crush-venture 平台接口（项目方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationDetailResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sponsor_id': 'str',
        'sponsor_name': 'str',
        'sponsor_logo_url': 'str',
        'id': 'str',
        'project_name': 'str',
        'white_paper_key': 'str',
        'white_paper_url': 'str',
        'official_website': 'str',
        'email': 'str',
        'applied_at': 'datetime',
        'listed_exchange': 'str',
        'area_code': 'str',
        'cellphone': 'str',
        'telephone': 'str',
        'project_poster_key': 'str',
        'project_poster_url': 'str',
        'description': 'str',
        'short_name': 'str',
        'full_name': 'str',
        'issue_price': 'str',
        'issued_volume': 'str',
        'circulation_volume': 'str',
        'issued_date': 'date',
        'blockchain_type': 'str',
        'data_link': 'str',
        'block_browser': 'str',
        'status': 'str',
        'remarks': 'str',
        'coin_logo_key': 'str',
        'coin_logo_url': 'str',
        'audited_at': 'datetime'
    }

    attribute_map = {
        'sponsor_id': 'sponsorId',
        'sponsor_name': 'sponsorName',
        'sponsor_logo_url': 'sponsorLogoUrl',
        'id': 'id',
        'project_name': 'projectName',
        'white_paper_key': 'whitePaperKey',
        'white_paper_url': 'whitePaperUrl',
        'official_website': 'officialWebsite',
        'email': 'email',
        'applied_at': 'appliedAt',
        'listed_exchange': 'listedExchange',
        'area_code': 'areaCode',
        'cellphone': 'cellphone',
        'telephone': 'telephone',
        'project_poster_key': 'projectPosterKey',
        'project_poster_url': 'projectPosterUrl',
        'description': 'description',
        'short_name': 'shortName',
        'full_name': 'fullName',
        'issue_price': 'issuePrice',
        'issued_volume': 'issuedVolume',
        'circulation_volume': 'circulationVolume',
        'issued_date': 'issuedDate',
        'blockchain_type': 'blockchainType',
        'data_link': 'dataLink',
        'block_browser': 'blockBrowser',
        'status': 'status',
        'remarks': 'remarks',
        'coin_logo_key': 'coinLogoKey',
        'coin_logo_url': 'coinLogoUrl',
        'audited_at': 'auditedAt'
    }

    def __init__(self, sponsor_id=None, sponsor_name=None, sponsor_logo_url=None, id=None, project_name=None, white_paper_key=None, white_paper_url=None, official_website=None, email=None, applied_at=None, listed_exchange=None, area_code=None, cellphone=None, telephone=None, project_poster_key=None, project_poster_url=None, description=None, short_name=None, full_name=None, issue_price=None, issued_volume=None, circulation_volume=None, issued_date=None, blockchain_type=None, data_link=None, block_browser=None, status=None, remarks=None, coin_logo_key=None, coin_logo_url=None, audited_at=None):  # noqa: E501
        """ApplicationDetailResponse - a model defined in Swagger"""  # noqa: E501

        self._sponsor_id = None
        self._sponsor_name = None
        self._sponsor_logo_url = None
        self._id = None
        self._project_name = None
        self._white_paper_key = None
        self._white_paper_url = None
        self._official_website = None
        self._email = None
        self._applied_at = None
        self._listed_exchange = None
        self._area_code = None
        self._cellphone = None
        self._telephone = None
        self._project_poster_key = None
        self._project_poster_url = None
        self._description = None
        self._short_name = None
        self._full_name = None
        self._issue_price = None
        self._issued_volume = None
        self._circulation_volume = None
        self._issued_date = None
        self._blockchain_type = None
        self._data_link = None
        self._block_browser = None
        self._status = None
        self._remarks = None
        self._coin_logo_key = None
        self._coin_logo_url = None
        self._audited_at = None
        self.discriminator = None

        if sponsor_id is not None:
            self.sponsor_id = sponsor_id
        if sponsor_name is not None:
            self.sponsor_name = sponsor_name
        if sponsor_logo_url is not None:
            self.sponsor_logo_url = sponsor_logo_url
        if id is not None:
            self.id = id
        if project_name is not None:
            self.project_name = project_name
        if white_paper_key is not None:
            self.white_paper_key = white_paper_key
        if white_paper_url is not None:
            self.white_paper_url = white_paper_url
        if official_website is not None:
            self.official_website = official_website
        if email is not None:
            self.email = email
        if applied_at is not None:
            self.applied_at = applied_at
        if listed_exchange is not None:
            self.listed_exchange = listed_exchange
        if area_code is not None:
            self.area_code = area_code
        if cellphone is not None:
            self.cellphone = cellphone
        if telephone is not None:
            self.telephone = telephone
        if project_poster_key is not None:
            self.project_poster_key = project_poster_key
        if project_poster_url is not None:
            self.project_poster_url = project_poster_url
        if description is not None:
            self.description = description
        if short_name is not None:
            self.short_name = short_name
        if full_name is not None:
            self.full_name = full_name
        if issue_price is not None:
            self.issue_price = issue_price
        if issued_volume is not None:
            self.issued_volume = issued_volume
        if circulation_volume is not None:
            self.circulation_volume = circulation_volume
        if issued_date is not None:
            self.issued_date = issued_date
        if blockchain_type is not None:
            self.blockchain_type = blockchain_type
        if data_link is not None:
            self.data_link = data_link
        if block_browser is not None:
            self.block_browser = block_browser
        if status is not None:
            self.status = status
        if remarks is not None:
            self.remarks = remarks
        if coin_logo_key is not None:
            self.coin_logo_key = coin_logo_key
        if coin_logo_url is not None:
            self.coin_logo_url = coin_logo_url
        if audited_at is not None:
            self.audited_at = audited_at

    @property
    def sponsor_id(self):
        """Gets the sponsor_id of this ApplicationDetailResponse.  # noqa: E501

        保荐方ID  # noqa: E501

        :return: The sponsor_id of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_id

    @sponsor_id.setter
    def sponsor_id(self, sponsor_id):
        """Sets the sponsor_id of this ApplicationDetailResponse.

        保荐方ID  # noqa: E501

        :param sponsor_id: The sponsor_id of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._sponsor_id = sponsor_id

    @property
    def sponsor_name(self):
        """Gets the sponsor_name of this ApplicationDetailResponse.  # noqa: E501

        保荐方名称  # noqa: E501

        :return: The sponsor_name of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_name

    @sponsor_name.setter
    def sponsor_name(self, sponsor_name):
        """Sets the sponsor_name of this ApplicationDetailResponse.

        保荐方名称  # noqa: E501

        :param sponsor_name: The sponsor_name of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._sponsor_name = sponsor_name

    @property
    def sponsor_logo_url(self):
        """Gets the sponsor_logo_url of this ApplicationDetailResponse.  # noqa: E501

        保荐方logo  # noqa: E501

        :return: The sponsor_logo_url of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_logo_url

    @sponsor_logo_url.setter
    def sponsor_logo_url(self, sponsor_logo_url):
        """Sets the sponsor_logo_url of this ApplicationDetailResponse.

        保荐方logo  # noqa: E501

        :param sponsor_logo_url: The sponsor_logo_url of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._sponsor_logo_url = sponsor_logo_url

    @property
    def id(self):
        """Gets the id of this ApplicationDetailResponse.  # noqa: E501

        申请ID  # noqa: E501

        :return: The id of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationDetailResponse.

        申请ID  # noqa: E501

        :param id: The id of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_name(self):
        """Gets the project_name of this ApplicationDetailResponse.  # noqa: E501

        项目名  # noqa: E501

        :return: The project_name of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ApplicationDetailResponse.

        项目名  # noqa: E501

        :param project_name: The project_name of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def white_paper_key(self):
        """Gets the white_paper_key of this ApplicationDetailResponse.  # noqa: E501

        白皮书KEY  # noqa: E501

        :return: The white_paper_key of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._white_paper_key

    @white_paper_key.setter
    def white_paper_key(self, white_paper_key):
        """Sets the white_paper_key of this ApplicationDetailResponse.

        白皮书KEY  # noqa: E501

        :param white_paper_key: The white_paper_key of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._white_paper_key = white_paper_key

    @property
    def white_paper_url(self):
        """Gets the white_paper_url of this ApplicationDetailResponse.  # noqa: E501

        白皮书URL  # noqa: E501

        :return: The white_paper_url of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._white_paper_url

    @white_paper_url.setter
    def white_paper_url(self, white_paper_url):
        """Sets the white_paper_url of this ApplicationDetailResponse.

        白皮书URL  # noqa: E501

        :param white_paper_url: The white_paper_url of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._white_paper_url = white_paper_url

    @property
    def official_website(self):
        """Gets the official_website of this ApplicationDetailResponse.  # noqa: E501

        官方网站  # noqa: E501

        :return: The official_website of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._official_website

    @official_website.setter
    def official_website(self, official_website):
        """Sets the official_website of this ApplicationDetailResponse.

        官方网站  # noqa: E501

        :param official_website: The official_website of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._official_website = official_website

    @property
    def email(self):
        """Gets the email of this ApplicationDetailResponse.  # noqa: E501

        电子邮箱  # noqa: E501

        :return: The email of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ApplicationDetailResponse.

        电子邮箱  # noqa: E501

        :param email: The email of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def applied_at(self):
        """Gets the applied_at of this ApplicationDetailResponse.  # noqa: E501

        申请日期  # noqa: E501

        :return: The applied_at of this ApplicationDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._applied_at

    @applied_at.setter
    def applied_at(self, applied_at):
        """Sets the applied_at of this ApplicationDetailResponse.

        申请日期  # noqa: E501

        :param applied_at: The applied_at of this ApplicationDetailResponse.  # noqa: E501
        :type: datetime
        """

        self._applied_at = applied_at

    @property
    def listed_exchange(self):
        """Gets the listed_exchange of this ApplicationDetailResponse.  # noqa: E501

        上架交易所  # noqa: E501

        :return: The listed_exchange of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._listed_exchange

    @listed_exchange.setter
    def listed_exchange(self, listed_exchange):
        """Sets the listed_exchange of this ApplicationDetailResponse.

        上架交易所  # noqa: E501

        :param listed_exchange: The listed_exchange of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._listed_exchange = listed_exchange

    @property
    def area_code(self):
        """Gets the area_code of this ApplicationDetailResponse.  # noqa: E501

        电话区号  # noqa: E501

        :return: The area_code of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this ApplicationDetailResponse.

        电话区号  # noqa: E501

        :param area_code: The area_code of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._area_code = area_code

    @property
    def cellphone(self):
        """Gets the cellphone of this ApplicationDetailResponse.  # noqa: E501

        手机号  # noqa: E501

        :return: The cellphone of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._cellphone

    @cellphone.setter
    def cellphone(self, cellphone):
        """Sets the cellphone of this ApplicationDetailResponse.

        手机号  # noqa: E501

        :param cellphone: The cellphone of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._cellphone = cellphone

    @property
    def telephone(self):
        """Gets the telephone of this ApplicationDetailResponse.  # noqa: E501

        固定电话号  # noqa: E501

        :return: The telephone of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this ApplicationDetailResponse.

        固定电话号  # noqa: E501

        :param telephone: The telephone of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def project_poster_key(self):
        """Gets the project_poster_key of this ApplicationDetailResponse.  # noqa: E501

        项目广告图KEY  # noqa: E501

        :return: The project_poster_key of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_poster_key

    @project_poster_key.setter
    def project_poster_key(self, project_poster_key):
        """Sets the project_poster_key of this ApplicationDetailResponse.

        项目广告图KEY  # noqa: E501

        :param project_poster_key: The project_poster_key of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._project_poster_key = project_poster_key

    @property
    def project_poster_url(self):
        """Gets the project_poster_url of this ApplicationDetailResponse.  # noqa: E501

        项目广告图URL  # noqa: E501

        :return: The project_poster_url of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_poster_url

    @project_poster_url.setter
    def project_poster_url(self, project_poster_url):
        """Sets the project_poster_url of this ApplicationDetailResponse.

        项目广告图URL  # noqa: E501

        :param project_poster_url: The project_poster_url of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._project_poster_url = project_poster_url

    @property
    def description(self):
        """Gets the description of this ApplicationDetailResponse.  # noqa: E501

        项目简介  # noqa: E501

        :return: The description of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationDetailResponse.

        项目简介  # noqa: E501

        :param description: The description of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def short_name(self):
        """Gets the short_name of this ApplicationDetailResponse.  # noqa: E501

        币简称  # noqa: E501

        :return: The short_name of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this ApplicationDetailResponse.

        币简称  # noqa: E501

        :param short_name: The short_name of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def full_name(self):
        """Gets the full_name of this ApplicationDetailResponse.  # noqa: E501

        币全称  # noqa: E501

        :return: The full_name of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ApplicationDetailResponse.

        币全称  # noqa: E501

        :param full_name: The full_name of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def issue_price(self):
        """Gets the issue_price of this ApplicationDetailResponse.  # noqa: E501

        发行价  # noqa: E501

        :return: The issue_price of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._issue_price

    @issue_price.setter
    def issue_price(self, issue_price):
        """Sets the issue_price of this ApplicationDetailResponse.

        发行价  # noqa: E501

        :param issue_price: The issue_price of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._issue_price = issue_price

    @property
    def issued_volume(self):
        """Gets the issued_volume of this ApplicationDetailResponse.  # noqa: E501

        发行量  # noqa: E501

        :return: The issued_volume of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._issued_volume

    @issued_volume.setter
    def issued_volume(self, issued_volume):
        """Sets the issued_volume of this ApplicationDetailResponse.

        发行量  # noqa: E501

        :param issued_volume: The issued_volume of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._issued_volume = issued_volume

    @property
    def circulation_volume(self):
        """Gets the circulation_volume of this ApplicationDetailResponse.  # noqa: E501

        流通量  # noqa: E501

        :return: The circulation_volume of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._circulation_volume

    @circulation_volume.setter
    def circulation_volume(self, circulation_volume):
        """Sets the circulation_volume of this ApplicationDetailResponse.

        流通量  # noqa: E501

        :param circulation_volume: The circulation_volume of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._circulation_volume = circulation_volume

    @property
    def issued_date(self):
        """Gets the issued_date of this ApplicationDetailResponse.  # noqa: E501

        发行时间  # noqa: E501

        :return: The issued_date of this ApplicationDetailResponse.  # noqa: E501
        :rtype: date
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this ApplicationDetailResponse.

        发行时间  # noqa: E501

        :param issued_date: The issued_date of this ApplicationDetailResponse.  # noqa: E501
        :type: date
        """

        self._issued_date = issued_date

    @property
    def blockchain_type(self):
        """Gets the blockchain_type of this ApplicationDetailResponse.  # noqa: E501

        区块链类型  # noqa: E501

        :return: The blockchain_type of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._blockchain_type

    @blockchain_type.setter
    def blockchain_type(self, blockchain_type):
        """Sets the blockchain_type of this ApplicationDetailResponse.

        区块链类型  # noqa: E501

        :param blockchain_type: The blockchain_type of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["public_chain", "private_chain", "smart_contract"]  # noqa: E501
        if blockchain_type not in allowed_values:
            raise ValueError(
                "Invalid value for `blockchain_type` ({0}), must be one of {1}"  # noqa: E501
                .format(blockchain_type, allowed_values)
            )

        self._blockchain_type = blockchain_type

    @property
    def data_link(self):
        """Gets the data_link of this ApplicationDetailResponse.  # noqa: E501

        资料链接  # noqa: E501

        :return: The data_link of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._data_link

    @data_link.setter
    def data_link(self, data_link):
        """Sets the data_link of this ApplicationDetailResponse.

        资料链接  # noqa: E501

        :param data_link: The data_link of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._data_link = data_link

    @property
    def block_browser(self):
        """Gets the block_browser of this ApplicationDetailResponse.  # noqa: E501

        区块浏览器  # noqa: E501

        :return: The block_browser of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._block_browser

    @block_browser.setter
    def block_browser(self, block_browser):
        """Sets the block_browser of this ApplicationDetailResponse.

        区块浏览器  # noqa: E501

        :param block_browser: The block_browser of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._block_browser = block_browser

    @property
    def status(self):
        """Gets the status of this ApplicationDetailResponse.  # noqa: E501

        状态[未完成undone、审核中under_review、审核通过passed、驳回turn_down]  # noqa: E501

        :return: The status of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplicationDetailResponse.

        状态[未完成undone、审核中under_review、审核通过passed、驳回turn_down]  # noqa: E501

        :param status: The status of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["undone", "under_review", "passed", "turn_down"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def remarks(self):
        """Gets the remarks of this ApplicationDetailResponse.  # noqa: E501

        失败原因  # noqa: E501

        :return: The remarks of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this ApplicationDetailResponse.

        失败原因  # noqa: E501

        :param remarks: The remarks of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def coin_logo_key(self):
        """Gets the coin_logo_key of this ApplicationDetailResponse.  # noqa: E501

        币图标KEY  # noqa: E501

        :return: The coin_logo_key of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._coin_logo_key

    @coin_logo_key.setter
    def coin_logo_key(self, coin_logo_key):
        """Sets the coin_logo_key of this ApplicationDetailResponse.

        币图标KEY  # noqa: E501

        :param coin_logo_key: The coin_logo_key of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._coin_logo_key = coin_logo_key

    @property
    def coin_logo_url(self):
        """Gets the coin_logo_url of this ApplicationDetailResponse.  # noqa: E501

        币图标URL  # noqa: E501

        :return: The coin_logo_url of this ApplicationDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._coin_logo_url

    @coin_logo_url.setter
    def coin_logo_url(self, coin_logo_url):
        """Sets the coin_logo_url of this ApplicationDetailResponse.

        币图标URL  # noqa: E501

        :param coin_logo_url: The coin_logo_url of this ApplicationDetailResponse.  # noqa: E501
        :type: str
        """

        self._coin_logo_url = coin_logo_url

    @property
    def audited_at(self):
        """Gets the audited_at of this ApplicationDetailResponse.  # noqa: E501

        审核时间  # noqa: E501

        :return: The audited_at of this ApplicationDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._audited_at

    @audited_at.setter
    def audited_at(self, audited_at):
        """Sets the audited_at of this ApplicationDetailResponse.

        审核时间  # noqa: E501

        :param audited_at: The audited_at of this ApplicationDetailResponse.  # noqa: E501
        :type: datetime
        """

        self._audited_at = audited_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationDetailResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
