# coding: utf-8

"""
    crush-sponsor 平台接口（保荐方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostLoginVerifyResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'ip': 'str',
        'location': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'ip': 'ip',
        'location': 'location'
    }

    def __init__(self, timestamp=None, ip=None, location=None):  # noqa: E501
        """PostLoginVerifyResponseItems - a model defined in Swagger"""  # noqa: E501

        self._timestamp = None
        self._ip = None
        self._location = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if ip is not None:
            self.ip = ip
        if location is not None:
            self.location = location

    @property
    def timestamp(self):
        """Gets the timestamp of this PostLoginVerifyResponseItems.  # noqa: E501

        时间戳  # noqa: E501

        :return: The timestamp of this PostLoginVerifyResponseItems.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PostLoginVerifyResponseItems.

        时间戳  # noqa: E501

        :param timestamp: The timestamp of this PostLoginVerifyResponseItems.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def ip(self):
        """Gets the ip of this PostLoginVerifyResponseItems.  # noqa: E501

        ip 地址  # noqa: E501

        :return: The ip of this PostLoginVerifyResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this PostLoginVerifyResponseItems.

        ip 地址  # noqa: E501

        :param ip: The ip of this PostLoginVerifyResponseItems.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def location(self):
        """Gets the location of this PostLoginVerifyResponseItems.  # noqa: E501

        位置信息  # noqa: E501

        :return: The location of this PostLoginVerifyResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PostLoginVerifyResponseItems.

        位置信息  # noqa: E501

        :param location: The location of this PostLoginVerifyResponseItems.  # noqa: E501
        :type: str
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostLoginVerifyResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostLoginVerifyResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
