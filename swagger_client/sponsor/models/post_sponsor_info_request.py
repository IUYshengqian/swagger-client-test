# coding: utf-8

"""
    crush-sponsor 平台接口（保荐方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostSponsorInfoRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'challenge': 'str',
        'seccode': 'str',
        'validate': 'str'
    }

    attribute_map = {
        'user_name': 'userName',
        'challenge': 'challenge',
        'seccode': 'seccode',
        'validate': 'validate'
    }

    def __init__(self, user_name=None, challenge=None, seccode=None, validate=None):  # noqa: E501
        """PostSponsorInfoRequest - a model defined in Swagger"""  # noqa: E501

        self._user_name = None
        self._challenge = None
        self._seccode = None
        self._validate = None
        self.discriminator = None

        self.user_name = user_name
        self.challenge = challenge
        self.seccode = seccode
        self.validate = validate

    @property
    def user_name(self):
        """Gets the user_name of this PostSponsorInfoRequest.  # noqa: E501

        保荐方账号  # noqa: E501

        :return: The user_name of this PostSponsorInfoRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this PostSponsorInfoRequest.

        保荐方账号  # noqa: E501

        :param user_name: The user_name of this PostSponsorInfoRequest.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def challenge(self):
        """Gets the challenge of this PostSponsorInfoRequest.  # noqa: E501

        极验参数  # noqa: E501

        :return: The challenge of this PostSponsorInfoRequest.  # noqa: E501
        :rtype: str
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this PostSponsorInfoRequest.

        极验参数  # noqa: E501

        :param challenge: The challenge of this PostSponsorInfoRequest.  # noqa: E501
        :type: str
        """
        if challenge is None:
            raise ValueError("Invalid value for `challenge`, must not be `None`")  # noqa: E501

        self._challenge = challenge

    @property
    def seccode(self):
        """Gets the seccode of this PostSponsorInfoRequest.  # noqa: E501

        极验参数  # noqa: E501

        :return: The seccode of this PostSponsorInfoRequest.  # noqa: E501
        :rtype: str
        """
        return self._seccode

    @seccode.setter
    def seccode(self, seccode):
        """Sets the seccode of this PostSponsorInfoRequest.

        极验参数  # noqa: E501

        :param seccode: The seccode of this PostSponsorInfoRequest.  # noqa: E501
        :type: str
        """
        if seccode is None:
            raise ValueError("Invalid value for `seccode`, must not be `None`")  # noqa: E501

        self._seccode = seccode

    @property
    def validate(self):
        """Gets the validate of this PostSponsorInfoRequest.  # noqa: E501

        极验参数  # noqa: E501

        :return: The validate of this PostSponsorInfoRequest.  # noqa: E501
        :rtype: str
        """
        return self._validate

    @validate.setter
    def validate(self, validate):
        """Sets the validate of this PostSponsorInfoRequest.

        极验参数  # noqa: E501

        :param validate: The validate of this PostSponsorInfoRequest.  # noqa: E501
        :type: str
        """
        if validate is None:
            raise ValueError("Invalid value for `validate`, must not be `None`")  # noqa: E501

        self._validate = validate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostSponsorInfoRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostSponsorInfoRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
