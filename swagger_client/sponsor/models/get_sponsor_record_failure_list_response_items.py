# coding: utf-8

"""
    crush-sponsor 平台接口（保荐方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetSponsorRecordFailureListResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'applied_id': 'str',
        'project_name': 'str',
        'project_logo': 'str',
        'white_paper': 'str',
        'blockchain_type': 'str',
        'data_link': 'str',
        'remark': 'str',
        'applied_at': 'str',
        'created_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'applied_id': 'appliedId',
        'project_name': 'projectName',
        'project_logo': 'projectLogo',
        'white_paper': 'whitePaper',
        'blockchain_type': 'blockchainType',
        'data_link': 'dataLink',
        'remark': 'remark',
        'applied_at': 'appliedAt',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, applied_id=None, project_name=None, project_logo=None, white_paper=None, blockchain_type=None, data_link=None, remark=None, applied_at=None, created_at=None):  # noqa: E501
        """GetSponsorRecordFailureListResponseItems - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._applied_id = None
        self._project_name = None
        self._project_logo = None
        self._white_paper = None
        self._blockchain_type = None
        self._data_link = None
        self._remark = None
        self._applied_at = None
        self._created_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if applied_id is not None:
            self.applied_id = applied_id
        if project_name is not None:
            self.project_name = project_name
        if project_logo is not None:
            self.project_logo = project_logo
        if white_paper is not None:
            self.white_paper = white_paper
        if blockchain_type is not None:
            self.blockchain_type = blockchain_type
        if data_link is not None:
            self.data_link = data_link
        if remark is not None:
            self.remark = remark
        if applied_at is not None:
            self.applied_at = applied_at
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        记录id  # noqa: E501

        :return: The id of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSponsorRecordFailureListResponseItems.

        记录id  # noqa: E501

        :param id: The id of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def applied_id(self):
        """Gets the applied_id of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        项目申请id  # noqa: E501

        :return: The applied_id of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._applied_id

    @applied_id.setter
    def applied_id(self, applied_id):
        """Sets the applied_id of this GetSponsorRecordFailureListResponseItems.

        项目申请id  # noqa: E501

        :param applied_id: The applied_id of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._applied_id = applied_id

    @property
    def project_name(self):
        """Gets the project_name of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        币名/项目名  # noqa: E501

        :return: The project_name of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this GetSponsorRecordFailureListResponseItems.

        币名/项目名  # noqa: E501

        :param project_name: The project_name of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def project_logo(self):
        """Gets the project_logo of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        项目logo  # noqa: E501

        :return: The project_logo of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._project_logo

    @project_logo.setter
    def project_logo(self, project_logo):
        """Sets the project_logo of this GetSponsorRecordFailureListResponseItems.

        项目logo  # noqa: E501

        :param project_logo: The project_logo of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._project_logo = project_logo

    @property
    def white_paper(self):
        """Gets the white_paper of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        白皮书PDF  # noqa: E501

        :return: The white_paper of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._white_paper

    @white_paper.setter
    def white_paper(self, white_paper):
        """Sets the white_paper of this GetSponsorRecordFailureListResponseItems.

        白皮书PDF  # noqa: E501

        :param white_paper: The white_paper of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._white_paper = white_paper

    @property
    def blockchain_type(self):
        """Gets the blockchain_type of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        区块链类型  # noqa: E501

        :return: The blockchain_type of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._blockchain_type

    @blockchain_type.setter
    def blockchain_type(self, blockchain_type):
        """Sets the blockchain_type of this GetSponsorRecordFailureListResponseItems.

        区块链类型  # noqa: E501

        :param blockchain_type: The blockchain_type of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["PUBLIC_CHAIN", "PRIVATE_CHAIN", "SMART_CONTRACT"]  # noqa: E501
        if blockchain_type not in allowed_values:
            raise ValueError(
                "Invalid value for `blockchain_type` ({0}), must be one of {1}"  # noqa: E501
                .format(blockchain_type, allowed_values)
            )

        self._blockchain_type = blockchain_type

    @property
    def data_link(self):
        """Gets the data_link of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        资料链接  # noqa: E501

        :return: The data_link of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._data_link

    @data_link.setter
    def data_link(self, data_link):
        """Sets the data_link of this GetSponsorRecordFailureListResponseItems.

        资料链接  # noqa: E501

        :param data_link: The data_link of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._data_link = data_link

    @property
    def remark(self):
        """Gets the remark of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        备注  # noqa: E501

        :return: The remark of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this GetSponsorRecordFailureListResponseItems.

        备注  # noqa: E501

        :param remark: The remark of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def applied_at(self):
        """Gets the applied_at of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        申请时间  # noqa: E501

        :return: The applied_at of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._applied_at

    @applied_at.setter
    def applied_at(self, applied_at):
        """Sets the applied_at of this GetSponsorRecordFailureListResponseItems.

        申请时间  # noqa: E501

        :param applied_at: The applied_at of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._applied_at = applied_at

    @property
    def created_at(self):
        """Gets the created_at of this GetSponsorRecordFailureListResponseItems.  # noqa: E501

        驳回时间  # noqa: E501

        :return: The created_at of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetSponsorRecordFailureListResponseItems.

        驳回时间  # noqa: E501

        :param created_at: The created_at of this GetSponsorRecordFailureListResponseItems.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSponsorRecordFailureListResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSponsorRecordFailureListResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
