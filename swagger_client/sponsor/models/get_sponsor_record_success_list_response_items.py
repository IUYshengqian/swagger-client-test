# coding: utf-8

"""
    crush-sponsor 平台接口（保荐方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetSponsorRecordSuccessListResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'short_name': 'str',
        'full_name': 'str',
        'logo': 'str',
        'price': 'str',
        'trading_volume': 'str',
        'market_value': 'str',
        'change_extent': 'str',
        'listed_num': 'int',
        'created_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'short_name': 'shortName',
        'full_name': 'fullName',
        'logo': 'logo',
        'price': 'price',
        'trading_volume': 'tradingVolume',
        'market_value': 'marketValue',
        'change_extent': 'changeExtent',
        'listed_num': 'listedNum',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, short_name=None, full_name=None, logo=None, price=None, trading_volume=None, market_value=None, change_extent=None, listed_num=None, created_at=None):  # noqa: E501
        """GetSponsorRecordSuccessListResponseItems - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._short_name = None
        self._full_name = None
        self._logo = None
        self._price = None
        self._trading_volume = None
        self._market_value = None
        self._change_extent = None
        self._listed_num = None
        self._created_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if short_name is not None:
            self.short_name = short_name
        if full_name is not None:
            self.full_name = full_name
        if logo is not None:
            self.logo = logo
        if price is not None:
            self.price = price
        if trading_volume is not None:
            self.trading_volume = trading_volume
        if market_value is not None:
            self.market_value = market_value
        if change_extent is not None:
            self.change_extent = change_extent
        if listed_num is not None:
            self.listed_num = listed_num
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        币id  # noqa: E501

        :return: The id of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSponsorRecordSuccessListResponseItems.

        币id  # noqa: E501

        :param id: The id of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def short_name(self):
        """Gets the short_name of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        币名简称  # noqa: E501

        :return: The short_name of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this GetSponsorRecordSuccessListResponseItems.

        币名简称  # noqa: E501

        :param short_name: The short_name of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def full_name(self):
        """Gets the full_name of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        币名全称  # noqa: E501

        :return: The full_name of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this GetSponsorRecordSuccessListResponseItems.

        币名全称  # noqa: E501

        :param full_name: The full_name of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def logo(self):
        """Gets the logo of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        币logo  # noqa: E501

        :return: The logo of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this GetSponsorRecordSuccessListResponseItems.

        币logo  # noqa: E501

        :param logo: The logo of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def price(self):
        """Gets the price of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        价格  # noqa: E501

        :return: The price of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetSponsorRecordSuccessListResponseItems.

        价格  # noqa: E501

        :param price: The price of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def trading_volume(self):
        """Gets the trading_volume of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        交易量  # noqa: E501

        :return: The trading_volume of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trading_volume

    @trading_volume.setter
    def trading_volume(self, trading_volume):
        """Sets the trading_volume of this GetSponsorRecordSuccessListResponseItems.

        交易量  # noqa: E501

        :param trading_volume: The trading_volume of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._trading_volume = trading_volume

    @property
    def market_value(self):
        """Gets the market_value of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        平台市值  # noqa: E501

        :return: The market_value of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this GetSponsorRecordSuccessListResponseItems.

        平台市值  # noqa: E501

        :param market_value: The market_value of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._market_value = market_value

    @property
    def change_extent(self):
        """Gets the change_extent of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        24小时涨跌幅  # noqa: E501

        :return: The change_extent of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._change_extent

    @change_extent.setter
    def change_extent(self, change_extent):
        """Sets the change_extent of this GetSponsorRecordSuccessListResponseItems.

        24小时涨跌幅  # noqa: E501

        :param change_extent: The change_extent of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._change_extent = change_extent

    @property
    def listed_num(self):
        """Gets the listed_num of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        已上交易所数量  # noqa: E501

        :return: The listed_num of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: int
        """
        return self._listed_num

    @listed_num.setter
    def listed_num(self, listed_num):
        """Sets the listed_num of this GetSponsorRecordSuccessListResponseItems.

        已上交易所数量  # noqa: E501

        :param listed_num: The listed_num of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: int
        """

        self._listed_num = listed_num

    @property
    def created_at(self):
        """Gets the created_at of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501

        保荐时间  # noqa: E501

        :return: The created_at of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetSponsorRecordSuccessListResponseItems.

        保荐时间  # noqa: E501

        :param created_at: The created_at of this GetSponsorRecordSuccessListResponseItems.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSponsorRecordSuccessListResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSponsorRecordSuccessListResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
