# coding: utf-8

"""
    crush-sponsor 平台接口（保荐方平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.sponsor.api_client import ApiClient


class SponsorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sponsor_info_post(self, sponsor_info, **kwargs):  # noqa: E501
        """重置密码之前根据用户名获取绑定的手机和邮箱  # noqa: E501

        重置密码之前根据用户名获取绑定的手机和邮箱  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_info_post(sponsor_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSponsorInfoRequest sponsor_info: 重置密码之前根据用户名获取绑定的手机和邮箱 (required)
        :return: PostSponsorInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sponsor_info_post_with_http_info(sponsor_info, **kwargs)  # noqa: E501
        else:
            (data) = self.sponsor_info_post_with_http_info(sponsor_info, **kwargs)  # noqa: E501
            return data

    def sponsor_info_post_with_http_info(self, sponsor_info, **kwargs):  # noqa: E501
        """重置密码之前根据用户名获取绑定的手机和邮箱  # noqa: E501

        重置密码之前根据用户名获取绑定的手机和邮箱  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_info_post_with_http_info(sponsor_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSponsorInfoRequest sponsor_info: 重置密码之前根据用户名获取绑定的手机和邮箱 (required)
        :return: PostSponsorInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sponsor_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sponsor_info_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sponsor_info' is set
        if ('sponsor_info' not in params or
                params['sponsor_info'] is None):
            raise ValueError("Missing the required parameter `sponsor_info` when calling `sponsor_info_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sponsor_info' in params:
            body_params = params['sponsor_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sponsor/info', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostSponsorInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sponsor_login_post(self, sponsor_login, **kwargs):  # noqa: E501
        """账户登录  # noqa: E501

        账户登录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_login_post(sponsor_login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoginRequest sponsor_login: 账户登录 (required)
        :return: PostLoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sponsor_login_post_with_http_info(sponsor_login, **kwargs)  # noqa: E501
        else:
            (data) = self.sponsor_login_post_with_http_info(sponsor_login, **kwargs)  # noqa: E501
            return data

    def sponsor_login_post_with_http_info(self, sponsor_login, **kwargs):  # noqa: E501
        """账户登录  # noqa: E501

        账户登录  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_login_post_with_http_info(sponsor_login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoginRequest sponsor_login: 账户登录 (required)
        :return: PostLoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sponsor_login']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sponsor_login_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sponsor_login' is set
        if ('sponsor_login' not in params or
                params['sponsor_login'] is None):
            raise ValueError("Missing the required parameter `sponsor_login` when calling `sponsor_login_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sponsor_login' in params:
            body_params = params['sponsor_login']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sponsor/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoginResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sponsor_login_verify_post(self, post_login_verify_request, **kwargs):  # noqa: E501
        """登录二次验证  # noqa: E501

        登录二次验证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_login_verify_post(post_login_verify_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoginVerifyRequest post_login_verify_request: (required)
        :return: PostLoginVerifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sponsor_login_verify_post_with_http_info(post_login_verify_request, **kwargs)  # noqa: E501
        else:
            (data) = self.sponsor_login_verify_post_with_http_info(post_login_verify_request, **kwargs)  # noqa: E501
            return data

    def sponsor_login_verify_post_with_http_info(self, post_login_verify_request, **kwargs):  # noqa: E501
        """登录二次验证  # noqa: E501

        登录二次验证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_login_verify_post_with_http_info(post_login_verify_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostLoginVerifyRequest post_login_verify_request: (required)
        :return: PostLoginVerifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_login_verify_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sponsor_login_verify_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_login_verify_request' is set
        if ('post_login_verify_request' not in params or
                params['post_login_verify_request'] is None):
            raise ValueError("Missing the required parameter `post_login_verify_request` when calling `sponsor_login_verify_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_login_verify_request' in params:
            body_params = params['post_login_verify_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sponsor/login-verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostLoginVerifyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sponsor_logout_post(self, **kwargs):  # noqa: E501
        """账户注销  # noqa: E501

        账户注销  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_logout_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sponsor_logout_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sponsor_logout_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def sponsor_logout_post_with_http_info(self, **kwargs):  # noqa: E501
        """账户注销  # noqa: E501

        账户注销  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_logout_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sponsor_logout_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sponsor/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sponsor_send_verification_code_post(self, send_verification_code, **kwargs):  # noqa: E501
        """发送验证码  # noqa: E501

        绑定手机号码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_send_verification_code_post(send_verification_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSendverificationCodeRequest send_verification_code: 请求手机号码 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sponsor_send_verification_code_post_with_http_info(send_verification_code, **kwargs)  # noqa: E501
        else:
            (data) = self.sponsor_send_verification_code_post_with_http_info(send_verification_code, **kwargs)  # noqa: E501
            return data

    def sponsor_send_verification_code_post_with_http_info(self, send_verification_code, **kwargs):  # noqa: E501
        """发送验证码  # noqa: E501

        绑定手机号码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_send_verification_code_post_with_http_info(send_verification_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSendverificationCodeRequest send_verification_code: 请求手机号码 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['send_verification_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sponsor_send_verification_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'send_verification_code' is set
        if ('send_verification_code' not in params or
                params['send_verification_code'] is None):
            raise ValueError("Missing the required parameter `send_verification_code` when calling `sponsor_send_verification_code_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'send_verification_code' in params:
            body_params = params['send_verification_code']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sponsor/send-verification-code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sponsor_set_password_post(self, sponsor_rest_pwd, **kwargs):  # noqa: E501
        """重置密码  # noqa: E501

        重置密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_set_password_post(sponsor_rest_pwd, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRestPasswordRequest sponsor_rest_pwd: 重置密码 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sponsor_set_password_post_with_http_info(sponsor_rest_pwd, **kwargs)  # noqa: E501
        else:
            (data) = self.sponsor_set_password_post_with_http_info(sponsor_rest_pwd, **kwargs)  # noqa: E501
            return data

    def sponsor_set_password_post_with_http_info(self, sponsor_rest_pwd, **kwargs):  # noqa: E501
        """重置密码  # noqa: E501

        重置密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_set_password_post_with_http_info(sponsor_rest_pwd, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostRestPasswordRequest sponsor_rest_pwd: 重置密码 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sponsor_rest_pwd']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sponsor_set_password_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sponsor_rest_pwd' is set
        if ('sponsor_rest_pwd' not in params or
                params['sponsor_rest_pwd'] is None):
            raise ValueError("Missing the required parameter `sponsor_rest_pwd` when calling `sponsor_set_password_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sponsor_rest_pwd' in params:
            body_params = params['sponsor_rest_pwd']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sponsor/set-password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sponsor_verify_post(self, post_verify_request, **kwargs):  # noqa: E501
        """二次验证(忘记密码.....等)  # noqa: E501

        二次验证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_verify_post(post_verify_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostVerifyRequest post_verify_request: (required)
        :return: PostVerifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sponsor_verify_post_with_http_info(post_verify_request, **kwargs)  # noqa: E501
        else:
            (data) = self.sponsor_verify_post_with_http_info(post_verify_request, **kwargs)  # noqa: E501
            return data

    def sponsor_verify_post_with_http_info(self, post_verify_request, **kwargs):  # noqa: E501
        """二次验证(忘记密码.....等)  # noqa: E501

        二次验证  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sponsor_verify_post_with_http_info(post_verify_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostVerifyRequest post_verify_request: (required)
        :return: PostVerifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_verify_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sponsor_verify_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_verify_request' is set
        if ('post_verify_request' not in params or
                params['post_verify_request'] is None):
            raise ValueError("Missing the required parameter `post_verify_request` when calling `sponsor_verify_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_verify_request' in params:
            body_params = params['post_verify_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sponsor/verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostVerifyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
