# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.main.api_client import ApiClient


class QuotationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def quotation_exchange_market_get(self, exchange_ids, **kwargs):  # noqa: E501
        """获取交易所信息并返回成交量靠前的若干个市场行情数据  # noqa: E501

        web交易所收藏，展示交易所信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotation_exchange_market_get(exchange_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange_ids: 交易所id（同时获取多个交易所的行情时，用\",\"隔开） (required)
        :return: GetExchangeMarketQuotationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotation_exchange_market_get_with_http_info(exchange_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.quotation_exchange_market_get_with_http_info(exchange_ids, **kwargs)  # noqa: E501
            return data

    def quotation_exchange_market_get_with_http_info(self, exchange_ids, **kwargs):  # noqa: E501
        """获取交易所信息并返回成交量靠前的若干个市场行情数据  # noqa: E501

        web交易所收藏，展示交易所信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotation_exchange_market_get_with_http_info(exchange_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange_ids: 交易所id（同时获取多个交易所的行情时，用\",\"隔开） (required)
        :return: GetExchangeMarketQuotationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotation_exchange_market_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange_ids' is set
        if ('exchange_ids' not in params or
                params['exchange_ids'] is None):
            raise ValueError("Missing the required parameter `exchange_ids` when calling `quotation_exchange_market_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exchange_ids' in params:
            query_params.append(('exchangeIds', params['exchange_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quotation/exchange-market', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetExchangeMarketQuotationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quotation_id_overview_get(self, id, **kwargs):  # noqa: E501
        """单一币种在各交易所的行情概要  # noqa: E501

        单一币种在各交易所的行情概要  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotation_id_overview_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种id (required)
        :return: GetCoinOverviewResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotation_id_overview_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.quotation_id_overview_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def quotation_id_overview_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """单一币种在各交易所的行情概要  # noqa: E501

        单一币种在各交易所的行情概要  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotation_id_overview_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 币种id (required)
        :return: GetCoinOverviewResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotation_id_overview_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `quotation_id_overview_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/quotation/{id}/overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCoinOverviewResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quotations_exchange_get(self, exchange_ids, **kwargs):  # noqa: E501
        """交易所行情信息  # noqa: E501

        根据交易所id获取行情信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_exchange_get(exchange_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange_ids: 交易所id（同时获取多个交易所的行情时，用\",\"隔开） (required)
        :return: GetExchangeQuotationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotations_exchange_get_with_http_info(exchange_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.quotations_exchange_get_with_http_info(exchange_ids, **kwargs)  # noqa: E501
            return data

    def quotations_exchange_get_with_http_info(self, exchange_ids, **kwargs):  # noqa: E501
        """交易所行情信息  # noqa: E501

        根据交易所id获取行情信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_exchange_get_with_http_info(exchange_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange_ids: 交易所id（同时获取多个交易所的行情时，用\",\"隔开） (required)
        :return: GetExchangeQuotationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotations_exchange_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange_ids' is set
        if ('exchange_ids' not in params or
                params['exchange_ids'] is None):
            raise ValueError("Missing the required parameter `exchange_ids` when calling `quotations_exchange_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exchange_ids' in params:
            query_params.append(('exchangeIds', params['exchange_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quotations/exchange', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetExchangeQuotationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quotations_get(self, **kwargs):  # noqa: E501
        """首页行情信息展示  # noqa: E501

        首页行情信息展示  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange_id: 交易所id(可为空)
        :param float limit: 条数(可为空，默认4条)
        :return: GetQuotationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.quotations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def quotations_get_with_http_info(self, **kwargs):  # noqa: E501
        """首页行情信息展示  # noqa: E501

        首页行情信息展示  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange_id: 交易所id(可为空)
        :param float limit: 条数(可为空，默认4条)
        :return: GetQuotationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exchange_id' in params:
            query_params.append(('exchangeId', params['exchange_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quotations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetQuotationListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quotations_historical_data_get(self, symbol, period, **kwargs):  # noqa: E501
        """K线数据  # noqa: E501

        获取K线数据  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_historical_data_get(symbol, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: 交易市场标识;交易所ID为123092,币对为BTC/ETH,表示为(123092:BTC/ETH) (required)
        :param str period: 时间区间(1分钟:1m,5分钟:5m,15分钟:15m,30分钟:30m,1小时:1h,2小时:2h,4小时:4h,6小时:6h,12小时:12h,1天:1d,3天:3d,1周:1w) (required)
        :param float _from: 时间区间起始时间，精确到秒（10），不传时给固定条数的数据
        :param float to: 时间区间截止时间，精确到秒（10），不传时给固定条数的数据
        :return: GetHistoricalDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotations_historical_data_get_with_http_info(symbol, period, **kwargs)  # noqa: E501
        else:
            (data) = self.quotations_historical_data_get_with_http_info(symbol, period, **kwargs)  # noqa: E501
            return data

    def quotations_historical_data_get_with_http_info(self, symbol, period, **kwargs):  # noqa: E501
        """K线数据  # noqa: E501

        获取K线数据  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_historical_data_get_with_http_info(symbol, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: 交易市场标识;交易所ID为123092,币对为BTC/ETH,表示为(123092:BTC/ETH) (required)
        :param str period: 时间区间(1分钟:1m,5分钟:5m,15分钟:15m,30分钟:30m,1小时:1h,2小时:2h,4小时:4h,6小时:6h,12小时:12h,1天:1d,3天:3d,1周:1w) (required)
        :param float _from: 时间区间起始时间，精确到秒（10），不传时给固定条数的数据
        :param float to: 时间区间截止时间，精确到秒（10），不传时给固定条数的数据
        :return: GetHistoricalDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'period', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotations_historical_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `quotations_historical_data_get`")  # noqa: E501
        # verify the required parameter 'period' is set
        if ('period' not in params or
                params['period'] is None):
            raise ValueError("Missing the required parameter `period` when calling `quotations_historical_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quotations/historical-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetHistoricalDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quotations_project_get(self, project_ids, **kwargs):  # noqa: E501
        """项目行情信息  # noqa: E501

        根据项目id获取行情信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_project_get(project_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_ids: 项目id（同时获取多个项目的行情时，用\",\"隔开） (required)
        :return: GetProjectQuotationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotations_project_get_with_http_info(project_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.quotations_project_get_with_http_info(project_ids, **kwargs)  # noqa: E501
            return data

    def quotations_project_get_with_http_info(self, project_ids, **kwargs):  # noqa: E501
        """项目行情信息  # noqa: E501

        根据项目id获取行情信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotations_project_get_with_http_info(project_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_ids: 项目id（同时获取多个项目的行情时，用\",\"隔开） (required)
        :return: GetProjectQuotationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotations_project_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_ids' is set
        if ('project_ids' not in params or
                params['project_ids'] is None):
            raise ValueError("Missing the required parameter `project_ids` when calling `quotations_project_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_ids' in params:
            query_params.append(('projectIds', params['project_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quotations/project', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetProjectQuotationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
