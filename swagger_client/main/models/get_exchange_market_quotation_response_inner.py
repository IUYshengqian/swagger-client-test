# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.main.models.get_quotation_list_response import GetQuotationListResponse  # noqa: F401,E501


class GetExchangeMarketQuotationResponseInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'logo_url': 'str',
        'name': 'str',
        'usd_amount': 'str',
        'trading_pair_count': 'int',
        'market_overview': 'GetQuotationListResponse'
    }

    attribute_map = {
        'id': 'id',
        'logo_url': 'logoUrl',
        'name': 'name',
        'usd_amount': 'usdAmount',
        'trading_pair_count': 'tradingPairCount',
        'market_overview': 'marketOverview'
    }

    def __init__(self, id=None, logo_url=None, name=None, usd_amount=None, trading_pair_count=None, market_overview=None):  # noqa: E501
        """GetExchangeMarketQuotationResponseInner - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._logo_url = None
        self._name = None
        self._usd_amount = None
        self._trading_pair_count = None
        self._market_overview = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if logo_url is not None:
            self.logo_url = logo_url
        if name is not None:
            self.name = name
        if usd_amount is not None:
            self.usd_amount = usd_amount
        if trading_pair_count is not None:
            self.trading_pair_count = trading_pair_count
        if market_overview is not None:
            self.market_overview = market_overview

    @property
    def id(self):
        """Gets the id of this GetExchangeMarketQuotationResponseInner.  # noqa: E501

        交易所编号  # noqa: E501

        :return: The id of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetExchangeMarketQuotationResponseInner.

        交易所编号  # noqa: E501

        :param id: The id of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def logo_url(self):
        """Gets the logo_url of this GetExchangeMarketQuotationResponseInner.  # noqa: E501

        交易所logo路径  # noqa: E501

        :return: The logo_url of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this GetExchangeMarketQuotationResponseInner.

        交易所logo路径  # noqa: E501

        :param logo_url: The logo_url of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this GetExchangeMarketQuotationResponseInner.  # noqa: E501

        交易所名称  # noqa: E501

        :return: The name of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetExchangeMarketQuotationResponseInner.

        交易所名称  # noqa: E501

        :param name: The name of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def usd_amount(self):
        """Gets the usd_amount of this GetExchangeMarketQuotationResponseInner.  # noqa: E501

        成交量(usd)  # noqa: E501

        :return: The usd_amount of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._usd_amount

    @usd_amount.setter
    def usd_amount(self, usd_amount):
        """Sets the usd_amount of this GetExchangeMarketQuotationResponseInner.

        成交量(usd)  # noqa: E501

        :param usd_amount: The usd_amount of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._usd_amount = usd_amount

    @property
    def trading_pair_count(self):
        """Gets the trading_pair_count of this GetExchangeMarketQuotationResponseInner.  # noqa: E501

        交易对数量  # noqa: E501

        :return: The trading_pair_count of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :rtype: int
        """
        return self._trading_pair_count

    @trading_pair_count.setter
    def trading_pair_count(self, trading_pair_count):
        """Sets the trading_pair_count of this GetExchangeMarketQuotationResponseInner.

        交易对数量  # noqa: E501

        :param trading_pair_count: The trading_pair_count of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :type: int
        """

        self._trading_pair_count = trading_pair_count

    @property
    def market_overview(self):
        """Gets the market_overview of this GetExchangeMarketQuotationResponseInner.  # noqa: E501


        :return: The market_overview of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :rtype: GetQuotationListResponse
        """
        return self._market_overview

    @market_overview.setter
    def market_overview(self, market_overview):
        """Sets the market_overview of this GetExchangeMarketQuotationResponseInner.


        :param market_overview: The market_overview of this GetExchangeMarketQuotationResponseInner.  # noqa: E501
        :type: GetQuotationListResponse
        """

        self._market_overview = market_overview

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetExchangeMarketQuotationResponseInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetExchangeMarketQuotationResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
