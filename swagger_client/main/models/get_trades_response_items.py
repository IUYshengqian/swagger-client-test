# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetTradesResponseItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'exchange': 'str',
        'trade_type': 'str',
        'trading_pair': 'str',
        'price': 'str',
        'volume': 'str',
        'amount': 'str',
        'fee': 'str',
        'unit': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'order_id': 'orderId',
        'exchange': 'exchange',
        'trade_type': 'tradeType',
        'trading_pair': 'tradingPair',
        'price': 'price',
        'volume': 'volume',
        'amount': 'amount',
        'fee': 'fee',
        'unit': 'unit',
        'created_at': 'createdAt'
    }

    def __init__(self, order_id=None, exchange=None, trade_type=None, trading_pair=None, price=None, volume=None, amount=None, fee=None, unit=None, created_at=None):  # noqa: E501
        """GetTradesResponseItems - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._exchange = None
        self._trade_type = None
        self._trading_pair = None
        self._price = None
        self._volume = None
        self._amount = None
        self._fee = None
        self._unit = None
        self._created_at = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if exchange is not None:
            self.exchange = exchange
        if trade_type is not None:
            self.trade_type = trade_type
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if price is not None:
            self.price = price
        if volume is not None:
            self.volume = volume
        if amount is not None:
            self.amount = amount
        if fee is not None:
            self.fee = fee
        if unit is not None:
            self.unit = unit
        if created_at is not None:
            self.created_at = created_at

    @property
    def order_id(self):
        """Gets the order_id of this GetTradesResponseItems.  # noqa: E501

        委托单ID  # noqa: E501

        :return: The order_id of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetTradesResponseItems.

        委托单ID  # noqa: E501

        :param order_id: The order_id of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def exchange(self):
        """Gets the exchange of this GetTradesResponseItems.  # noqa: E501

        交易所名称  # noqa: E501

        :return: The exchange of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this GetTradesResponseItems.

        交易所名称  # noqa: E501

        :param exchange: The exchange of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def trade_type(self):
        """Gets the trade_type of this GetTradesResponseItems.  # noqa: E501

        买还是卖 buy:买入 sell:买出  # noqa: E501

        :return: The trade_type of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trade_type

    @trade_type.setter
    def trade_type(self, trade_type):
        """Sets the trade_type of this GetTradesResponseItems.

        买还是卖 buy:买入 sell:买出  # noqa: E501

        :param trade_type: The trade_type of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._trade_type = trade_type

    @property
    def trading_pair(self):
        """Gets the trading_pair of this GetTradesResponseItems.  # noqa: E501

        交易对  # noqa: E501

        :return: The trading_pair of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this GetTradesResponseItems.

        交易对  # noqa: E501

        :param trading_pair: The trading_pair of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def price(self):
        """Gets the price of this GetTradesResponseItems.  # noqa: E501

        成交价格  # noqa: E501

        :return: The price of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetTradesResponseItems.

        成交价格  # noqa: E501

        :param price: The price of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def volume(self):
        """Gets the volume of this GetTradesResponseItems.  # noqa: E501

        成交数量  # noqa: E501

        :return: The volume of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetTradesResponseItems.

        成交数量  # noqa: E501

        :param volume: The volume of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def amount(self):
        """Gets the amount of this GetTradesResponseItems.  # noqa: E501

        成交总额  # noqa: E501

        :return: The amount of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetTradesResponseItems.

        成交总额  # noqa: E501

        :param amount: The amount of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def fee(self):
        """Gets the fee of this GetTradesResponseItems.  # noqa: E501

        手续费  # noqa: E501

        :return: The fee of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this GetTradesResponseItems.

        手续费  # noqa: E501

        :param fee: The fee of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._fee = fee

    @property
    def unit(self):
        """Gets the unit of this GetTradesResponseItems.  # noqa: E501

        手续费单位  # noqa: E501

        :return: The unit of this GetTradesResponseItems.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GetTradesResponseItems.

        手续费单位  # noqa: E501

        :param unit: The unit of this GetTradesResponseItems.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def created_at(self):
        """Gets the created_at of this GetTradesResponseItems.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetTradesResponseItems.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetTradesResponseItems.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetTradesResponseItems.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTradesResponseItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTradesResponseItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
