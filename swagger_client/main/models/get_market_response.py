# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetMarketResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'trading_pair': 'str',
        'total_rate': 'float',
        'buyer_coin_id': 'str',
        'seller_coin_id': 'str',
        'min_price': 'str',
        'max_price': 'str',
        'price_places': 'str',
        'number_places': 'str',
        'trading_area_id': 'str',
        'deep_sharing': 'bool',
        'status': 'str',
        'coin_full_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'trading_pair': 'tradingPair',
        'total_rate': 'totalRate',
        'buyer_coin_id': 'buyerCoinId',
        'seller_coin_id': 'sellerCoinId',
        'min_price': 'minPrice',
        'max_price': 'maxPrice',
        'price_places': 'pricePlaces',
        'number_places': 'numberPlaces',
        'trading_area_id': 'tradingAreaId',
        'deep_sharing': 'deepSharing',
        'status': 'status',
        'coin_full_name': 'coinFullName'
    }

    def __init__(self, id=None, trading_pair=None, total_rate=None, buyer_coin_id=None, seller_coin_id=None, min_price=None, max_price=None, price_places=None, number_places=None, trading_area_id=None, deep_sharing=None, status=None, coin_full_name=None):  # noqa: E501
        """GetMarketResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._trading_pair = None
        self._total_rate = None
        self._buyer_coin_id = None
        self._seller_coin_id = None
        self._min_price = None
        self._max_price = None
        self._price_places = None
        self._number_places = None
        self._trading_area_id = None
        self._deep_sharing = None
        self._status = None
        self._coin_full_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if total_rate is not None:
            self.total_rate = total_rate
        if buyer_coin_id is not None:
            self.buyer_coin_id = buyer_coin_id
        if seller_coin_id is not None:
            self.seller_coin_id = seller_coin_id
        if min_price is not None:
            self.min_price = min_price
        if max_price is not None:
            self.max_price = max_price
        if price_places is not None:
            self.price_places = price_places
        if number_places is not None:
            self.number_places = number_places
        if trading_area_id is not None:
            self.trading_area_id = trading_area_id
        if deep_sharing is not None:
            self.deep_sharing = deep_sharing
        if status is not None:
            self.status = status
        if coin_full_name is not None:
            self.coin_full_name = coin_full_name

    @property
    def id(self):
        """Gets the id of this GetMarketResponse.  # noqa: E501

        市场ID  # noqa: E501

        :return: The id of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetMarketResponse.

        市场ID  # noqa: E501

        :param id: The id of this GetMarketResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def trading_pair(self):
        """Gets the trading_pair of this GetMarketResponse.  # noqa: E501

        市场标识  # noqa: E501

        :return: The trading_pair of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this GetMarketResponse.

        市场标识  # noqa: E501

        :param trading_pair: The trading_pair of this GetMarketResponse.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def total_rate(self):
        """Gets the total_rate of this GetMarketResponse.  # noqa: E501

        总手续费率  # noqa: E501

        :return: The total_rate of this GetMarketResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_rate

    @total_rate.setter
    def total_rate(self, total_rate):
        """Sets the total_rate of this GetMarketResponse.

        总手续费率  # noqa: E501

        :param total_rate: The total_rate of this GetMarketResponse.  # noqa: E501
        :type: float
        """

        self._total_rate = total_rate

    @property
    def buyer_coin_id(self):
        """Gets the buyer_coin_id of this GetMarketResponse.  # noqa: E501

        买方币种ID  # noqa: E501

        :return: The buyer_coin_id of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._buyer_coin_id

    @buyer_coin_id.setter
    def buyer_coin_id(self, buyer_coin_id):
        """Sets the buyer_coin_id of this GetMarketResponse.

        买方币种ID  # noqa: E501

        :param buyer_coin_id: The buyer_coin_id of this GetMarketResponse.  # noqa: E501
        :type: str
        """
        if buyer_coin_id is not None and len(buyer_coin_id) > 32:
            raise ValueError("Invalid value for `buyer_coin_id`, length must be less than or equal to `32`")  # noqa: E501
        if buyer_coin_id is not None and len(buyer_coin_id) < 1:
            raise ValueError("Invalid value for `buyer_coin_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._buyer_coin_id = buyer_coin_id

    @property
    def seller_coin_id(self):
        """Gets the seller_coin_id of this GetMarketResponse.  # noqa: E501

        卖方币种ID  # noqa: E501

        :return: The seller_coin_id of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._seller_coin_id

    @seller_coin_id.setter
    def seller_coin_id(self, seller_coin_id):
        """Sets the seller_coin_id of this GetMarketResponse.

        卖方币种ID  # noqa: E501

        :param seller_coin_id: The seller_coin_id of this GetMarketResponse.  # noqa: E501
        :type: str
        """
        if seller_coin_id is not None and len(seller_coin_id) > 32:
            raise ValueError("Invalid value for `seller_coin_id`, length must be less than or equal to `32`")  # noqa: E501
        if seller_coin_id is not None and len(seller_coin_id) < 1:
            raise ValueError("Invalid value for `seller_coin_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._seller_coin_id = seller_coin_id

    @property
    def min_price(self):
        """Gets the min_price of this GetMarketResponse.  # noqa: E501

        最小交易单价  # noqa: E501

        :return: The min_price of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this GetMarketResponse.

        最小交易单价  # noqa: E501

        :param min_price: The min_price of this GetMarketResponse.  # noqa: E501
        :type: str
        """

        self._min_price = min_price

    @property
    def max_price(self):
        """Gets the max_price of this GetMarketResponse.  # noqa: E501

        最大交易单价  # noqa: E501

        :return: The max_price of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this GetMarketResponse.

        最大交易单价  # noqa: E501

        :param max_price: The max_price of this GetMarketResponse.  # noqa: E501
        :type: str
        """

        self._max_price = max_price

    @property
    def price_places(self):
        """Gets the price_places of this GetMarketResponse.  # noqa: E501

        价格小数位数  # noqa: E501

        :return: The price_places of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._price_places

    @price_places.setter
    def price_places(self, price_places):
        """Sets the price_places of this GetMarketResponse.

        价格小数位数  # noqa: E501

        :param price_places: The price_places of this GetMarketResponse.  # noqa: E501
        :type: str
        """

        self._price_places = price_places

    @property
    def number_places(self):
        """Gets the number_places of this GetMarketResponse.  # noqa: E501

        最小交易单价  # noqa: E501

        :return: The number_places of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._number_places

    @number_places.setter
    def number_places(self, number_places):
        """Sets the number_places of this GetMarketResponse.

        最小交易单价  # noqa: E501

        :param number_places: The number_places of this GetMarketResponse.  # noqa: E501
        :type: str
        """

        self._number_places = number_places

    @property
    def trading_area_id(self):
        """Gets the trading_area_id of this GetMarketResponse.  # noqa: E501

        交易分区ID  # noqa: E501

        :return: The trading_area_id of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._trading_area_id

    @trading_area_id.setter
    def trading_area_id(self, trading_area_id):
        """Sets the trading_area_id of this GetMarketResponse.

        交易分区ID  # noqa: E501

        :param trading_area_id: The trading_area_id of this GetMarketResponse.  # noqa: E501
        :type: str
        """

        self._trading_area_id = trading_area_id

    @property
    def deep_sharing(self):
        """Gets the deep_sharing of this GetMarketResponse.  # noqa: E501

        是否深度共享  # noqa: E501

        :return: The deep_sharing of this GetMarketResponse.  # noqa: E501
        :rtype: bool
        """
        return self._deep_sharing

    @deep_sharing.setter
    def deep_sharing(self, deep_sharing):
        """Sets the deep_sharing of this GetMarketResponse.

        是否深度共享  # noqa: E501

        :param deep_sharing: The deep_sharing of this GetMarketResponse.  # noqa: E501
        :type: bool
        """

        self._deep_sharing = deep_sharing

    @property
    def status(self):
        """Gets the status of this GetMarketResponse.  # noqa: E501

        状态  # noqa: E501

        :return: The status of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetMarketResponse.

        状态  # noqa: E501

        :param status: The status of this GetMarketResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_REVIEW", "RUNNING", "WAIT_CLOSE", "CLOSED_IN", "WAIT_RENEW"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def coin_full_name(self):
        """Gets the coin_full_name of this GetMarketResponse.  # noqa: E501

        币种全称  # noqa: E501

        :return: The coin_full_name of this GetMarketResponse.  # noqa: E501
        :rtype: str
        """
        return self._coin_full_name

    @coin_full_name.setter
    def coin_full_name(self, coin_full_name):
        """Sets the coin_full_name of this GetMarketResponse.

        币种全称  # noqa: E501

        :param coin_full_name: The coin_full_name of this GetMarketResponse.  # noqa: E501
        :type: str
        """

        self._coin_full_name = coin_full_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetMarketResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMarketResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
