# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetProjectResponseCoinInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'short_name': 'str',
        'full_name': 'str',
        'issue_price': 'str',
        'issued_volume': 'str',
        'circulation_volume': 'str',
        'issued_date': 'date',
        'blockchain_type': 'str',
        'data_link': 'str',
        'block_browser': 'str',
        'logo_key': 'str',
        'logo_url': 'str',
        'holders_number': 'str'
    }

    attribute_map = {
        'id': 'id',
        'short_name': 'shortName',
        'full_name': 'fullName',
        'issue_price': 'issuePrice',
        'issued_volume': 'issuedVolume',
        'circulation_volume': 'circulationVolume',
        'issued_date': 'issuedDate',
        'blockchain_type': 'blockchainType',
        'data_link': 'dataLink',
        'block_browser': 'blockBrowser',
        'logo_key': 'logoKey',
        'logo_url': 'logoUrl',
        'holders_number': 'holdersNumber'
    }

    def __init__(self, id=None, short_name=None, full_name=None, issue_price=None, issued_volume=None, circulation_volume=None, issued_date=None, blockchain_type=None, data_link=None, block_browser=None, logo_key=None, logo_url=None, holders_number=None):  # noqa: E501
        """GetProjectResponseCoinInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._short_name = None
        self._full_name = None
        self._issue_price = None
        self._issued_volume = None
        self._circulation_volume = None
        self._issued_date = None
        self._blockchain_type = None
        self._data_link = None
        self._block_browser = None
        self._logo_key = None
        self._logo_url = None
        self._holders_number = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if short_name is not None:
            self.short_name = short_name
        if full_name is not None:
            self.full_name = full_name
        if issue_price is not None:
            self.issue_price = issue_price
        if issued_volume is not None:
            self.issued_volume = issued_volume
        if circulation_volume is not None:
            self.circulation_volume = circulation_volume
        if issued_date is not None:
            self.issued_date = issued_date
        if blockchain_type is not None:
            self.blockchain_type = blockchain_type
        if data_link is not None:
            self.data_link = data_link
        if block_browser is not None:
            self.block_browser = block_browser
        if logo_key is not None:
            self.logo_key = logo_key
        if logo_url is not None:
            self.logo_url = logo_url
        if holders_number is not None:
            self.holders_number = holders_number

    @property
    def id(self):
        """Gets the id of this GetProjectResponseCoinInfo.  # noqa: E501

        币ID  # noqa: E501

        :return: The id of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetProjectResponseCoinInfo.

        币ID  # noqa: E501

        :param id: The id of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def short_name(self):
        """Gets the short_name of this GetProjectResponseCoinInfo.  # noqa: E501

        币简称  # noqa: E501

        :return: The short_name of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this GetProjectResponseCoinInfo.

        币简称  # noqa: E501

        :param short_name: The short_name of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def full_name(self):
        """Gets the full_name of this GetProjectResponseCoinInfo.  # noqa: E501

        币全称  # noqa: E501

        :return: The full_name of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this GetProjectResponseCoinInfo.

        币全称  # noqa: E501

        :param full_name: The full_name of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def issue_price(self):
        """Gets the issue_price of this GetProjectResponseCoinInfo.  # noqa: E501

        发行价  # noqa: E501

        :return: The issue_price of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._issue_price

    @issue_price.setter
    def issue_price(self, issue_price):
        """Sets the issue_price of this GetProjectResponseCoinInfo.

        发行价  # noqa: E501

        :param issue_price: The issue_price of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._issue_price = issue_price

    @property
    def issued_volume(self):
        """Gets the issued_volume of this GetProjectResponseCoinInfo.  # noqa: E501

        发行量  # noqa: E501

        :return: The issued_volume of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._issued_volume

    @issued_volume.setter
    def issued_volume(self, issued_volume):
        """Sets the issued_volume of this GetProjectResponseCoinInfo.

        发行量  # noqa: E501

        :param issued_volume: The issued_volume of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._issued_volume = issued_volume

    @property
    def circulation_volume(self):
        """Gets the circulation_volume of this GetProjectResponseCoinInfo.  # noqa: E501

        流通量  # noqa: E501

        :return: The circulation_volume of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._circulation_volume

    @circulation_volume.setter
    def circulation_volume(self, circulation_volume):
        """Sets the circulation_volume of this GetProjectResponseCoinInfo.

        流通量  # noqa: E501

        :param circulation_volume: The circulation_volume of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._circulation_volume = circulation_volume

    @property
    def issued_date(self):
        """Gets the issued_date of this GetProjectResponseCoinInfo.  # noqa: E501

        发行时间  # noqa: E501

        :return: The issued_date of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: date
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this GetProjectResponseCoinInfo.

        发行时间  # noqa: E501

        :param issued_date: The issued_date of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: date
        """

        self._issued_date = issued_date

    @property
    def blockchain_type(self):
        """Gets the blockchain_type of this GetProjectResponseCoinInfo.  # noqa: E501

        区块链类型  # noqa: E501

        :return: The blockchain_type of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._blockchain_type

    @blockchain_type.setter
    def blockchain_type(self, blockchain_type):
        """Sets the blockchain_type of this GetProjectResponseCoinInfo.

        区块链类型  # noqa: E501

        :param blockchain_type: The blockchain_type of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["public_chain", "private_chain", "smart_contract"]  # noqa: E501
        if blockchain_type not in allowed_values:
            raise ValueError(
                "Invalid value for `blockchain_type` ({0}), must be one of {1}"  # noqa: E501
                .format(blockchain_type, allowed_values)
            )

        self._blockchain_type = blockchain_type

    @property
    def data_link(self):
        """Gets the data_link of this GetProjectResponseCoinInfo.  # noqa: E501

        资料链接  # noqa: E501

        :return: The data_link of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._data_link

    @data_link.setter
    def data_link(self, data_link):
        """Sets the data_link of this GetProjectResponseCoinInfo.

        资料链接  # noqa: E501

        :param data_link: The data_link of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._data_link = data_link

    @property
    def block_browser(self):
        """Gets the block_browser of this GetProjectResponseCoinInfo.  # noqa: E501

        区块浏览器  # noqa: E501

        :return: The block_browser of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._block_browser

    @block_browser.setter
    def block_browser(self, block_browser):
        """Sets the block_browser of this GetProjectResponseCoinInfo.

        区块浏览器  # noqa: E501

        :param block_browser: The block_browser of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._block_browser = block_browser

    @property
    def logo_key(self):
        """Gets the logo_key of this GetProjectResponseCoinInfo.  # noqa: E501

        币图标KEY  # noqa: E501

        :return: The logo_key of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._logo_key

    @logo_key.setter
    def logo_key(self, logo_key):
        """Sets the logo_key of this GetProjectResponseCoinInfo.

        币图标KEY  # noqa: E501

        :param logo_key: The logo_key of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._logo_key = logo_key

    @property
    def logo_url(self):
        """Gets the logo_url of this GetProjectResponseCoinInfo.  # noqa: E501

        币图标URL  # noqa: E501

        :return: The logo_url of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this GetProjectResponseCoinInfo.

        币图标URL  # noqa: E501

        :param logo_url: The logo_url of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def holders_number(self):
        """Gets the holders_number of this GetProjectResponseCoinInfo.  # noqa: E501

        持有人数  # noqa: E501

        :return: The holders_number of this GetProjectResponseCoinInfo.  # noqa: E501
        :rtype: str
        """
        return self._holders_number

    @holders_number.setter
    def holders_number(self, holders_number):
        """Sets the holders_number of this GetProjectResponseCoinInfo.

        持有人数  # noqa: E501

        :param holders_number: The holders_number of this GetProjectResponseCoinInfo.  # noqa: E501
        :type: str
        """

        self._holders_number = holders_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProjectResponseCoinInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProjectResponseCoinInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
