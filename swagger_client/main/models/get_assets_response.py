# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.main.models.get_assets_response_asset_info import GetAssetsResponseAssetInfo  # noqa: F401,E501
from swagger_client.main.models.get_assets_response_estimates import GetAssetsResponseEstimates  # noqa: F401,E501


class GetAssetsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'estimates': 'GetAssetsResponseEstimates',
        'item_number': 'int',
        'asset_info': 'list[GetAssetsResponseAssetInfo]'
    }

    attribute_map = {
        'estimates': 'estimates',
        'item_number': 'itemNumber',
        'asset_info': 'assetInfo'
    }

    def __init__(self, estimates=None, item_number=None, asset_info=None):  # noqa: E501
        """GetAssetsResponse - a model defined in Swagger"""  # noqa: E501

        self._estimates = None
        self._item_number = None
        self._asset_info = None
        self.discriminator = None

        if estimates is not None:
            self.estimates = estimates
        if item_number is not None:
            self.item_number = item_number
        if asset_info is not None:
            self.asset_info = asset_info

    @property
    def estimates(self):
        """Gets the estimates of this GetAssetsResponse.  # noqa: E501


        :return: The estimates of this GetAssetsResponse.  # noqa: E501
        :rtype: GetAssetsResponseEstimates
        """
        return self._estimates

    @estimates.setter
    def estimates(self, estimates):
        """Sets the estimates of this GetAssetsResponse.


        :param estimates: The estimates of this GetAssetsResponse.  # noqa: E501
        :type: GetAssetsResponseEstimates
        """

        self._estimates = estimates

    @property
    def item_number(self):
        """Gets the item_number of this GetAssetsResponse.  # noqa: E501

        总条数  # noqa: E501

        :return: The item_number of this GetAssetsResponse.  # noqa: E501
        :rtype: int
        """
        return self._item_number

    @item_number.setter
    def item_number(self, item_number):
        """Sets the item_number of this GetAssetsResponse.

        总条数  # noqa: E501

        :param item_number: The item_number of this GetAssetsResponse.  # noqa: E501
        :type: int
        """

        self._item_number = item_number

    @property
    def asset_info(self):
        """Gets the asset_info of this GetAssetsResponse.  # noqa: E501

        资产详情列表  # noqa: E501

        :return: The asset_info of this GetAssetsResponse.  # noqa: E501
        :rtype: list[GetAssetsResponseAssetInfo]
        """
        return self._asset_info

    @asset_info.setter
    def asset_info(self, asset_info):
        """Sets the asset_info of this GetAssetsResponse.

        资产详情列表  # noqa: E501

        :param asset_info: The asset_info of this GetAssetsResponse.  # noqa: E501
        :type: list[GetAssetsResponseAssetInfo]
        """

        self._asset_info = asset_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAssetsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAssetsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
