# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.main.models.face_id_result_response_biz_info import FaceIdResultResponseBizInfo  # noqa: F401,E501
from swagger_client.main.models.face_id_result_response_idcard_info import FaceIdResultResponseIdcardInfo  # noqa: F401,E501
from swagger_client.main.models.face_id_result_response_images import FaceIdResultResponseImages  # noqa: F401,E501
from swagger_client.main.models.face_id_result_response_liveness_result import FaceIdResultResponseLivenessResult  # noqa: F401,E501
from swagger_client.main.models.face_id_result_response_verify_result import FaceIdResultResponseVerifyResult  # noqa: F401,E501


class FaceIdResultResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'status': 'str',
        'biz_info': 'FaceIdResultResponseBizInfo',
        'idcard_info': 'FaceIdResultResponseIdcardInfo',
        'liveness_result': 'FaceIdResultResponseLivenessResult',
        'verify_result': 'FaceIdResultResponseVerifyResult',
        'images': 'FaceIdResultResponseImages',
        'time_used': 'float'
    }

    attribute_map = {
        'request_id': 'request_id',
        'status': 'status',
        'biz_info': 'biz_info',
        'idcard_info': 'idcard_info',
        'liveness_result': 'liveness_result',
        'verify_result': 'verify_result',
        'images': 'images',
        'time_used': 'time_used'
    }

    def __init__(self, request_id=None, status=None, biz_info=None, idcard_info=None, liveness_result=None, verify_result=None, images=None, time_used=None):  # noqa: E501
        """FaceIdResultResponse - a model defined in Swagger"""  # noqa: E501

        self._request_id = None
        self._status = None
        self._biz_info = None
        self._idcard_info = None
        self._liveness_result = None
        self._verify_result = None
        self._images = None
        self._time_used = None
        self.discriminator = None

        if request_id is not None:
            self.request_id = request_id
        if status is not None:
            self.status = status
        if biz_info is not None:
            self.biz_info = biz_info
        if idcard_info is not None:
            self.idcard_info = idcard_info
        if liveness_result is not None:
            self.liveness_result = liveness_result
        if verify_result is not None:
            self.verify_result = verify_result
        if images is not None:
            self.images = images
        if time_used is not None:
            self.time_used = time_used

    @property
    def request_id(self):
        """Gets the request_id of this FaceIdResultResponse.  # noqa: E501

        request-id  # noqa: E501

        :return: The request_id of this FaceIdResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this FaceIdResultResponse.

        request-id  # noqa: E501

        :param request_id: The request_id of this FaceIdResultResponse.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this FaceIdResultResponse.  # noqa: E501

        status，参考https://faceid.com/pages/documents/5680488  # noqa: E501

        :return: The status of this FaceIdResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FaceIdResultResponse.

        status，参考https://faceid.com/pages/documents/5680488  # noqa: E501

        :param status: The status of this FaceIdResultResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def biz_info(self):
        """Gets the biz_info of this FaceIdResultResponse.  # noqa: E501


        :return: The biz_info of this FaceIdResultResponse.  # noqa: E501
        :rtype: FaceIdResultResponseBizInfo
        """
        return self._biz_info

    @biz_info.setter
    def biz_info(self, biz_info):
        """Sets the biz_info of this FaceIdResultResponse.


        :param biz_info: The biz_info of this FaceIdResultResponse.  # noqa: E501
        :type: FaceIdResultResponseBizInfo
        """

        self._biz_info = biz_info

    @property
    def idcard_info(self):
        """Gets the idcard_info of this FaceIdResultResponse.  # noqa: E501


        :return: The idcard_info of this FaceIdResultResponse.  # noqa: E501
        :rtype: FaceIdResultResponseIdcardInfo
        """
        return self._idcard_info

    @idcard_info.setter
    def idcard_info(self, idcard_info):
        """Sets the idcard_info of this FaceIdResultResponse.


        :param idcard_info: The idcard_info of this FaceIdResultResponse.  # noqa: E501
        :type: FaceIdResultResponseIdcardInfo
        """

        self._idcard_info = idcard_info

    @property
    def liveness_result(self):
        """Gets the liveness_result of this FaceIdResultResponse.  # noqa: E501


        :return: The liveness_result of this FaceIdResultResponse.  # noqa: E501
        :rtype: FaceIdResultResponseLivenessResult
        """
        return self._liveness_result

    @liveness_result.setter
    def liveness_result(self, liveness_result):
        """Sets the liveness_result of this FaceIdResultResponse.


        :param liveness_result: The liveness_result of this FaceIdResultResponse.  # noqa: E501
        :type: FaceIdResultResponseLivenessResult
        """

        self._liveness_result = liveness_result

    @property
    def verify_result(self):
        """Gets the verify_result of this FaceIdResultResponse.  # noqa: E501


        :return: The verify_result of this FaceIdResultResponse.  # noqa: E501
        :rtype: FaceIdResultResponseVerifyResult
        """
        return self._verify_result

    @verify_result.setter
    def verify_result(self, verify_result):
        """Sets the verify_result of this FaceIdResultResponse.


        :param verify_result: The verify_result of this FaceIdResultResponse.  # noqa: E501
        :type: FaceIdResultResponseVerifyResult
        """

        self._verify_result = verify_result

    @property
    def images(self):
        """Gets the images of this FaceIdResultResponse.  # noqa: E501


        :return: The images of this FaceIdResultResponse.  # noqa: E501
        :rtype: FaceIdResultResponseImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this FaceIdResultResponse.


        :param images: The images of this FaceIdResultResponse.  # noqa: E501
        :type: FaceIdResultResponseImages
        """

        self._images = images

    @property
    def time_used(self):
        """Gets the time_used of this FaceIdResultResponse.  # noqa: E501


        :return: The time_used of this FaceIdResultResponse.  # noqa: E501
        :rtype: float
        """
        return self._time_used

    @time_used.setter
    def time_used(self, time_used):
        """Sets the time_used of this FaceIdResultResponse.


        :param time_used: The time_used of this FaceIdResultResponse.  # noqa: E501
        :type: float
        """

        self._time_used = time_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FaceIdResultResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceIdResultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
