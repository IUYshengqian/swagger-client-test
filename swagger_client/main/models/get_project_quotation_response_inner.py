# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetProjectQuotationResponseInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'coin_id': 'str',
        'full_name': 'str',
        'short_name': 'str',
        'coin_logo': 'str',
        'volume': 'str',
        'listed_exchange': 'str',
        'issued_volume': 'str'
    }

    attribute_map = {
        'id': 'id',
        'coin_id': 'coinId',
        'full_name': 'fullName',
        'short_name': 'shortName',
        'coin_logo': 'coinLogo',
        'volume': 'volume',
        'listed_exchange': 'listedExchange',
        'issued_volume': 'issuedVolume'
    }

    def __init__(self, id=None, coin_id=None, full_name=None, short_name=None, coin_logo=None, volume=None, listed_exchange=None, issued_volume=None):  # noqa: E501
        """GetProjectQuotationResponseInner - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._coin_id = None
        self._full_name = None
        self._short_name = None
        self._coin_logo = None
        self._volume = None
        self._listed_exchange = None
        self._issued_volume = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if coin_id is not None:
            self.coin_id = coin_id
        if full_name is not None:
            self.full_name = full_name
        if short_name is not None:
            self.short_name = short_name
        if coin_logo is not None:
            self.coin_logo = coin_logo
        if volume is not None:
            self.volume = volume
        if listed_exchange is not None:
            self.listed_exchange = listed_exchange
        if issued_volume is not None:
            self.issued_volume = issued_volume

    @property
    def id(self):
        """Gets the id of this GetProjectQuotationResponseInner.  # noqa: E501

        项目ID  # noqa: E501

        :return: The id of this GetProjectQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetProjectQuotationResponseInner.

        项目ID  # noqa: E501

        :param id: The id of this GetProjectQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def coin_id(self):
        """Gets the coin_id of this GetProjectQuotationResponseInner.  # noqa: E501

        币种ID  # noqa: E501

        :return: The coin_id of this GetProjectQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._coin_id

    @coin_id.setter
    def coin_id(self, coin_id):
        """Sets the coin_id of this GetProjectQuotationResponseInner.

        币种ID  # noqa: E501

        :param coin_id: The coin_id of this GetProjectQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._coin_id = coin_id

    @property
    def full_name(self):
        """Gets the full_name of this GetProjectQuotationResponseInner.  # noqa: E501

        币全称  # noqa: E501

        :return: The full_name of this GetProjectQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this GetProjectQuotationResponseInner.

        币全称  # noqa: E501

        :param full_name: The full_name of this GetProjectQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def short_name(self):
        """Gets the short_name of this GetProjectQuotationResponseInner.  # noqa: E501

        币种简称  # noqa: E501

        :return: The short_name of this GetProjectQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this GetProjectQuotationResponseInner.

        币种简称  # noqa: E501

        :param short_name: The short_name of this GetProjectQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def coin_logo(self):
        """Gets the coin_logo of this GetProjectQuotationResponseInner.  # noqa: E501

        币种LOGO  # noqa: E501

        :return: The coin_logo of this GetProjectQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._coin_logo

    @coin_logo.setter
    def coin_logo(self, coin_logo):
        """Sets the coin_logo of this GetProjectQuotationResponseInner.

        币种LOGO  # noqa: E501

        :param coin_logo: The coin_logo of this GetProjectQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._coin_logo = coin_logo

    @property
    def volume(self):
        """Gets the volume of this GetProjectQuotationResponseInner.  # noqa: E501

        24H交易量  # noqa: E501

        :return: The volume of this GetProjectQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetProjectQuotationResponseInner.

        24H交易量  # noqa: E501

        :param volume: The volume of this GetProjectQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def listed_exchange(self):
        """Gets the listed_exchange of this GetProjectQuotationResponseInner.  # noqa: E501

        已上交易所数量  # noqa: E501

        :return: The listed_exchange of this GetProjectQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._listed_exchange

    @listed_exchange.setter
    def listed_exchange(self, listed_exchange):
        """Sets the listed_exchange of this GetProjectQuotationResponseInner.

        已上交易所数量  # noqa: E501

        :param listed_exchange: The listed_exchange of this GetProjectQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._listed_exchange = listed_exchange

    @property
    def issued_volume(self):
        """Gets the issued_volume of this GetProjectQuotationResponseInner.  # noqa: E501

        发行数量  # noqa: E501

        :return: The issued_volume of this GetProjectQuotationResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._issued_volume

    @issued_volume.setter
    def issued_volume(self, issued_volume):
        """Sets the issued_volume of this GetProjectQuotationResponseInner.

        发行数量  # noqa: E501

        :param issued_volume: The issued_volume of this GetProjectQuotationResponseInner.  # noqa: E501
        :type: str
        """

        self._issued_volume = issued_volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProjectQuotationResponseInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProjectQuotationResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
