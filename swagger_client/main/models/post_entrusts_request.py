# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostEntrustsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market_id': 'str',
        'trade_type': 'str',
        'price': 'str',
        'volume': 'str',
        'entrust_type': 'str',
        'trigger_price': 'str',
        'auto_cancel_at': 'str'
    }

    attribute_map = {
        'market_id': 'marketId',
        'trade_type': 'tradeType',
        'price': 'price',
        'volume': 'volume',
        'entrust_type': 'entrustType',
        'trigger_price': 'triggerPrice',
        'auto_cancel_at': 'autoCancelAt'
    }

    def __init__(self, market_id=None, trade_type=None, price=None, volume=None, entrust_type=None, trigger_price=None, auto_cancel_at=None):  # noqa: E501
        """PostEntrustsRequest - a model defined in Swagger"""  # noqa: E501

        self._market_id = None
        self._trade_type = None
        self._price = None
        self._volume = None
        self._entrust_type = None
        self._trigger_price = None
        self._auto_cancel_at = None
        self.discriminator = None

        if market_id is not None:
            self.market_id = market_id
        if trade_type is not None:
            self.trade_type = trade_type
        if price is not None:
            self.price = price
        if volume is not None:
            self.volume = volume
        if entrust_type is not None:
            self.entrust_type = entrust_type
        if trigger_price is not None:
            self.trigger_price = trigger_price
        if auto_cancel_at is not None:
            self.auto_cancel_at = auto_cancel_at

    @property
    def market_id(self):
        """Gets the market_id of this PostEntrustsRequest.  # noqa: E501

        市场ID  # noqa: E501

        :return: The market_id of this PostEntrustsRequest.  # noqa: E501
        :rtype: str
        """
        return self._market_id

    @market_id.setter
    def market_id(self, market_id):
        """Sets the market_id of this PostEntrustsRequest.

        市场ID  # noqa: E501

        :param market_id: The market_id of this PostEntrustsRequest.  # noqa: E501
        :type: str
        """

        self._market_id = market_id

    @property
    def trade_type(self):
        """Gets the trade_type of this PostEntrustsRequest.  # noqa: E501

        交易类型  buy:买入 sell:买出  # noqa: E501

        :return: The trade_type of this PostEntrustsRequest.  # noqa: E501
        :rtype: str
        """
        return self._trade_type

    @trade_type.setter
    def trade_type(self, trade_type):
        """Sets the trade_type of this PostEntrustsRequest.

        交易类型  buy:买入 sell:买出  # noqa: E501

        :param trade_type: The trade_type of this PostEntrustsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if trade_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trade_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trade_type, allowed_values)
            )

        self._trade_type = trade_type

    @property
    def price(self):
        """Gets the price of this PostEntrustsRequest.  # noqa: E501

        价格  # noqa: E501

        :return: The price of this PostEntrustsRequest.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PostEntrustsRequest.

        价格  # noqa: E501

        :param price: The price of this PostEntrustsRequest.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def volume(self):
        """Gets the volume of this PostEntrustsRequest.  # noqa: E501

        数量  # noqa: E501

        :return: The volume of this PostEntrustsRequest.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this PostEntrustsRequest.

        数量  # noqa: E501

        :param volume: The volume of this PostEntrustsRequest.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def entrust_type(self):
        """Gets the entrust_type of this PostEntrustsRequest.  # noqa: E501

        委托类型 limit限价 market市价 profit_loss止盈止损  time_limit限时委托  # noqa: E501

        :return: The entrust_type of this PostEntrustsRequest.  # noqa: E501
        :rtype: str
        """
        return self._entrust_type

    @entrust_type.setter
    def entrust_type(self, entrust_type):
        """Sets the entrust_type of this PostEntrustsRequest.

        委托类型 limit限价 market市价 profit_loss止盈止损  time_limit限时委托  # noqa: E501

        :param entrust_type: The entrust_type of this PostEntrustsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["limit", "market", "profit_loss", "time_limit"]  # noqa: E501
        if entrust_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entrust_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entrust_type, allowed_values)
            )

        self._entrust_type = entrust_type

    @property
    def trigger_price(self):
        """Gets the trigger_price of this PostEntrustsRequest.  # noqa: E501

        触发价(止盈止损时必填)  # noqa: E501

        :return: The trigger_price of this PostEntrustsRequest.  # noqa: E501
        :rtype: str
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this PostEntrustsRequest.

        触发价(止盈止损时必填)  # noqa: E501

        :param trigger_price: The trigger_price of this PostEntrustsRequest.  # noqa: E501
        :type: str
        """

        self._trigger_price = trigger_price

    @property
    def auto_cancel_at(self):
        """Gets the auto_cancel_at of this PostEntrustsRequest.  # noqa: E501

        自动撤单时间(限时委托时必填,请主要要转换成UTC时间，格式为2018-03-08 22:39)  # noqa: E501

        :return: The auto_cancel_at of this PostEntrustsRequest.  # noqa: E501
        :rtype: str
        """
        return self._auto_cancel_at

    @auto_cancel_at.setter
    def auto_cancel_at(self, auto_cancel_at):
        """Sets the auto_cancel_at of this PostEntrustsRequest.

        自动撤单时间(限时委托时必填,请主要要转换成UTC时间，格式为2018-03-08 22:39)  # noqa: E501

        :param auto_cancel_at: The auto_cancel_at of this PostEntrustsRequest.  # noqa: E501
        :type: str
        """

        self._auto_cancel_at = auto_cancel_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostEntrustsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostEntrustsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
