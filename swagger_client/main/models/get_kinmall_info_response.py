# coding: utf-8

"""
    crush-main 平台接口（主平台）

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetKinmallInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'created_at': 'str',
        'author': 'str',
        'url': 'str',
        'content': 'str'
    }

    attribute_map = {
        'title': 'title',
        'created_at': 'createdAt',
        'author': 'author',
        'url': 'url',
        'content': 'content'
    }

    def __init__(self, title=None, created_at=None, author=None, url=None, content=None):  # noqa: E501
        """GetKinmallInfoResponse - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._created_at = None
        self._author = None
        self._url = None
        self._content = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if created_at is not None:
            self.created_at = created_at
        if author is not None:
            self.author = author
        if url is not None:
            self.url = url
        if content is not None:
            self.content = content

    @property
    def title(self):
        """Gets the title of this GetKinmallInfoResponse.  # noqa: E501

        标题  # noqa: E501

        :return: The title of this GetKinmallInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetKinmallInfoResponse.

        标题  # noqa: E501

        :param title: The title of this GetKinmallInfoResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def created_at(self):
        """Gets the created_at of this GetKinmallInfoResponse.  # noqa: E501

        创建时间  # noqa: E501

        :return: The created_at of this GetKinmallInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetKinmallInfoResponse.

        创建时间  # noqa: E501

        :param created_at: The created_at of this GetKinmallInfoResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def author(self):
        """Gets the author of this GetKinmallInfoResponse.  # noqa: E501

        作者  # noqa: E501

        :return: The author of this GetKinmallInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GetKinmallInfoResponse.

        作者  # noqa: E501

        :param author: The author of this GetKinmallInfoResponse.  # noqa: E501
        :type: str
        """
        if author is not None and len(author) > 8:
            raise ValueError("Invalid value for `author`, length must be less than or equal to `8`")  # noqa: E501
        if author is not None and len(author) < 0:
            raise ValueError("Invalid value for `author`, length must be greater than or equal to `0`")  # noqa: E501

        self._author = author

    @property
    def url(self):
        """Gets the url of this GetKinmallInfoResponse.  # noqa: E501

        跳转链接  # noqa: E501

        :return: The url of this GetKinmallInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetKinmallInfoResponse.

        跳转链接  # noqa: E501

        :param url: The url of this GetKinmallInfoResponse.  # noqa: E501
        :type: str
        """
        if url is not None and len(url) > 64:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `64`")  # noqa: E501
        if url is not None and len(url) < 5:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `5`")  # noqa: E501

        self._url = url

    @property
    def content(self):
        """Gets the content of this GetKinmallInfoResponse.  # noqa: E501

        内容  # noqa: E501

        :return: The content of this GetKinmallInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GetKinmallInfoResponse.

        内容  # noqa: E501

        :param content: The content of this GetKinmallInfoResponse.  # noqa: E501
        :type: str
        """
        if content is not None and len(content) > 2048:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `2048`")  # noqa: E501
        if content is not None and len(content) < 0:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `0`")  # noqa: E501

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetKinmallInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetKinmallInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
