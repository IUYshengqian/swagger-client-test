# @Time    : 2018/11/20 16:57
# @Author  : ZDK
# @Email    : zhengdengke@wanshare.com

# coding: utf-8


"""
    crush 项目方平台（venture）相关接口

    crush 项目方相关的后段（staff）接口和（tenant）交易所接口  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: api@crush.team
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pytest
import json
import swagger_client.venture
from swagger_client.venture.api.project_announcement_api import ProjectAnnouncementApi  # noqa: E501
from swagger_client.venture.rest import ApiException
from conftest import verify, login, logout, register, BACK_DOOR_VERIFY_CODE, rand_password, rand_email, rand_phone, \
    rand_indiv_cert
from swagger_client.venture.models.post_news_request import PostNewsRequest
from swagger_client.venture.models.post_notices_request import PostNoticesRequest
from swagger_client.venture.models.post_report_request import PostReportRequest

api = swagger_client.venture.api.project_announcement_api.ProjectAnnouncementApi()


def help_return_project_id():
    """获取项目id并返回"""
    api_project = swagger_client.venture.api.project_api.ProjectApi()
    ret = api_project.projects_get(page=1, order_rule="latestPrice")
    for item in ret.items:
        if item["project_name"] == '':
            return item["project_id"]


def help_return_project_news_id():
    """新建新闻资讯、获取资讯id并返回"""
    payload = {
        "title": "新闻资讯1",
        "link": "www.baidu.com",
        "source": "百度"
    }
    req = PostNewsRequest(**payload)
    api.projects_id_news_post(id=help_return_project_id(), body=req)
    res = api.projects_id_news_get(id=help_return_project_id())
    for item in res.items:
        if item["project_name"] == '':
            return item["id"]


def help_return_project_notices_id():
    """新建项目公告、获取公告id并返回"""
    payload = {
        "title": "项目公告1",
        "content": "注意：这是公告的内容信息！"
    }
    req = PostNoticesRequest(**payload)
    api.projects_id_notices_post(id=help_return_project_id(), body=req)
    res = api.projects_id_notices_get(id=help_return_project_id(), page=1)
    for item in res.items:
        if item["project_name"] == '':
            return item["id"]


def help_return_project_reports_id():
    """新建项目报告、获取报告id并返回"""
    payload = {
        "title": "项目报告12",
        "type": "daily",
        "reportUrl": "xxx/xxx.pdf"
    }
    req = PostReportRequest(**payload)
    api.projects_id_reports_post(id=help_return_project_id(), body=req)
    res = api.projects_id_reports_get(id=help_return_project_id(), page=1)
    for item in res.items:
        if item["project_name"] == '':
            return item["id"]


def pytest_namespace():
    return {'email': "", "password": "", "base_token": ""}


class TestProjectAnnouncementApi:
    """ProjectAnnouncementApi pytest stubs"""

    def test_register_and_login_prepare(self):
        country = "86"
        pytest.email = rand_email()
        pytest.password = rand_password()
        register(email=pytest.email, password=pytest.password, promotion_code="",
                 verification_code=BACK_DOOR_VERIFY_CODE,
                 country=country)

        pytest.base_token = login(api, pytest.email, pytest.password, challenge="", seccode=BACK_DOOR_VERIFY_CODE,
                                  validate="")
        print("register return base_token:%s" % pytest.base_token)

    def test_projects_id_news_get(self):
        """Test case for projects_id_news_get

        获取项目新闻资讯列表  # noqa: E501
        """
        api.projects_id_news_get(id=help_return_project_id(), page=1)

    def test_projects_id_news_news_id_delete(self):
        """Test case for projects_id_news_news_id_delete

        删除新闻资讯  # noqa: E501
        """
        api.projects_id_news_news_id_delete(id=help_return_project_id(), news_id=help_return_project_news_id())

    def test_projects_id_news_post(self):
        """Test case for projects_id_news_post
        发送新闻资讯  # noqa: E501
        """
        payload = {
            "title": "标题1",
            "link": "www.baidu.com",
            "source": "百度"
        }
        req = PostNewsRequest(**payload)
        api.projects_id_news_post(id=help_return_project_id(), body=req)

    def test_projects_id_notices_get(self):
        """Test case for projects_id_notices_get

        获取项目公告列表  # noqa: E501
        """
        api.projects_id_notices_get(id=help_return_project_id(), page=1)

    def test_projects_id_notices_notice_id_delete(self):
        """Test case for projects_id_notices_notice_id_delete
        删除项目公告  # noqa: E501
        """
        api.projects_id_notices_notice_id_delete(id=help_return_project_id(), notice_id=help_return_project_notices_id()
                                                 )

    def test_projects_id_notices_notice_id_get(self):
        """Test case for projects_id_notices_notice_id_get
        查看公告详情  # noqa: E501
        """
        api.projects_id_notices_notice_id_get(id=help_return_project_id(), notice_id=help_return_project_notices_id())

    def test_projects_id_notices_post(self):
        """Test case for projects_id_notices_post

        发送项目公告  # noqa: E501
        """
        payload = {
            "title": "标题1",
            "content": "注意：这是公告的内容信息！"
        }
        req = PostNoticesRequest(**payload)
        api.projects_id_notices_post(id=help_return_project_id(), body=req)

    def test_projects_id_reports_get(self):
        """Test case for projects_id_reports_get
        获取项目报告列表  # noqa: E501
        """
        api.projects_id_reports_get(id=help_return_project_id(), page=1)

    def test_projects_id_reports_post(self):
        """Test case for projects_id_reports_post
        发送项目报告  # noqa: E501
        """
        payload = {
            "title": "项目报告12",
            "type": "daily",
            "reportUrl": "xxx/xxx.pdf"
        }
        req = PostReportRequest(**payload)
        api.projects_id_reports_post(id=help_return_project_id(), body=req)

    def test_projects_id_reports_report_id_delete(self):
        """Test case for projects_id_reports_report_id_delete
        删除项目报告  # noqa: E501
        """
        api.projects_id_reports_report_id_delete(id=help_return_project_id(), report_id=help_return_project_reports_id()
                                                 )
