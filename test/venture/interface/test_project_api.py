# coding: utf-8

"""
    crush 项目方平台（venture）相关接口

    crush 项目方相关的后段（staff）接口和（tenant）交易所接口  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: api@crush.team
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pytest
import json
import swagger_client.venture
from swagger_client.venture.api.project_api import ProjectApi  # noqa: E501
from swagger_client.venture.rest import ApiException
from conftest import verify, login, logout, register, BACK_DOOR_VERIFY_CODE, rand_password, rand_email, rand_phone, \
    rand_indiv_cert
from swagger_client.venture.models.application_request import ApplicationRequest

api = swagger_client.venture.api.project_api.ProjectApi()


def pytest_namespace():
    return {'email': "", "password": "", "base_token": "", "phone": ""}


class TestProjectApi:
    """ProjectApi pytest stubs"""

    def test_register_and_login_prepare(self):
        country = "86"
        pytest.email = rand_email()
        pytest.password = rand_password()
        register(email=pytest.email, password=pytest.password, promotion_code="",
                 verification_code=BACK_DOOR_VERIFY_CODE,
                 country=country)

        pytest.base_token = login(api, pytest.email, pytest.password, challenge="", seccode=BACK_DOOR_VERIFY_CODE,
                                  validate="")
        print("register return base_token:%s" % pytest.base_token)

    def test_applications_check_project_name_post(self):
        """Test case for applications_check_project_name_post

        校验项目名称是否已存在  # noqa: E501
        """
        api.applications_check_project_name_post(project_name="项目方88888")

    def test_applications_get(self):
        """Test case for applications_get

        查看申请列表  # noqa: E501
        """
        api.applications_get(page=1)

    def test_applications_id_get(self):
        """Test case for applications_id_get

        查看申请详情  # noqa: E501
        """
        api.applications_id_get(id='')

    @pytest.mark.parametrize("project_name", '比特币')
    @pytest.mark.parametrize("description", 'XXXXXXXXXXXXXXXX')
    @pytest.mark.parametrize("official_website", 'www.baidu.com')
    @pytest.mark.parametrize("white_paper", 'url/pdf123455')
    @pytest.mark.parametrize("area_code", '+86')
    @pytest.mark.parametrize("project_poster", 'url/image123455')
    @pytest.mark.parametrize("cellphone", '13510022445')
    @pytest.mark.parametrize("telephone", '12874846')
    @pytest.mark.parametrize("email", '1234832456@qq.com')
    @pytest.mark.parametrize("full_name", 'BitCoin')
    @pytest.mark.parametrize("short_name", 'BTC')
    @pytest.mark.parametrize("issue_price", '2.24545')
    @pytest.mark.parametrize("issued_volume", '1000000')
    @pytest.mark.parametrize("circulation_volume", '1000000')
    @pytest.mark.parametrize("issued_at", '2018-08-08')
    @pytest.mark.parametrize("coin_logo", 'url/image456455')
    @pytest.mark.parametrize("blockchain_type", 'public_chain')
    @pytest.mark.parametrize("data_link", 'www.baidu.com')
    @pytest.mark.parametrize("block_browser", 'www.baidu.com')
    def test_applications_id_put(self, project_name, description, official_website, white_paper, area_code,
                                 project_poster, cellphone, telephone, email, full_name, short_name, issue_price,
                                 issued_volume, circulation_volume, issued_at, coin_logo, blockchain_type, data_link,
                                 block_browser):
        """Test case for applications_id_put
        修改申请信息  # noqa: E501
        """
        payload = {
            'project_name': project_name,
            'description': description,
            'official_website': official_website,
            'white_paper': white_paper,
            'area_code': area_code,
            'project_poster': project_poster,
            'cellphone': cellphone,
            'telephone': telephone,
            'email': email,
            'full_name': full_name,
            'short_name': short_name,
            'issue_price': issue_price,
            'issued_volume': issued_volume,
            'circulation_volume': circulation_volume,
            'issued_at': issued_at,
            'coin_logo': coin_logo,
            'blockchain_type': blockchain_type,
            'data_link': data_link,
            'block_browser': block_browser
        }
        req = ApplicationRequest(**payload)
        api.applications_id_put(id='', body=req)

    def test_applications_id_set_sponsor_put(self):
        """Test case for applications_id_set_sponsor_put

        设置项目保荐机构  # noqa: E501
        """
        payload = {"sponsorId": ""}
        req = ApplicationRequest(**payload)
        api.applications_id_set_sponsor_put(id='', body=req)

    def test_applications_num_get(self):
        """Test case for applications_num_get

        获取申请中的项目数量  # noqa: E501
        """
        api.applications_num_get()

    @pytest.mark.parametrize("project_name", ['比特币', '', '币', '比搜房努力扩大解放了精神分裂受到了反抗势力对抗肌肤'])
    @pytest.mark.parametrize("description", '', 'XXXXXXXXXXXXXXXX')
    @pytest.mark.parametrize("official_website", ['www.baidu.com', '', 'dfgd', 'dfgddfsdfeddfsxxdffsfgcssfggdxsfgdgd'])
    @pytest.mark.parametrize("white_paper", 'url/pdf123455', '')
    @pytest.mark.parametrize("area_code", '+86')
    @pytest.mark.parametrize("project_poster", 'url/image123455', '')
    @pytest.mark.parametrize("cellphone", '13510022445', '')
    @pytest.mark.parametrize("telephone", ['12874846', '3546543', '123456789009876543'])
    @pytest.mark.parametrize("email", '1234832456@qq.com')
    @pytest.mark.parametrize("full_name", ['BitCoin', '币', '比搜房努力扩大解放了精神分裂受到了反抗势力对抗肌肤'])
    @pytest.mark.parametrize("short_name", ['BTC', '币', '比搜房努力扩大解放了精神分裂受到了反抗势力对抗肌肤'])
    @pytest.mark.parametrize("issue_price", ['2.24545', '', '43524564345.75656754675467'])
    @pytest.mark.parametrize("issued_volume", ['1000000', '', '4352456434545.7565675467567467'])
    @pytest.mark.parametrize("circulation_volume", ['1000000', '', '4352456434545.7565675467567467'])
    @pytest.mark.parametrize("issued_at", '2018-08-08')
    @pytest.mark.parametrize("coin_logo", 'url/image456455')
    @pytest.mark.parametrize("blockchain_type", 'public_chain')
    @pytest.mark.parametrize("data_link", 'www.baidu.com')
    @pytest.mark.parametrize("block_browser", 'www.baidu.com"')
    def test_applications_post(self, project_name, description, official_website, white_paper, area_code,
                               project_poster, cellphone, telephone, email, full_name, short_name, issue_price,
                               issued_volume, circulation_volume, issued_at, coin_logo, blockchain_type, data_link,
                               block_browser):
        """Test case for applications_post
        申请项目  # noqa: E501
        """
        payload = {
            'project_name': project_name,
            'description': description,
            'official_website': official_website,
            'white_paper': white_paper,
            'area_code': area_code,
            'project_poster': project_poster,
            'cellphone': cellphone,
            'telephone': telephone,
            'email': email,
            'full_name': full_name,
            'short_name': short_name,
            'issue_price': issue_price,
            'issued_volume': issued_volume,
            'circulation_volume': circulation_volume,
            'issued_at': issued_at,
            'coin_logo': coin_logo,
            'blockchain_type': blockchain_type,
            'data_link': data_link,
            'block_browser': block_browser
        }
        try:
            req = ApplicationRequest(**payload)
            api.applications_post(body=req)
        except ApiException as e:
            if not all(payload["project_name"] == ''):
                assert e.status == 400
            elif any([True for i in [project_name, full_name, short_name] if (len(i) > 16 or len(i) < 2)]):
                assert e.status == 400
            elif any([True for i in [issue_price, issued_volume, circulation_volume] if (len(i) > 16 or len(i) < 1)]):
                assert e.status == 400
            elif any([True for i in telephone if (len(i) > 16 or len(i) < 8)]):
                assert e.status == 400

    def test_projects_get(self):
        """Test case for projects_get
        获取项目列表  # noqa: E501
        """
        ret = api.projects_get(page=1, order_rule="latestPrice")
        print(ret)

    def test_projects_id_get(self):
        """Test case for projects_id_get

        获取项目详情  # noqa: E501
        """
        api.projects_id_get(id='')
