# coding: utf-8

"""
    crush 项目方平台（venture）相关接口

    crush 项目方相关的后段（staff）接口和（tenant）交易所接口  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: api@crush.team
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pytest
import json
import swagger_client.venture
from swagger_client.venture.api.quotation_api import QuotationApi  # noqa: E501
from swagger_client.venture.rest import ApiException

# from conftest import verify, login, logout, register, BACK_DOOR_VERIFY_CODE, rand_password, rand_email, rand_phone, rand_indiv_cert


api = swagger_client.venture.api.quotation_api.QuotationApi()


def pytest_namespace():
    return {'email': "", "password": "", "base_token": "", "phone": ""}


class TestQuotationApi:
    """QuotationApi pytest stubs"""

    # def test_register_and_login_prepare(self):
    #     country = "86"
    #     pytest.email = rand_email()
    #     pytest.password = rand_password()
    #     register(email=pytest.email, password=pytest.password, promotion_code="",
    #              verification_code=BACK_DOOR_VERIFY_CODE,
    #              country=country)
    #
    #     pytest.base_token = login(api, pytest.email, pytest.password, challenge="", seccode=BACK_DOOR_VERIFY_CODE,
    #                               validate="")
    #     print("register return base_token:%s" % pytest.base_token)
    @pytest.mark.parametrize('project_id', ['jfisofjojwie', 'kj', '', 'aljfjasdjfoafjo'])
    @pytest.mark.parametrize('exchangeid', ['波场交易所'])
    @pytest.mark.parametrize('marketids', ['1, 2'])
    @pytest.mark.parametrize('timeScope', ["1h", "24d", "7d", "30d"])
    def test_get_project_market_trade_list(self, project_id, exchangeid, marketids, timescope):
        """Test case for get_project_market_trade_list

        获取市场的交易行情列表（交易所列表的行情）  # noqa: E501
        """
        assert len(project_id) in [i for i in range(2, 17)]
        assert len(exchangeid) in [i for i in range(2, 17)]
        body = {
            "exchangeId": exchangeid,
            "marketIds": marketids,
            "timeScope": timescope
        }
        res = api.get_project_market_trade_list(project_id, **body, async_req=True)
        assert res["items"]

    @pytest.mark.parametrize("coin_id", ['1', '2'])
    def test_quotation_coins_id_get(self, coin_id):
        """Test case for quotation_coins_id_get

        单一币种在单一交易所所有币对的行情统计（24小时）（交易所成交量占比）  # noqa: E501
        """
        assert len(coin_id) in [i for i in range(2, 17)]
        api.quotation_coins_id_get(coin_id, async_req=True)

    @pytest.mark.parametrize('coinid', ['1', '2'])
    @pytest.mark.parametrize('scope', 0)
    def test_quotation_historical_data_get(self, coinid, scope):
        """Test case for quotation_historical_data_get

        K线数据  # noqa: E501
        """
        assert len(coinid) in [i for i in range(2, 17)]
        body = {
            "coinId": coinid,
            "scope": scope
        }
        res = api.quotation_historical_data_get(**body, async_req=True)
        assert res["items"]

    @pytest.mark.parametrize('coinid', ['1', '2'])
    def test_quotation_id_overview_get(self, coinid):
        """Test case for quotation_id_overview_get

        单一币种在各交易所的行情概要  # noqa: E501
        """
        api.quotation_id_overview_get(coinid, async_req=True)
