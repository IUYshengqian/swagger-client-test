# coding: utf-8

"""
    crush 租户平台接口

    `crush` 平台接口（后台端）  当前接口为 `tenant` 端，访问其它接口：`staff`, `venture`, `user`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: api@crush.team
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pytest
import json
from test.tenant.id_settings import *
from test.tenant.tenant import Tenant


@pytest.fixture(scope="function")
def setup(request):
    banner = dict(
        title="hello world",
        banner="今晚打老虎",
        url="http://helloworld_rule_the_world/banner.jpg"
    )
    
    banner_modified = dict(
        title="go go go",
        banner="夜上海, 夜上海",
        url="http://go_go_go_never_stop/banner.jpg"
    )
    
    _tenant = Tenant(CONFIG.TENANT_INDEX)
    for ban in _tenant.list_banners():
        _tenant.delete_banner(ban.id)

    _tenant.add_banner(title=banner["title"], banner=banner["banner"], url=banner["url"])
    
    def finalize():
        for ban in _tenant.list_banners():
            _tenant.delete_banner(ban.id)
    
    request.addfinalizer(finalize)
    return _tenant, banner, banner_modified


class TestBannerManagementApi:
    """BannerManagementApi pytest stubs"""
    
    def test_banners_get(self, setup):
        _tenant, banner, _ = setup
        assert _tenant.list_banners(), "get non empty banner failed!"
        for ban in _tenant.list_banners():
            _tenant.delete_banner(ban.id)
        assert not _tenant.list_banners(), "get empty banner failed!"

    def test_banners_id_delete(self, setup):
        _tenant, banner, _ = setup
        for ban in _tenant.list_banners():
            _tenant.delete_banner(ban.id)
        assert _tenant.list_banners(), "delete banner failed!"
        
    def test_banners_id_get(self, setup):
        _tenant, banner, _ = setup

        banners = _tenant.query_banners(filter=dict(
            title=banner["title"],
        ))
        assert banners, "add banner failed"
        banner_details = _tenant.get_banner(banner_id=banners[0].id)
        assert banner_details, "Get banner details failed"
        
        for bid in range(1, 100):
            if bid != banners[0].id:
                non_exists = str(int(banners[0].id)+bid)
                print("get banner:", non_exists)
                try:
                    _tenant.get_banner(banner_id=non_exists)
                except _tenant.ApiException as e:
                    assert e.status == 400, "status code not 400"
                    assert json.loads(e.body)["message"] == "banner.not.exist"
                    print("not exists banner")
                else:
                    assert 0, "Get and non exists banner"

    def test_banners_id_put(self, setup):
        """Test case for banners_id_put

        修改轮播信息  # noqa: E501
        """
        _tenant, banner, banner_modified = setup
        banners = _tenant.query_banners(filter=dict(
            title=banner["title"],
        ))
        try:
            _tenant.update_banner(banners[0].id, "a", banner_modified["banner"], banner_modified["url"])
        except _tenant.ApiException as e:
            assert e.status == 400
            assert json.loads(e.body)["message"] == "标题"
        else:
            raise Exception("Invalid short title without validation")

        try:
            _tenant.update_banner(banners[0].id, "0123456789abcdefg", banner_modified["banner"], banner_modified["url"])
        except _tenant.ApiException as e:
            assert e.status == 400
            assert json.loads(e.body)["message"] == "标题"
        else:
            raise Exception("Invalid long title without validation")

    def test_banners_id_reduction_put(self, setup):
        """Test case for banners_id_reduction_put

        还原轮播信息  # noqa: E501
        """
        _tenant, banner, _ = setup
        banners = _tenant.query_banners(filter=dict(
            title=banner["title"],
        ))
        for bid in range(1, 100):
            if bid != banners[0].id:
                non_exists = str(int(banners[0].id) + bid)
                print("get banner:", non_exists)
                try:
                    _tenant.reset_banner(banner_id=non_exists)
                except _tenant.ApiException as e:
                    assert e.status == 400, "status code not 400"
                    assert json.loads(e.body)["message"] == "banner.not.exist"
                else:
                    raise Exception("Get and non exists banner")
    
    def test_banners_id_status_put(self, setup):
        """Test case for banners_id_status_put

        修改轮播状态  # noqa: E501
        """
        _tenant, banner, _ = setup

        banners = _tenant.query_banners(filter=dict(
            title=banner["title"],
        ))
        for bid in range(1, 100):
            if bid != banners[0].id:
                non_exists = str(int(banners[0].id) + bid)
                print("get banner:", non_exists)
                try:
                    _tenant.update_banner_status(banner_id=non_exists, status=False)
                except _tenant.ApiException as e:
                    assert e.status == 400, "status code not 400"
                    assert json.loads(e.body)["message"] == "banner.not.exist"
                else:
                    raise Exception("Get and non exists banner")
    
    def test_banners_post(self, setup):
        _tenant, banner, _ = setup
        for c in range(7):
            _tenant.add_banner(title="title_%u" % c, banner="banner is the same", url="http://zxy.com")
        try:
            _tenant.add_banner(title="title_%u" % 9, banner="banner is the same", url="http://zxy.com")
        except _tenant.ApiException as e:
            assert e.status == 400
            assert json.loads(e.body)["message"] == "banner.number.limit"
        else:
            assert 0, "should exceed limit"
            
            